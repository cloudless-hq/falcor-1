{"version":3,"sources":["../../src/components/container.js"],"names":["contextTypes","falcor","object","version","number","dispatch","func","containerBase","props","nextProps","thisVersion","thisJSON","data","restProps","nextVersion","nextJSON","restNextProps","$__hash","map","rest","$__path","length","deref","switchMap","getFragment","of","prev","settled","expand","loadContainerDataUntilSettled","takeLast","d2","error","$__version","getVersion","state","empty","query","from","get","call","json","catch","defaultMapFragmentToProps","defaultMapDispatchToProps","defaultMergeProps","stateProps","dispatchProps","parentProps","container","mapFragment","mapDispatch","mergeFragmentAndProps","actionCreators","mappedFragment","BaseComponent","loading","mappedDispatch","$__key","$__refPath","$__hash__$","$__keysPath","$__keyDepth","$__toReference","allMergedProps"],"mappings":"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","file":"container.js","sourcesContent":["import compose from 'recompose/compose';\nimport toClass from 'recompose/toClass';\nimport mapProps from 'recompose/mapProps';\nimport lifecycle from 'recompose/lifecycle';\nimport setStatic from 'recompose/setStatic';\nimport withProps from 'recompose/withProps';\nimport getContext from 'recompose/getContext';\nimport withContext from 'recompose/withContext';\nimport shallowEqual from 'recompose/shallowEqual';\nimport shouldUpdate from 'recompose/shouldUpdate';\nimport mapPropsStream from 'recompose/mapPropsStream';\nimport setDisplayName from 'recompose/setDisplayName';\nimport wrapDisplayName from 'recompose/wrapDisplayName';\nimport mapToFalcorJSON from '../utils/mapToFalcorJSON';\nimport bindActionCreators from '../utils/bindActionCreators';\nimport mergeIntoFalcorJSON from '../utils/mergeIntoFalcorJSON';\nimport setObservableConfig from 'recompose/setObservableConfig';\nimport invalidateFalcorJSON from '../utils/invalidateFalcorJSON';\nimport rxjsObservableConfig from 'recompose/rxjsObservableConfig';\nimport FalcorQuerySyntax from '@graphistry/falcor-query-syntax';\nimport { Observable } from 'rxjs';\nimport React, { PropTypes, Children } from 'react';\n\nconst contextTypes = {\n    falcor: PropTypes.object,\n    version: PropTypes.number,\n    dispatch: PropTypes.func\n};\n\nconst containerBase = compose(\n    getContext(contextTypes),\n    shouldUpdate((props, nextProps) => {\n        const { version: thisVersion, data: thisJSON, ...restProps } = props;\n        const { version: nextVersion, data: nextJSON, ...restNextProps } = nextProps;\n        if (thisVersion !== nextVersion) {\n            return true;\n        } else if (!thisJSON || !nextJSON || thisJSON.$__hash !== nextJSON.$__hash) {\n            return true;\n        }\n        return !shallowEqual(restProps, restNextProps);\n    }),\n    mapPropsStream((props) => props\n        .map((({ data, falcor, ...rest }) => {\n            data = invalidateFalcorJSON(mapToFalcorJSON(data, falcor));\n            return {\n                ...rest,data,\n                falcor: data &&\n                        data.$__path &&\n                        data.$__path.length &&\n                        falcor.deref(data) || falcor\n            };\n        }))\n        .switchMap(\n            ({ data, falcor, version, getFragment, ...rest }) => Observable\n                .of({\n                    prev: null, settled: false,\n                    data, falcor, getFragment, rest\n                })\n                .expand(loadContainerDataUntilSettled)\n                .takeLast(1),\n            ({ data, falcor, version, getFragment, ...rest }, { data: d2, error }) => ({\n                falcor, ...rest, data: d2, error\n            })\n        )\n    ),\n    withContext(contextTypes, ({ data, falcor }) => ({\n        falcor, version: data && data.$__version || falcor.getVersion()\n    }))\n);\n\nfunction loadContainerDataUntilSettled(state) {\n    if (state.settled === true) {\n        return Observable.empty();\n    }\n    const { data, rest, prev,\n            falcor, getFragment } = state;\n    const query = getFragment(data, rest);\n    if (query !== prev) {\n        return Observable\n            .from(falcor.get(...FalcorQuerySyntax.call(null, query)))\n            .map(({ json }) => Object.assign(state, {\n                prev: query, data: mergeIntoFalcorJSON(data, json)\n            }))\n            .catch((error) => Observable.of(Object.assign(state, {\n                error, settled: true\n            })));\n    }\n    return Observable.empty();\n}\n\nconst defaultMapFragmentToProps = (data) => data;\nconst defaultMapDispatchToProps = (dispatch, props, falcor) => ({});\nconst defaultMergeProps = (stateProps, dispatchProps, parentProps) => ({\n    ...parentProps, ...stateProps, ...dispatchProps\n});\n\nconst container = (\n    getFragment,\n    mapFragment = defaultMapFragmentToProps,\n    mapDispatch = defaultMapDispatchToProps,\n    mergeFragmentAndProps = defaultMergeProps\n) => {\n    if (typeof mapDispatch !== 'function') {\n        if (mapDispatch && typeof mapDispatch !== 'object') {\n            mapDispatch = defaultMapDispatchToProps;\n        } else {\n            mapDispatch = function(actionCreators) {\n                return function(dispatch, mappedFragment, falcor) {\n                    return bindActionCreators(actionCreators, dispatch, falcor);\n                };\n            }(mapDispatch)\n        }\n    }\n    return (BaseComponent) => compose(\n        setStatic('fragment', getFragment),\n        setDisplayName(wrapDisplayName(\n            BaseComponent, 'Container'\n        )),\n        toClass, withProps({ getFragment }),\n        containerBase,\n        mapProps(({ data, error, falcor, version, loading, dispatch, getFragment, ...rest }) => {\n            const mappedFragment = mapFragment(data, { error, ...rest });\n            const mappedDispatch = mapDispatch(dispatch, mappedFragment, falcor);\n            const {\n                $__key, $__path, $__refPath, $__version,\n                $__hash__$, $__keysPath, $__keyDepth, $__toReference,\n                ...allMergedProps\n            } = mergeFragmentAndProps(mappedFragment, mappedDispatch, rest);\n            return allMergedProps;\n        })\n    )(BaseComponent);\n};\n\nexport default container;\n"]}