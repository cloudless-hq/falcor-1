var expect = require('chai').expect;
var toRoutes = require('../lib/toRoutes');
var Router = require('@graphistry/falcor-router');
var $ref = require('@graphistry/falcor-json-graph').ref;
var $value = require('@graphistry/falcor-json-graph').pathValue;

describe('Router integration', function() {

    it('should use get routes generated by the query syntax', function(done) {

        var routes = getRoutes();
        var router = new Router(routes);

        router.get([
            ['genreLists', 'length'],
            ['genreLists', 0, 0, 'name']
        ])
        .do(function(x) {
            expect(x).to.deep.equal({
                paths: [
                    ['genreLists', 'length'],
                    ['genreLists', 0, 0, 'name']
                ],
                jsonGraph: {
                    genreLists: {
                        length: 1,
                        0: $ref(`listsById[123]`)
                    },
                    listsById: {
                        123: { 0: $ref(`titlesById[123]`) }
                    },
                    titlesById: {
                        123: { name: 'True Lies' }
                    }
                }
            });
        })
        .subscribe(null, done, done);
    });

    it('should use set routes generated by the query syntax', function(done) {

        var routes = getRoutes();
        var router = new Router(routes);

        router.set({
            paths: [
                ['genreLists', 0, 0, ['name', 'rating']]
            ],
            jsonGraph: {
                genreLists: {
                    0: {
                        0: {
                            rating: 75,
                            name: 'Total Recall'
                        }
                    }
                }
            }
        })
        .do(function(x) {
            expect(x).to.deep.equal({
                paths: [
                    ['genreLists', 0, 0, ['name', 'rating']]
                ],
                jsonGraph: {
                    genreLists: {
                        0: $ref(`listsById[123]`)
                    },
                    listsById: {
                        123: { 0: $ref(`titlesById[123]`) }
                    },
                    titlesById: {
                        123: {
                            rating: 75,
                            name: 'True Lies'
                        }
                    }
                }
            });
        })
        .subscribe(null, done, done);
    });

    it('should use call routes generated by the query syntax', function(done) {

        var routes = getRoutes();
        var router = new Router(routes);

        router.call(
            ['genreLists', 'push'],
            [$ref(`listsById[456]`)],
             // suffix paths
            [   [0, 'name']  ],
            // `this` paths
            [   ['length'],
                [0, 0, 'name']]
        )
        .do(function(x) {
            expect(x).to.deep.equal({
                paths: [
                    ['genreLists', 'length'],
                    ['genreLists', { from: 0, to: 1 }, 0, 'name']
                ],
                jsonGraph: {
                    genreLists: {
                        length: 2,
                        0: $ref(`listsById[123]`),
                        1: $ref(`listsById[456]`)
                    },
                    listsById: {
                        123: { 0: $ref(`titlesById[123]`) },
                        456: { 0: $ref(`titlesById[456]`) }
                    },
                    titlesById: {
                        123: { name: 'True Lies' },
                        456: { name: 'Kindergarten Cop' }
                    }
                }
            });
        })
        .subscribe(null, done, done);
    });
});

function getRoutes() {

    var g = {
        genreLists: [$ref(`listsById[123]`)],
        listsById: {
            123: [$ref(`titlesById[123]`)],
            456: [$ref(`titlesById[456]`)]
        },
        titlesById: {
            123: { name: 'True Lies', rating: 25 },
            456: { name: 'Kindergarten Cop', rating: 15 }
        }
    };

    return toRoutes`{
        genreLists: {
            length: ${{
                get() {
                    return $value(
                        `genreLists.length`,
                       g.genreLists.length
                    );
                }
            }},
            push: ${{
                call: function pushGenreList(path, args) {
                    return [
                        $value(`genreLists[${g.genreLists.length}]`, args[0]),
                        $value(`genreLists.length`, g.genreLists.push(args[0]))
                    ];
                }
            }},
            [{ integers: listIndexes }]: ${{
                get({ listIndexes }) {
                    return listIndexes.reduce(function(xs, listIndex) {
                        return xs.concat($value(
                            `genreLists[${listIndex}]`,
                           g.genreLists[  listIndex ]
                        ));
                    }, []);
                }
            }}
        },
        listsById: {
            [{ keys: listIds }]: {
                [{ integers: videoIndexes }]: ${{
                    get({ listIds, videoIndexes }) {
                        return listIds.reduce(function(xs, listId) {
                            return videoIndexes.reduce(function(xs, videoIndex) {
                                return xs.concat($value(
                                    `listsById['${listId}'][${videoIndex}]`,
                                   g.listsById[   listId  ][  videoIndex ]
                                ));
                            }, xs);
                        }, []);
                    }
                }}
            }
        },
        titlesById: {
            [{ keys: titleIds }]: {
                name: ${{
                    get({ titleIds }) {
                        return titleIds.reduce(function(xs, titleId) {
                            return xs.concat($value(
                                `titlesById['${titleId}'].name`,
                               g.titlesById[   titleId  ].name
                            ));
                        }, []);
                    }
                }},
                rating: ${{
                    set({ titlesById }) {
                        return Object.keys(titlesById).map(function(titleId) {
                            return $value(
                                `titlesById['${titleId}'].rating`,
                                g.titlesById[  titleId  ].rating =
                                    titlesById[titleId].rating
                            );
                        });
                    }
                }}
            }
        }
    }`;
}
