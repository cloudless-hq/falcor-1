{"version":3,"sources":["../../src/components/connect.js"],"names":["prototype","changes","_root","onChange","call","next","typeofObject","reduxOptions","pure","contextTypes","falcor","object","dispatch","func","connect","BaseComponent","scheduler","mapReduxStoreToProps","mapPropsToDistinctChanges","componentDidUpdate","props","data","type","_recycleJSON","_seed","json","__proto__","innerMapPropsToDistinctChanges","prop$","switchMap","mapPropsToChanges","mapChangeToProps","distinctUntilKeyChanged","auditTime","version","getVersion"],"mappings":"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","file":"connect.js","sourcesContent":["import compose from 'recompose/compose';\nimport lifecycle from 'recompose/lifecycle';\nimport withContext from 'recompose/withContext';\nimport hoistStatics from 'recompose/hoistStatics';\nimport mapPropsStream from 'recompose/mapPropsStream';\nimport setDisplayName from 'recompose/setDisplayName';\nimport wrapDisplayName from 'recompose/wrapDisplayName';\nimport setObservableConfig from 'recompose/setObservableConfig';\nimport rxjsObservableConfig from 'recompose/rxjsObservableConfig';\n\nimport invariant from 'invariant';\nimport React, { PropTypes, Children } from 'react';\nimport { connect as connectRedux } from 'react-redux';\n\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Model, FalcorJSON } from '@graphistry/falcor';\nimport { animationFrame } from 'rxjs/scheduler/animationFrame';\n// import { asap as asapScheduler } from 'rxjs/scheduler/asap';\n\nimport 'rxjs/add/operator/auditTime';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/distinctUntilKeyChanged';\n\nif (!Model.prototype.changes) {\n    Model.prototype.changes = function() {\n        const { _root } = this;\n        let { changes } = _root;\n        if (!changes) {\n            changes = _root.changes = new BehaviorSubject(this);\n            const { onChange } = _root;\n            _root.onChange = () => {\n                if (onChange) {\n                    onChange.call(this);\n                }\n                changes.next(this);\n            }\n        }\n        return changes;\n    }\n}\n\nsetObservableConfig(rxjsObservableConfig);\n\nconst typeofObject = 'object';\nconst reduxOptions = { pure: false };\nconst contextTypes = {\n    falcor: PropTypes.object,\n    dispatch: PropTypes.func\n};\n\nconst connect = (BaseComponent, scheduler = animationFrame) => hoistStatics(compose(\n    connectRedux(mapReduxStoreToProps, null, null, reduxOptions),\n    setDisplayName(wrapDisplayName(BaseComponent, 'Falcor')),\n    mapPropsStream(mapPropsToDistinctChanges(scheduler)),\n    withContext(contextTypes, ({ falcor, dispatch }) => ({\n        falcor, dispatch\n    })),\n    lifecycle({\n        componentDidUpdate() {\n            this.props.dispatch({\n                data: this.props.data,\n                type: 'falcor-react-redux/update'\n            });\n        }\n    })\n))(BaseComponent);\n\nexport { connect };\nexport default connect;\n\nfunction mapReduxStoreToProps(data, { falcor }) {\n\n    invariant(falcor, `The top level \"connect\" container requires a root falcor model.`);\n\n    if (data instanceof FalcorJSON) {\n        return { data };\n    } else if (falcor._recycleJSON) {\n        if (falcor._seed && falcor._seed.json) {\n            return { data: falcor._seed.json };\n        }\n        falcor._seed = {};\n        falcor._seed.__proto__ = FalcorJSON.prototype;\n        return { data: falcor._seed.json = new FalcorJSON(data) };\n    }\n\n    return { data: new FalcorJSON(data) };\n}\n\nfunction mapPropsToDistinctChanges(scheduler) {\n    return function innerMapPropsToDistinctChanges(prop$) {\n        return prop$.switchMap(\n            mapPropsToChanges, mapChangeToProps\n        )\n        .distinctUntilKeyChanged('version')\n        .auditTime(0, scheduler);\n    }\n}\n\nfunction mapPropsToChanges({ falcor }) {\n    return falcor.changes();\n}\n\nfunction mapChangeToProps(props, falcor) {\n    return { ...props, falcor, version: falcor.getVersion() };\n}\n"]}