{"version":3,"sources":["../../src/components/connect.js"],"names":["prototype","changes","_root","onChange","call","next","contextTypes","falcor","object","dispatch","func","connect","BaseComponent","data","props","switchMap","version","getVersion","distinctUntilKeyChanged","auditTime","componentDidUpdate","type"],"mappings":";;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;AACA;;;;AACA;;AAEA;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;;;AAEA,cAAMA,SAAN,CAAgBC,OAAhB,GAA0B,YAAW;AAAA;;AAAA,QACzBC,KADyB,GACf,IADe,CACzBA,KADyB;AAAA,QAE3BD,OAF2B,GAEfC,KAFe,CAE3BD,OAF2B;;AAGjC,QAAI,CAACA,OAAL,EAAc;AAAA;AACVA,sBAAUC,MAAMD,OAAN,GAAgB,2CAA1B;AADU,gBAEFE,QAFE,GAEWD,KAFX,CAEFC,QAFE;;AAGVD,kBAAMC,QAAN,GAAiB,YAAM;AACnB,oBAAIA,QAAJ,EAAc;AACVA,6BAASC,IAAT;AACH;AACDH,wBAAQI,IAAR;AACH,aALD;AAHU;AASb;AACD,WAAOJ,OAAP;AACH,CAdD;;AAgBA;;AAEA,IAAMK,eAAe;AACjBC,YAAQ,iBAAUC,MADD;AAEjBC,cAAU,iBAAUC;AAFH,CAArB;;AAKA,IAAMC,UAAU,SAAVA,OAAU,CAACC,aAAD;AAAA,WAAmB,uBAC/B,yBAAa,UAACC,IAAD;AAAA,YAASN,MAAT,QAASA,MAAT;AAAA,eAAuB;AAChCM,kBAAM,+BAAgBA,IAAhB,EAAsBN,MAAtB;AAD0B,SAAvB;AAAA,KAAb,CAD+B,EAI/B,8BAAe,+BACXK,aADW,EACI,QADJ,CAAf,CAJ+B,EAO/B,8BAAe,UAACE,KAAD;AAAA,eAAWA,MACrBC,SADqB,CAElB;AAAA,gBAAGR,MAAH,SAAGA,MAAH;AAAA,mBAAgBA,OAAON,OAAP,EAAhB;AAAA,SAFkB,EAGlB,iBAAeM,MAAf;AAAA,gBAAMO,KAAN;;AAAA,gCACOA,KADP,IACcP,cADd,EACsBS,SAAST,OAAOU,UAAP;AAD/B;AAAA,SAHkB,EAOrBC,uBAPqB,CAOG,SAPH,EAQrBC,SARqB,CAQX,CARW,iCAAX;AAAA,KAAf,CAP+B,EAiB/B,2BAAYb,YAAZ,EAA0B;AAAA,YAAGC,MAAH,SAAGA,MAAH;AAAA,YAAWE,QAAX,SAAWA,QAAX;AAAA,eAA2B;AACjDF,0BADiD,EACzCE;AADyC,SAA3B;AAAA,KAA1B,CAjB+B,EAoB/B,yBAAU;AACNW,0BADM,gCACe;AACjB,iBAAKN,KAAL,CAAWL,QAAX,CAAoB;AAChB;AACAI,sBAAM,KAAKC,KAAL,CAAWD,IAFD;AAGhBQ,sBAAM;AAHU,aAApB;AAKH;AAPK,KAAV,CApB+B,EA6BjCT,aA7BiC,CAAnB;AAAA,CAAhB;;kBA+BeD,O","file":"connect.js","sourcesContent":["import compose from 'recompose/compose';\nimport toClass from 'recompose/toClass';\nimport mapProps from 'recompose/mapProps';\nimport lifecycle from 'recompose/lifecycle';\nimport setStatic from 'recompose/setStatic';\nimport withProps from 'recompose/withProps';\nimport getContext from 'recompose/getContext';\nimport withContext from 'recompose/withContext';\nimport shouldUpdate from 'recompose/shouldUpdate';\nimport mapPropsStream from 'recompose/mapPropsStream';\nimport setDisplayName from 'recompose/setDisplayName';\nimport wrapDisplayName from 'recompose/wrapDisplayName';\nimport mapToFalcorJSON from '../utils/mapToFalcorJSON';\nimport bindActionCreators from '../utils/bindActionCreators';\nimport setObservableConfig from 'recompose/setObservableConfig';\nimport rxjsObservableConfig from 'recompose/rxjsObservableConfig';\n\nimport { Model } from '@graphistry/falcor';\nimport React, { PropTypes, Children } from 'react';\nimport { connect as connectRedux } from 'react-redux';\n\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { animationFrame } from 'rxjs/scheduler/animationFrame';\n\nimport 'rxjs/add/operator/auditTime';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/distinctUntilKeyChanged';\n\nModel.prototype.changes = function() {\n    const { _root } = this;\n    let { changes } = _root;\n    if (!changes) {\n        changes = _root.changes = new BehaviorSubject(this);\n        const { onChange } = _root;\n        _root.onChange = () => {\n            if (onChange) {\n                onChange.call(this);\n            }\n            changes.next(this);\n        }\n    }\n    return changes;\n}\n\nsetObservableConfig(rxjsObservableConfig);\n\nconst contextTypes = {\n    falcor: PropTypes.object,\n    dispatch: PropTypes.func\n};\n\nconst connect = (BaseComponent) => compose(\n    connectRedux((data, { falcor }) => ({\n        data: mapToFalcorJSON(data, falcor)\n    })),\n    setDisplayName(wrapDisplayName(\n        BaseComponent, 'Falcor'\n    )),\n    mapPropsStream((props) => props\n        .switchMap(\n            ({ falcor }) => falcor.changes(),\n            ({ ...props }, falcor) => ({\n                ...props, falcor, version: falcor.getVersion()\n            })\n        )\n        .distinctUntilKeyChanged('version')\n        .auditTime(0, animationFrame)\n    ),\n    withContext(contextTypes, ({ falcor, dispatch }) => ({\n        falcor, dispatch\n    })),\n    lifecycle({\n        componentDidUpdate() {\n            this.props.dispatch({\n                // data: { ...this.props.data },\n                data: this.props.data,\n                type: 'falcor-react-redux/update'\n            });\n        }\n    })\n)(BaseComponent);\n\nexport default connect;\n"]}