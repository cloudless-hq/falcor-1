{"version":3,"sources":["../../src/components/connect.js"],"names":["Scheduler","prototype","changes","_root","forEach","name","handler","call","next","reduxOptions","pure","contextTypes","falcor","object","dispatch","func","connect","BaseComponent","scheduler","async","mapReduxStoreToProps","mapPropsToDistinctChanges","componentDidUpdate","props","data","type","_recycleJSON","_seed","json","__proto__","innerMapPropsToDistinctChanges","prop$","switchMap","mapPropsToChanges","mapChangeToProps","let","throttleTrailing","distinctUntilKeyChanged","version","getVersion","due","source","throttleTime","publish","shared","merge","switchMapTo","timeoutWith","empty","takeLast"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;AAEA;;AACA;;AACA;;AACA;;IAAYA,S;;AAEZ;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AAEA,IAAI,CAAC,cAAMC,SAAN,CAAgBC,OAArB,EAA8B;AAC1B,kBAAMD,SAAN,CAAgBC,OAAhB,GAA0B,YAAW;AAAA,YACzBC,KADyB,GACf,IADe,CACzBA,KADyB;AAAA,YAE3BD,OAF2B,GAEfC,KAFe,CAE3BD,OAF2B;;AAGjC,YAAI,CAACA,OAAL,EAAc;AACVA,sBAAUC,MAAMD,OAAN,GAAgB,qCAAoB,IAApB,CAA1B;AACA,aAAC,UAAD,EAAa,oBAAb,EAAmCE,OAAnC,CAA2C,UAACC,IAAD,EAAU;AACjD,oBAAMC,UAAUH,MAAME,IAAN,CAAhB;AACAF,sBAAME,IAAN,IAAc,YAAW;AACrB,wBAAIC,OAAJ,EAAa;AACTA,gCAAQC,IAAR,CAAa,IAAb;AACH;AACDL,4BAAQM,IAAR,CAAa,IAAb;AACH,iBALD;AAMH,aARD;AASH;AACD,eAAON,OAAP;AACH,KAhBD;AAiBH;;AAED;;AAEA,IAAMO,eAAe,EAAEC,MAAM,KAAR,EAArB;AACA,IAAMC,eAAe,EAAEC,QAAQ,iBAAUC,MAApB,EAA4BC,UAAU,iBAAUC,IAAhD,EAArB;;AAEA,IAAMC,UAAU,SAAVA,OAAU,CAACC,aAAD;AAAA,QAAgBC,SAAhB,uEAA4BlB,UAAUmB,KAAtC;AAAA,WAAgD,4BAAa,uBACzE,yBAAaC,oBAAb,EAAmC,IAAnC,EAAyC,IAAzC,EAA+CX,YAA/C,CADyE,EAEzE,8BAAe,+BAAgBQ,aAAhB,EAA+B,QAA/B,CAAf,CAFyE,EAGzE,8BAAeI,0BAA0BH,SAA1B,CAAf,CAHyE,EAIzE,2BAAYP,YAAZ,EAA0B;AAAA,YAAGC,MAAH,QAAGA,MAAH;AAAA,YAAWE,QAAX,QAAWA,QAAX;AAAA,eAA2B;AACjDF,0BADiD,EACzCE;AADyC,SAA3B;AAAA,KAA1B,CAJyE,EAOzE,yBAAU;AACNQ,0BADM,gCACe;AACjB,iBAAKC,KAAL,CAAWT,QAAX,CAAoB;AAChBU,sBAAM,KAAKD,KAAL,CAAWC,IADD;AAEhBC,sBAAM;AAFU,aAApB;AAIH;AANK,KAAV,CAPyE,CAAb,EAe7DR,aAf6D,CAAhD;AAAA,CAAhB;;QAiBSD,O,GAAAA,O;kBACMA,O;;;AAEf,SAASI,oBAAT,CAA8BI,IAA9B,SAAgD;AAAA,QAAVZ,MAAU,SAAVA,MAAU;;;AAE5C,6BAAUA,MAAV;;AAEA,QAAIY,kCAAJ,EAAgC;AAC5B,eAAO,EAAEA,UAAF,EAAP;AACH,KAFD,MAEO,IAAIZ,OAAOc,YAAX,EAAyB;AAC5B,YAAId,OAAOe,KAAP,IAAgBf,OAAOe,KAAP,CAAaC,IAAjC,EAAuC;AACnC,mBAAO,EAAEJ,MAAMZ,OAAOe,KAAP,CAAaC,IAArB,EAAP;AACH;AACDhB,eAAOe,KAAP,GAAe,EAAf;AACAf,eAAOe,KAAP,CAAaE,SAAb,GAAyB,mBAAW5B,SAApC;AACA,eAAO,EAAEuB,MAAMZ,OAAOe,KAAP,CAAaC,IAAb,GAAoB,uBAAeJ,IAAf,CAA5B,EAAP;AACH;;AAED,WAAO,EAAEA,MAAM,uBAAeA,IAAf,CAAR,EAAP;AACH;;AAED,SAASH,yBAAT,CAAmCH,SAAnC,EAA8C;AAC1C,WAAO,SAASY,8BAAT,CAAwCC,KAAxC,EAA+C;AAClD,eAAOA,MAAMC,SAAN,CACHC,iBADG,EACgBC,gBADhB,EAGNC,GAHM,CAGFC,iBAAiB,CAAjB,EAAoBlB,SAApB,CAHE,EAINmB,uBAJM,CAIkB,SAJlB,CAAP;AAKH,KAND;AAOH;;AAED,SAASJ,iBAAT,QAAuC;AAAA,QAAVrB,MAAU,SAAVA,MAAU;;AACnC,WAAOA,OAAOV,OAAP,EAAP;AACH;;AAED,SAASgC,gBAAT,CAA0BX,KAA1B,EAAiCX,MAAjC,EAAyC;AACrC,sCAAYW,KAAZ,IAAmBX,cAAnB,EAA2B0B,SAAS1B,OAAO2B,UAAP,EAApC;AACH;;AAED,SAASH,gBAAT,CAA0BI,GAA1B,EAA+BtB,SAA/B,EAA0C;AACtC,WAAO,SAASkB,gBAAT,CAA0BK,MAA1B,EAAkC;AACrC,eAAOA,OACFC,YADE,CACWF,GADX,EACgBtB,SADhB,EAEFyB,OAFE,CAEM;AAAA,mBAAUC,OACdC,KADc,CACRD,OAAOE,WAAP,CAAmBF,OACrBG,WADqB,CACTP,GADS,EACJ,uBAAWQ,KAAX,EADI,EACgB9B,SADhB,EAErB+B,QAFqB,CAEZ,CAFY,CAAnB,CADQ,CAAV;AAAA,SAFN,CAAP;AAQH,KATD;AAUH","file":"connect.js","sourcesContent":["import compose from 'recompose/compose';\nimport lifecycle from 'recompose/lifecycle';\nimport withContext from 'recompose/withContext';\nimport hoistStatics from 'recompose/hoistStatics';\nimport mapPropsStream from 'recompose/mapPropsStream';\nimport setDisplayName from 'recompose/setDisplayName';\nimport wrapDisplayName from 'recompose/wrapDisplayName';\nimport setObservableConfig from 'recompose/setObservableConfig';\nimport rxjsObservableConfig from 'recompose/rxjsObservableConfig';\n\nimport invariant from 'invariant';\nimport React, { PropTypes, Children } from 'react';\nimport { connect as connectRedux } from 'react-redux';\n\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Model, FalcorJSON } from '@graphistry/falcor';\nimport * as Scheduler from 'rxjs/scheduler/async';\n\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/let';\nimport 'rxjs/add/operator/merge';\nimport 'rxjs/add/operator/publish';\nimport 'rxjs/add/operator/takeLast';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/switchMapTo';\nimport 'rxjs/add/operator/timeoutWith';\nimport 'rxjs/add/operator/throttleTime';\nimport 'rxjs/add/operator/distinctUntilKeyChanged';\n\nif (!Model.prototype.changes) {\n    Model.prototype.changes = function() {\n        const { _root } = this;\n        let { changes } = _root;\n        if (!changes) {\n            changes = _root.changes = new BehaviorSubject(this);\n            ['onChange', 'onChangesCompleted'].forEach((name) => {\n                const handler = _root[name];\n                _root[name] = function() {\n                    if (handler) {\n                        handler.call(this);\n                    }\n                    changes.next(this);\n                }\n            });\n        }\n        return changes;\n    }\n}\n\nsetObservableConfig(rxjsObservableConfig);\n\nconst reduxOptions = { pure: false };\nconst contextTypes = { falcor: PropTypes.object, dispatch: PropTypes.func };\n\nconst connect = (BaseComponent, scheduler = Scheduler.async) => hoistStatics(compose(\n    connectRedux(mapReduxStoreToProps, null, null, reduxOptions),\n    setDisplayName(wrapDisplayName(BaseComponent, 'Falcor')),\n    mapPropsStream(mapPropsToDistinctChanges(scheduler)),\n    withContext(contextTypes, ({ falcor, dispatch }) => ({\n        falcor, dispatch\n    })),\n    lifecycle({\n        componentDidUpdate() {\n            this.props.dispatch({\n                data: this.props.data,\n                type: 'falcor-react-redux/update'\n            });\n        }\n    })\n))(BaseComponent);\n\nexport { connect };\nexport default connect;\n\nfunction mapReduxStoreToProps(data, { falcor }) {\n\n    invariant(falcor, `The top level \"connect\" container requires a root falcor model.`);\n\n    if (data instanceof FalcorJSON) {\n        return { data };\n    } else if (falcor._recycleJSON) {\n        if (falcor._seed && falcor._seed.json) {\n            return { data: falcor._seed.json };\n        }\n        falcor._seed = {};\n        falcor._seed.__proto__ = FalcorJSON.prototype;\n        return { data: falcor._seed.json = new FalcorJSON(data) };\n    }\n\n    return { data: new FalcorJSON(data) };\n}\n\nfunction mapPropsToDistinctChanges(scheduler) {\n    return function innerMapPropsToDistinctChanges(prop$) {\n        return prop$.switchMap(\n            mapPropsToChanges, mapChangeToProps\n        )\n        .let(throttleTrailing(0, scheduler))\n        .distinctUntilKeyChanged('version');\n    }\n}\n\nfunction mapPropsToChanges({ falcor }) {\n    return falcor.changes();\n}\n\nfunction mapChangeToProps(props, falcor) {\n    return { ...props, falcor, version: falcor.getVersion() };\n}\n\nfunction throttleTrailing(due, scheduler) {\n    return function throttleTrailing(source) {\n        return source\n            .throttleTime(due, scheduler)\n            .publish(shared => shared\n                .merge(shared.switchMapTo(shared\n                    .timeoutWith(due, Observable.empty(), scheduler)\n                    .takeLast(1))\n                )\n            );\n    }\n}\n"]}