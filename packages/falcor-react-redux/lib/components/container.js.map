{"version":3,"sources":["../../src/components/container.js"],"names":["container","defaultMapFragmentToProps","data","defaultMapDispatchToProps","dispatch","props","falcor","defaultMergeProps","stateProps","dispatchProps","parentProps","fragmentDesc","fragment","renderErrors","renderLoading","mapFragment","mapDispatch","mapFragmentAndProps","dispatchers","actionCreators","mappedFragment","BaseComponent","FalcorContainer","fragments","Component","displayName","items","hasOwnProperty","map","key","xs","i","reduce","x","derefEachPropUpdate","update","_node","deref","fetchEachPropUpdate","self","let","source","takeLast","mergeEachPropUpdate","error","version","loading","hash","$__hash","contextTypes","object","func","context","constructor","state","getVersion","propsStream","propsAction","switchMap","nextProps","nextState","nextContext","nextJSON","thisJSON","thisHash","thisVersion","$__version","next","propsSubscription","subscribe","setState","unsubscribe","undefined","mergeFragmentAndProps","mappedDispatch","allMergedProps","childContextTypes"],"mappings":"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","file":"container.js","sourcesContent":["import invariant from 'invariant';\nimport React, { PropTypes, Children } from 'react';\nimport hoistStatics from 'recompose/hoistStatics';\nimport shallowEqual from 'recompose/shallowEqual';\nimport mapToFalcorJSON from '../utils/mapToFalcorJSON';\nimport wrapDisplayName from 'recompose/wrapDisplayName';\nimport bindActionCreators from '../utils/bindActionCreators';\nimport fetchDataUntilSettled from '../utils/fetchDataUntilSettled';\n\nimport { Subject } from 'rxjs/Subject';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/switchMap';\n\nconst defaultMapFragmentToProps = (data) => data;\nconst defaultMapDispatchToProps = (dispatch, props, falcor) => ({});\nconst defaultMergeProps = (stateProps, dispatchProps, parentProps) => ({\n    ...parentProps, ...stateProps, ...dispatchProps\n});\n\nexport default function container(fragmentDesc, ...rest) {\n\n    invariant(fragmentDesc && (\n        typeof fragmentDesc === 'function' || (\n        typeof fragmentDesc === 'object' &&\n        typeof fragmentDesc.fragment === 'function')),\n`Attempted to create a Falcor container component without a fragment.\nFalcor containers must be created with either a fragment function or an Object with a fragment function.`);\n\n    let renderErrors,\n        renderLoading,\n        fragment, mapFragment,\n        mapDispatch, mapFragmentAndProps;\n\n    if (typeof fragmentDesc === 'object') {\n        fragment = fragmentDesc.fragment;\n        mapFragment = fragmentDesc.mapFragment;\n        renderErrors = fragmentDesc.renderErrors;\n        renderLoading = fragmentDesc.renderLoading;\n        mapFragmentAndProps = fragmentDesc.mapFragmentAndProps;\n        mapDispatch = fragmentDesc.mapDispatch || fragmentDesc.dispatchers;\n    } else {\n        fragment = fragmentDesc;\n        mapFragment = rest[0];\n        mapDispatch = rest[1];\n        mapFragmentAndProps = rest[2];\n    }\n\n    mapFragment = mapFragment || defaultMapFragmentToProps;\n    mapDispatch = mapDispatch || defaultMapDispatchToProps;\n    mapFragmentAndProps = mapFragmentAndProps || defaultMergeProps;\n\n    if (typeof mapDispatch !== 'function') {\n        if (mapDispatch && typeof mapDispatch !== 'object') {\n            mapDispatch = defaultMapDispatchToProps;\n        } else {\n            mapDispatch = function(actionCreators) {\n                return function(dispatch, mappedFragment, falcor) {\n                    return bindActionCreators(actionCreators, dispatch, falcor);\n                };\n            }(mapDispatch);\n        }\n    }\n\n    return hoistStatics((BaseComponent) => class Container extends FalcorContainer {\n        static fragment = fragment;\n        static fragments = fragments;\n        static Component = BaseComponent;\n        static mapFragment = mapFragment;\n        static mapDispatch = mapDispatch;\n        static renderErrors = renderErrors;\n        static renderLoading = renderLoading;\n        static mapFragmentAndProps = mapFragmentAndProps;\n        static displayName = wrapDisplayName(BaseComponent, 'Container');\n    });\n}\n\nconst fragments = function(items = []) {\n    if (!items || typeof items !== 'object') {\n        return `{ length }`;\n    } else if (!items.hasOwnProperty('length')) {\n        items = Object.keys(items).map((key) => items[key]);\n    }\n    return `{ length ${Array\n        .from(items, (xs, i) => xs)\n        .reduce((xs, x, i) => `${xs}, ${i}: ${this.fragment(x)}`, '')\n    }}`;\n}\n\nfunction derefEachPropUpdate(update) {\n    let { data, falcor } = update;\n    update.data = data = mapToFalcorJSON(data);\n    if (!falcor._node || falcor._node !== data) {\n        update.falcor = falcor.deref(data);\n    }\n    return update;\n}\n\nfunction fetchEachPropUpdate({ self, data, props, falcor }) {\n    const { fragment, renderLoading } = self;\n    return fetchDataUntilSettled({\n        data, props, falcor, fragment\n    }).let((source) =>\n        renderLoading ? source : source.takeLast(1)\n    );\n}\n\nfunction mergeEachPropUpdate(\n    { props, falcor, dispatch },\n    { data, error, version, loading }\n) {\n    return {\n        data, error, loading,\n        falcor, dispatch, version,\n        hash: data && data.$__hash\n    };\n}\n\nconst contextTypes = {\n    falcor: PropTypes.object,\n    dispatch: PropTypes.func\n};\n\nclass FalcorContainer extends React.Component {\n\n    static contextTypes = contextTypes;\n    static childContextTypes = contextTypes;\n\n    constructor(props, context) {\n        super(props, context);\n\n        let { data } = props;\n        let { falcor, dispatch } = context;\n        const { fragment,\n                Component,\n                mapFragment,\n                mapDispatch,\n                renderErrors,\n                renderLoading,\n                mapFragmentAndProps\n        } = this.constructor;\n\n        this.fragment = fragment;\n        this.Component = Component;\n        this.mapDispatch = mapDispatch;\n        this.mapFragment = mapFragment;\n        this.renderErrors = renderErrors;\n        this.renderLoading = renderLoading;\n        this.mapFragmentAndProps = mapFragmentAndProps;\n\n        falcor = falcor.deref(data = mapToFalcorJSON(data));\n\n        this.state = {\n            hash: data.$__hash,\n            data, falcor, dispatch,\n            version: falcor.getVersion()\n        };\n\n        this.propsStream = new Subject();\n        this.propsAction = this.propsStream\n            .map(derefEachPropUpdate)\n            .switchMap(\n                fetchEachPropUpdate,\n                mergeEachPropUpdate\n            );\n    }\n    getChildContext() {\n        const { falcor, dispatch } = this.state;\n        return { falcor, dispatch };\n    }\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { data: nextJSON } = nextProps;\n        const { data: thisJSON, hash: thisHash,\n                version: thisVersion } = nextState;\n        return !(\n            thisJSON && nextJSON &&\n            thisHash === nextJSON.$__hash &&\n            thisVersion === nextJSON.$__version\n            && shallowEqual(this.state, nextState)\n        );\n    }\n    componentWillReceiveProps(nextProps, nextContext) {\n        // Receive new props from the owner\n        this.propsStream.next({\n            self: this,\n            props: nextProps,\n            data: nextProps.data,\n            falcor: nextContext.falcor,\n            dispatch: nextContext.dispatch\n        });\n    }\n    componentWillMount() {\n        // Subscribe to child prop changes so we know when to re-render\n        this.propsSubscription = this.propsAction.subscribe((nextState) => {\n            this.setState(nextState);\n        });\n        this.propsStream.next({\n            self: this,\n            props: this.props,\n            data: this.props.data,\n            falcor: this.context.falcor,\n            dispatch: this.context.dispatch\n        });\n    }\n    componentWillUnmount() {\n        // Clean-up subscription before un-mounting\n        this.propsSubscription.unsubscribe();\n        this.propsSubscription = undefined;\n        this.fragment = null;\n        this.Component = null;\n        this.mapDispatch = null;\n        this.mapFragment = null;\n        this.renderLoading = null;\n        this.mergeFragmentAndProps = null;\n    }\n    render() {\n\n        const { Component,\n                props, state,\n                renderErrors,\n                renderLoading,\n                mapFragmentAndProps,\n                mapFragment, mapDispatch } = this;\n\n        if (!Component) {\n            return null;\n        }\n\n        const { data, error, loading, falcor, dispatch } = state;\n\n        const mappedFragment = mapFragment(data, props);\n\n        if (error && renderErrors === true) {\n            mappedFragment.error = error;\n        }\n\n        if (loading && renderLoading === true) {\n            mappedFragment.loading = loading;\n        }\n\n        const mappedDispatch = mapDispatch(dispatch, mappedFragment, falcor);\n        const allMergedProps = mapFragmentAndProps(mappedFragment, mappedDispatch, props);\n\n        return <Component { ...allMergedProps }/>;\n    }\n}\n"]}