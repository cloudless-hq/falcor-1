{"version":3,"sources":["../../src/utils/bindActionCreators.js"],"names":["bindActionCreators","bindActionCreator","actionCreator","dispatch","falcor","actionCreators","Error","keys","boundActionCreators","i","length","key"],"mappings":";;;;;;;;;;;;;;;;;;kBAyBwBA,kB;;;;AAzBxB,SAASC,iBAAT,CAA2BC,aAA3B,EAA0CC,QAA1C,EAAoDC,MAApD,EAA4D;AACxD,WAAO;AAAA,eAAaD,kCAAWC,cAAX,IAAsBF,yCAAtB,EAAb;AAAA,KAAP;AACH;;AAED;;;;;;;;;;;;;;;;;;;;;AAqBe,SAASF,kBAAT,CAA4BK,cAA5B,EAA4CF,QAA5C,EAAsDC,MAAtD,EAA8D;AACzE,QAAI,OAAOC,cAAP,KAA0B,UAA9B,EAA0C;AACtC,eAAOJ,kBAAkBI,cAAlB,EAAkCF,QAAlC,EAA4CC,MAA5C,CAAP;AACH;;AAED,QAAI,QAAOC,cAAP,uDAAOA,cAAP,OAA0B,QAA1B,IAAsCA,mBAAmB,IAA7D,EAAmE;AAC/D,cAAM,IAAIC,KAAJ,CACF,4EAAyED,mBAAmB,IAAnB,GAA0B,MAA1B,UAA0CA,cAA1C,uDAA0CA,cAA1C,CAAzE,qGADE,CAAN;AAIH;;AAED,QAAIE,OAAO,oBAAYF,cAAZ,CAAX;AACA,QAAIG,sBAAsB,EAA1B;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,KAAKG,MAAzB,EAAiCD,GAAjC,EAAsC;AAClC,YAAIE,MAAMJ,KAAKE,CAAL,CAAV;AACA,YAAIP,gBAAgBG,eAAeM,GAAf,CAApB;AACA,YAAI,OAAOT,aAAP,KAAyB,UAA7B,EAAyC;AACrCM,gCAAoBG,GAApB,IAA2BV,kBAAkBC,aAAlB,EAAiCC,QAAjC,EAA2CC,MAA3C,CAA3B;AACH;AACJ;AACD,WAAOI,mBAAP;AACH","file":"bindActionCreators.js","sourcesContent":["function bindActionCreator(actionCreator, dispatch, falcor) {\n    return (...args) => dispatch({ falcor, ...actionCreator(...args) })\n}\n\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass a single function as the first argument,\n * and get a function in return.\n *\n * @param {Function|Object} actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use ES6 `import * as`\n * syntax. You may also pass a single function.\n *\n * @param {Function} dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns {Function|Object} The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\nexport default function bindActionCreators(actionCreators, dispatch, falcor) {\n    if (typeof actionCreators === 'function') {\n        return bindActionCreator(actionCreators, dispatch, falcor);\n    }\n\n    if (typeof actionCreators !== 'object' || actionCreators === null) {\n        throw new Error(\n            `bindActionCreators expected an object or a function, instead received ${actionCreators === null ? 'null' : typeof actionCreators}. ` +\n            `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`\n        );\n    }\n\n    var keys = Object.keys(actionCreators);\n    var boundActionCreators = {};\n    for (var i = 0; i < keys.length; i++) {\n        var key = keys[i];\n        var actionCreator = actionCreators[key];\n        if (typeof actionCreator === 'function') {\n            boundActionCreators[key] = bindActionCreator(actionCreator, dispatch, falcor);\n        }\n    }\n    return boundActionCreators;\n}\n"]}