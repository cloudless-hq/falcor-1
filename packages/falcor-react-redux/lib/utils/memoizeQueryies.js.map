{"version":3,"sources":["../../src/utils/memoizeQueryies.js"],"names":["memoizeQueryies","limit","count","map","lru","memoizedQuerySyntax","query","entry","undefined","tail","splice","parser","error","promote","head","prev","next"],"mappings":";;;;;;;;;;kBAGwBA,e;;AAHxB;;AACA;;;;;;AAEe,SAASA,eAAT,GAAsC;AAAA,QAAbC,KAAa,uEAAL,GAAK;;AACjD,QAAIC,QAAQ,CAAZ;AACA,QAAMC,MAAM,EAAZ;AACA,QAAMC,MAAM,EAAZ;AACA,WAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AACvC,YAAIC,QAAQJ,IAAIG,KAAJ,CAAZ;AACA,YAAIC,UAAUC,SAAd,EAAyB;AACrB,gBAAI,EAAEN,KAAF,GAAUD,KAAd,EAAqB;AACjB,uBAAOE,IAAIC,IAAIK,IAAJ,CAASH,KAAb,CAAP;AACAI,uBAAON,GAAP,EAAYA,IAAIK,IAAhB;AACH;AACDF,oBAAQJ,IAAIG,KAAJ,6BAAeA,YAAf,IAAyB,sBAAU,4BAAkBK,MAA5B,EAAoCL,KAApC,CAAzB,CAAR;AACH,SAND,MAMO,IAAIC,MAAMK,KAAV,EAAiB;AACpBL,oBAAQJ,IAAIG,KAAJ,6BAAeA,YAAf,IAAyB,sBAAU,4BAAkBK,MAA5B,EAAoCL,KAApC,CAAzB,CAAR;AACH;AACDO,gBAAQT,GAAR,EAAaG,KAAb;AACA,eAAOA,KAAP;AACH,KAbD;AAcH;;AAED,SAASM,OAAT,CAAiBT,GAAjB,EAAsBG,KAAtB,EAA6B;AACzB,QAAIO,OAAOV,IAAIU,IAAf;AACA,QAAI,CAACA,IAAL,EAAW;AACPV,YAAIU,IAAJ,GAAWV,IAAIK,IAAJ,GAAWF,KAAtB;AACA;AACH,KAHD,MAIK,IAAIO,SAASP,KAAb,EAAoB;AACrB;AACH;AACD,QAAIQ,OAAOR,MAAMQ,IAAjB;AACA,QAAIC,OAAOT,MAAMS,IAAjB;AACAA,aAASA,KAAKD,IAAL,GAAYA,IAArB;AACAA,aAASA,KAAKC,IAAL,GAAYA,IAArB;AACAT,UAAMQ,IAAN,GAAaP,SAAb;AACA;AACAJ,QAAIU,IAAJ,GAAWP,KAAX;AACAA,UAAMS,IAAN,GAAaF,IAAb;AACAA,SAAKC,IAAL,GAAYR,KAAZ;AACA;AACA,QAAIA,UAAUH,IAAIK,IAAlB,EAAwB;AACpBL,YAAIK,IAAJ,GAAWM,IAAX;AACH;AACJ;;AAED,SAASL,MAAT,CAAgBN,GAAhB,EAAqBG,KAArB,EAA4B;AACxB,QAAIQ,OAAOR,MAAMQ,IAAjB;AACA,QAAIC,OAAOT,MAAMS,IAAjB;AACAA,aAASA,KAAKD,IAAL,GAAYA,IAArB;AACAA,aAASA,KAAKC,IAAL,GAAYA,IAArB;AACAT,UAAMQ,IAAN,GAAaR,MAAMS,IAAN,GAAaR,SAA1B;AACA,QAAID,UAAUH,IAAIU,IAAlB,EAAwB;AACpBV,YAAIU,IAAJ,GAAWE,IAAX;AACH;AACD,QAAIT,UAAUH,IAAIK,IAAlB,EAAwB;AACpBL,YAAIK,IAAJ,GAAWM,IAAX;AACH;AACJ","file":"memoizeQueryies.js","sourcesContent":["import { parse as parseUtil } from 'pegjs-util';\nimport FalcorQuerySyntax from '@graphistry/falcor-query-syntax';\n\nexport default function memoizeQueryies(limit = 100) {\n    let count = 0;\n    const map = {};\n    const lru = {};\n    return function memoizedQuerySyntax(query) {\n        let entry = map[query];\n        if (entry === undefined) {\n            if (++count > limit) {\n                delete map[lru.tail.query];\n                splice(lru, lru.tail);\n            }\n            entry = map[query] = { query, ...parseUtil(FalcorQuerySyntax.parser, query) };\n        } else if (entry.error) {\n            entry = map[query] = { query, ...parseUtil(FalcorQuerySyntax.parser, query) };\n        }\n        promote(lru, entry);\n        return entry;\n    }\n}\n\nfunction promote(lru, entry) {\n    let head = lru.head;\n    if (!head) {\n        lru.head = lru.tail = entry;\n        return;\n    }\n    else if (head === entry) {\n        return;\n    }\n    let prev = entry.prev;\n    let next = entry.next;\n    next && (next.prev = prev);\n    prev && (prev.next = next);\n    entry.prev = undefined;\n    // Insert into head position\n    lru.head = entry;\n    entry.next = head;\n    head.prev = entry;\n    // If the item we promoted was the tail, then set prev to tail.\n    if (entry === lru.tail) {\n        lru.tail = prev;\n    }\n}\n\nfunction splice(lru, entry) {\n    let prev = entry.prev;\n    let next = entry.next;\n    next && (next.prev = prev);\n    prev && (prev.next = next);\n    entry.prev = entry.next = undefined;\n    if (entry === lru.head) {\n        lru.head = next;\n    }\n    if (entry === lru.tail) {\n        lru.tail = prev;\n    }\n}\n"]}