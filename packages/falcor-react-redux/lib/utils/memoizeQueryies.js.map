{"version":3,"sources":["../../src/utils/memoizeQueryies.js"],"names":["memoizeQueryies","limit","count","map","lru","memoizedQuerySyntax","query","entry","undefined","tail","splice","paths","promote","head","prev","next"],"mappings":";;;;;kBAEwBA,e;;AAFxB;;;;;;AAEe,SAASA,eAAT,GAAsC;AAAA,QAAbC,KAAa,yDAAL,GAAK;;AACjD,QAAIC,QAAQ,CAAZ;AACA,QAAMC,MAAM,EAAZ;AACA,QAAMC,MAAM,EAAZ;AACA,WAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AACvC,YAAIC,QAAQJ,IAAIG,KAAJ,CAAZ;AACA,YAAIC,UAAUC,SAAd,EAAyB;AACrB,gBAAI,EAAEN,KAAF,GAAUD,KAAd,EAAqB;AACjB,uBAAOE,IAAIC,IAAIK,IAAJ,CAASH,KAAb,CAAP;AACAI,uBAAON,GAAP,EAAYA,IAAIK,IAAhB;AACH;AACDF,oBAAQJ,IAAIG,KAAJ,IAAa,EAAEA,YAAF,EAASK,OAAO,iCAAkBL,KAAlB,CAAhB,EAArB;AACH;AACDM,gBAAQR,GAAR,EAAaG,KAAb;AACA,eAAOA,MAAMI,KAAb;AACH,KAXD;AAYH;;AAED,SAASC,OAAT,CAAiBR,GAAjB,EAAsBG,KAAtB,EAA6B;AACzB,QAAIM,OAAOT,IAAIS,IAAf;AACA,QAAI,CAACA,IAAL,EAAW;AACPT,YAAIS,IAAJ,GAAWT,IAAIK,IAAJ,GAAWF,KAAtB;AACA;AACH,KAHD,MAIK,IAAIM,SAASN,KAAb,EAAoB;AACrB;AACH;AACD,QAAIO,OAAOP,MAAMO,IAAjB;AACA,QAAIC,OAAOR,MAAMQ,IAAjB;AACAA,aAASA,KAAKD,IAAL,GAAYA,IAArB;AACAA,aAASA,KAAKC,IAAL,GAAYA,IAArB;AACAR,UAAMO,IAAN,GAAaN,SAAb;AACA;AACAJ,QAAIS,IAAJ,GAAWN,KAAX;AACAA,UAAMQ,IAAN,GAAaF,IAAb;AACAA,SAAKC,IAAL,GAAYP,KAAZ;AACA;AACA,QAAIA,UAAUH,IAAIK,IAAlB,EAAwB;AACpBL,YAAIK,IAAJ,GAAWK,IAAX;AACH;AACJ;;AAED,SAASJ,MAAT,CAAgBN,GAAhB,EAAqBG,KAArB,EAA4B;AACxB,QAAIO,OAAOP,MAAMO,IAAjB;AACA,QAAIC,OAAOR,MAAMQ,IAAjB;AACAA,aAASA,KAAKD,IAAL,GAAYA,IAArB;AACAA,aAASA,KAAKC,IAAL,GAAYA,IAArB;AACAR,UAAMO,IAAN,GAAaP,MAAMQ,IAAN,GAAaP,SAA1B;AACA,QAAID,UAAUH,IAAIS,IAAlB,EAAwB;AACpBT,YAAIS,IAAJ,GAAWE,IAAX;AACH;AACD,QAAIR,UAAUH,IAAIK,IAAlB,EAAwB;AACpBL,YAAIK,IAAJ,GAAWK,IAAX;AACH;AACJ","file":"memoizeQueryies.js","sourcesContent":["import FalcorQuerySyntax from '@graphistry/falcor-query-syntax';\n\nexport default function memoizeQueryies(limit = 100) {\n    let count = 0;\n    const map = {};\n    const lru = {};\n    return function memoizedQuerySyntax(query) {\n        let entry = map[query];\n        if (entry === undefined) {\n            if (++count > limit) {\n                delete map[lru.tail.query];\n                splice(lru, lru.tail);\n            }\n            entry = map[query] = { query, paths: FalcorQuerySyntax(query) };\n        }\n        promote(lru, entry);\n        return entry.paths;\n    }\n}\n\nfunction promote(lru, entry) {\n    let head = lru.head;\n    if (!head) {\n        lru.head = lru.tail = entry;\n        return;\n    }\n    else if (head === entry) {\n        return;\n    }\n    let prev = entry.prev;\n    let next = entry.next;\n    next && (next.prev = prev);\n    prev && (prev.next = next);\n    entry.prev = undefined;\n    // Insert into head position\n    lru.head = entry;\n    entry.next = head;\n    head.prev = entry;\n    // If the item we promoted was the tail, then set prev to tail.\n    if (entry === lru.tail) {\n        lru.tail = prev;\n    }\n}\n\nfunction splice(lru, entry) {\n    let prev = entry.prev;\n    let next = entry.next;\n    next && (next.prev = prev);\n    prev && (prev.next = next);\n    entry.prev = entry.next = undefined;\n    if (entry === lru.head) {\n        lru.head = next;\n    }\n    if (entry === lru.tail) {\n        lru.tail = prev;\n    }\n}\n"]}