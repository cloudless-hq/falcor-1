{"version":3,"sources":["../../../src/components/__tests__/Provider-tests.js"],"names":["describe","Child","Component","contextTypes","childContextTypes","it","App","model","wrapper","expect","state","toBe","tree","renderIntoDocument","child","findRenderedComponentWithType","context","falcorModel"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AAEA;;;;AACA;;;;;;;;;;AAEAA,SAAS,UAAT,EAAqB,YAAM;AAAA,QAEjBC,KAFiB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,qCAIV;AAAE,uBAAO,0CAAP;AAAgB;AAJR;;AAAA;AAAA,MAEH,gBAAMC,SAFH;;AAEjBD,SAFiB,CAGZE,YAHY,GAGG,mBAASC,iBAHZ;;;AAOvBC,OAAG,gDAAH,EAAqD,YAAM;AAAA,wBAChC,0BADgC;AAAA,YAC/CC,GAD+C,aAC/CA,GAD+C;AAAA,YAC1CC,KAD0C,aAC1CA,KAD0C;;AAEvD,YAAMC,UAAU,mBACZ;AAAA;AAAA,cAAU,aAAaD,KAAvB;AACI,0CAAC,KAAD;AADJ,SADY,CAAhB;AAKAE,eAAOD,QAAQE,KAAR,CAAc,aAAd,CAAP,EAAqCC,IAArC,CAA0CJ,KAA1C;AACH,KARD;;AAUAF,OAAG,sDAAH,EAA2D,YAAM;AAAA,yBACtC,0BADsC;AAAA,YACrDC,GADqD,cACrDA,GADqD;AAAA,YAChDC,KADgD,cAChDA,KADgD;;AAE7D,YAAMK,OAAO,+BAAUC,kBAAV,CACT;AAAA;AAAA,cAAU,aAAaN,KAAvB;AACI,0CAAC,KAAD;AADJ,SADS,CAAb;AAKA,YAAMO,QAAQ,+BAAUC,6BAAV,CAAwCH,IAAxC,EAA8CX,KAA9C,CAAd;AACAQ,eAAOK,MAAME,OAAN,CAAcC,WAArB,EAAkCN,IAAlC,CAAuCJ,KAAvC;AACH,KATD;AAUH,CA3BD","file":"Provider-tests.js","sourcesContent":["import React from 'react';\nimport { mount } from 'enzyme';\nimport TestUtils from 'react-addons-test-utils';\n\nimport Provider from '../Provider';\nimport { testInit } from './test-init';\n\ndescribe('Provider', () => {\n\n    class Child extends React.Component {\n        static contextTypes = Provider.childContextTypes;\n        render() { return <div /> }\n    }\n\n    it('Should store the falcorModel in Provider state', () => {\n        const { App, model } = testInit();\n        const wrapper = mount(\n            <Provider falcorModel={model}>\n                <Child/>\n            </Provider>\n        );\n        expect(wrapper.state('falcorModel')).toBe(model);\n    });\n\n    it('Should make the falcorModel available in the context', () => {\n        const { App, model } = testInit();\n        const tree = TestUtils.renderIntoDocument(\n            <Provider falcorModel={model}>\n                <Child/>\n            </Provider>\n        )\n        const child = TestUtils.findRenderedComponentWithType(tree, Child)\n        expect(child.context.falcorModel).toBe(model);\n    });\n});\n\n"]}