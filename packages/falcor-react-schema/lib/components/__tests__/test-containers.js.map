{"version":3,"sources":["../../../src/components/__tests__/test-containers.js"],"names":["createTestContainers","App","AppView","Genre","GenreView","Title","TitleView","titleConfig","createTitleContainer","genreConfig","createGenreContainer","appConfig","createAppContainer","genres","map","genre","index","id","name","titles","title","rating","withTitleFragment","componentProps","withTitleSchema","QL","context","get","set","loadTitlesById","readTitlesById","readWriteTitlesRating","withGenreFragment","fragments","withGenreSchema","loadListsById","readListsById","withAppFragment","withAppSchema","loadGenres","readGenres","schema"],"mappings":"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","file":"test-containers.js","sourcesContent":["import React from 'react';\nimport withSchema from '../withSchema';\nimport withFragment from '../withFragment';\n\nexport function createTestContainers({\n    App = AppView, Genre = GenreView, Title = TitleView\n} = {}) {\n\n    const titleConfig = createTitleContainer({ Title });\n    const genreConfig = createGenreContainer({ Genre, ...titleConfig });\n    const appConfig = createAppContainer({ App, ...titleConfig, ...genreConfig });\n\n    App = appConfig.App;\n    Genre = genreConfig.Genre;\n    Title = titleConfig.Title;\n\n    return { ...appConfig, ...genreConfig, ...titleConfig };\n\n    function AppView({ genres = [] }) {\n        return (\n            <div>\n                <h1>Genres</h1>\n                <ul>\n                {genres.map((genre, index) => (\n                    <li key={`${index}: ${genre.id}`}>\n                        <Genre falcorData={genre}/>\n                    </li>\n                ))}\n                </ul>\n            </div>\n        );\n    }\n\n    function GenreView({ name, titles = [] }) {\n        return (\n            <div>\n                <h3>{name}</h3>\n                <ul>\n                {titles.map((title, index) => (\n                    <li key={`${index}: ${title.id}`}>\n                        <Title falcorData={title}/>\n                    </li>\n                ))}\n                </ul>\n            </div>\n        );\n    }\n\n    function TitleView({ id, name, rating }) {\n        return (\n            <div>\n                <h6>{name} - {rating}/100</h6>\n            </div>\n        );\n    }\n}\n\nfunction createTitleContainer({ Title = (() => null) } = {}) {\n\n    const withTitleFragment = withFragment(({ id, name, rating } = {}, componentProps) => {\n        return `{ id, name, rating }`;\n    });\n\n    const withTitleSchema = withSchema((QL, { get, set }, context) => {\n\n        const loadTitlesById = context.loadTitlesById;\n        const readTitlesById = { get: get(loadTitlesById) };\n        const readWriteTitlesRating = {\n            get: get(loadTitlesById),\n            set: set(loadTitlesById)\n        };\n\n        return QL`{\n            [id, name]: ${ readTitlesById },\n            rating: ${ readWriteTitlesRating }\n        }`\n    });\n\n    return { withTitleSchema, withTitleFragment, Title: withTitleSchema(withTitleFragment(Title)) };\n}\n\nfunction createGenreContainer({ Title, Genre = (() => null) } = {}) {\n\n    const withGenreFragment = withFragment(({ titles } = {}, componentProps) => {\n        return `{\n            id, titles: ${\n                Title.fragments(titles)\n            }\n        }`;\n    });\n\n    const withGenreSchema = withSchema((QL, { get, set }, context) => {\n\n        const loadListsById = context.loadListsById;\n        const readListsById = { get: get(loadListsById) };\n\n        return QL`{\n            id: ${ readListsById },\n            titles: {\n                length: ${ readListsById },\n                [{ integers: titleIndexes }]: ${\n                    readListsById\n                }\n            }\n        }`;\n    });\n\n    return { withGenreSchema, withGenreFragment, Genre: withGenreSchema(withGenreFragment(Genre)) };\n}\n\nfunction createAppContainer({ Genre, Title, App = (() => null) } = {}) {\n\n    const withAppFragment = withFragment(({ genres } = {}, componentProps) => {\n        return `{\n            genres: ${\n                Genre.fragments(genres)\n            }\n        }`;\n    });\n\n    const withAppSchema = withSchema((QL, { get, set }, context) => {\n        const loadGenres = context.loadGenres;\n        const readGenres = { get: get(loadGenres) };\n        return QL`{\n            genres: {\n                length: ${ readGenres },\n                [{ integers: listIndexes }]: ${\n                    readGenres\n                }\n            },\n            listsById: {\n                [{ keys: listIds }]: ${\n                    Genre.schema(context)\n                }\n            },\n            titlesById: {\n                [{ keys: titleIds }]: ${\n                    Title.schema(context)\n                }\n            }\n        }`;\n    });\n\n    return { withAppSchema, withAppFragment, App: withAppSchema(withAppFragment(App)) };\n}\n"]}