{"version":3,"sources":["../../../src/components/__tests__/test-services.js"],"names":["createTestServices","observable_from","observable_timer","operator_let","operator_mapTo","operator_toArray","operator_concatMap","operator_mergeMapTo","options","g","genres","listsById","id","name","titles","titlesById","abc","rating","def","ghi","loadGenres","from","let","letDelayEach","app","loadListsById","listIds","map","list","loadTitlesById","titleIds","title","index","source","batch","toArray","delay","concatMap","x","timer","mapTo","Array","isArray","mergeMapTo","mergeMap","i"],"mappings":";;;;;QAYgBA,kB,GAAAA,kB;;AAZhB;;AAEA;;IAAYC,e;;AACZ;;IAAYC,gB;;AACZ;;IAAYC,Y;;AACZ;;IAAYC,c;;AACZ;;IAAYC,gB;;AACZ;;IAAYC,kB;;AACZ;;IAAYC,mB;;AAEZ;;;;AAEO,SAASP,kBAAT,GAA0C;AAAA,QAAdQ,OAAc,uEAAJ,EAAI;;;AAE7C,QAAIC,IAAI;AACJC,gBAAQ,CACJ,4CADI,EAEJ,4CAFI,EAGJ,4CAHI,CADJ;AAMJC,mBAAW;AACP,iBAAK;AACDC,oBAAI,GADH;AAEDC,sBAAM,eAFL;AAGDC,wBAAQ,CACJ,iDADI;AAHP,aADE;AAQP,iBAAK;AACDF,oBAAI,GADH;AAEDC,sBAAM,YAFL;AAGDC,wBAAQ,CACJ,iDADI;AAHP,aARE;AAeP,iBAAK;AACDF,oBAAI,GADH;AAEDC,sBAAM,gCAFL;AAGDC,wBAAQ,CACJ,iDADI,EAEJ,iDAFI,EAGJ,iDAHI;AAHP;AAfE,SANP;AA+BJC,oBAAY;AACRC,iBAAK;AACDJ,oBAAI,KADH;AAEDK,wBAAQ,EAFP;AAGDJ,sBAAM;AAHL,aADG;AAMRK,iBAAK;AACDN,oBAAI,KADH;AAEDK,wBAAQ,EAFP;AAGDJ,sBAAM;AAHL,aANG;AAWRM,iBAAK;AACDP,oBAAI,KADH;AAEDK,wBAAQ,EAFP;AAGDJ,sBAAM;AAHL;AAXG;AA/BR,KAAR;;AAkDA,QAAMO,aAAa,SAAbA,UAAa,GAAM;AACrB,eAAO,uBACFC,IADE,CACG,CAACZ,CAAD,CADH,EAEFa,GAFE,CAEEC,aAAaf,QAAQgB,GAArB,CAFF,CAAP;AAGH,KAJD;AAKA,QAAMC,gBAAgB,SAAhBA,aAAgB,OAAiB;AAAA,YAAdC,OAAc,QAAdA,OAAc;;AACnC,eAAO,uBACFL,IADE,CACGK,QAAQC,GAAR,CAAY,UAACf,EAAD;AAAA,mBAAS;AACvBgB,sBAAMnB,EAAEE,SAAF,CAAYC,EAAZ;AADiB,aAAT;AAAA,SAAZ,CADH,EAIFU,GAJE,CAIEC,aAAaf,QAAQE,MAArB,CAJF,CAAP;AAKH,KAND;AAOA,QAAMmB,iBAAiB,SAAjBA,cAAiB,QAAkB;AAAA,YAAfC,QAAe,SAAfA,QAAe;;AACrC,eAAO,uBACFT,IADE,CACGS,SAASH,GAAT,CAAa,UAACf,EAAD;AAAA,mBAAS;AACxBmB,uBAAOtB,EAAEM,UAAF,CAAaH,EAAb;AADiB,aAAT;AAAA,SAAb,CADH,EAIFU,GAJE,CAIEC,aAAaf,QAAQM,MAArB,CAJF,CAAP;AAKH,KAND;;AAQA,WAAO;AACHM,8BADG;AAEHK,oCAFG;AAGHI;AAHG,KAAP;AAKH;;AAED,SAASN,YAAT,GAA2C;AAAA,QAArBf,OAAqB,uEAAX,EAAW;AAAA,QAAPwB,KAAO;;AACvC,WAAO,UAASC,MAAT,EAAiB;AACpB,YAAIzB,QAAQ0B,KAAR,KAAkB,IAAtB,EAA4B;AACxB,mBAAOD,OAAOE,OAAP,EAAP;AACH,SAFD,MAEO,IAAI,OAAO3B,QAAQ4B,KAAf,KAAyB,QAA7B,EAAuC;AAC1C,mBAAOH,OAAOI,SAAP,CAAiB,UAASC,CAAT,EAAY;AAChC,uBAAO,uBAAWC,KAAX,CAAiB/B,QAAQ4B,KAAzB,EAAgCI,KAAhC,CAAsCF,CAAtC,CAAP;AACH,aAFM,CAAP;AAGH,SAJM,MAIA,IAAIG,MAAMC,OAAN,CAAclC,QAAQ4B,KAAtB,CAAJ,EAAkC;AACrC,gBAAI,OAAOJ,KAAP,KAAiB,QAArB,EAA+B;AAC3B,uBAAO,uBAAWO,KAAX,CAAiB/B,QAAQ4B,KAAR,CAAcJ,KAAd,CAAjB,EAAuCW,UAAvC,CAAkDV,MAAlD,CAAP;AACH,aAFD,MAEO;AACH,uBAAOA,OAAOW,QAAP,CAAgB,UAASN,CAAT,EAAYO,CAAZ,EAAe;AAClC,2BAAO,uBAAWN,KAAX,CAAiB/B,QAAQ4B,KAAR,CAAcS,CAAd,CAAjB,EAAmCL,KAAnC,CAAyCF,CAAzC,CAAP;AACH,iBAFM,CAAP;AAGH;AACJ;AACD,eAAOL,MAAP;AACH,KAjBD;AAkBH","file":"test-services.js","sourcesContent":["import { Observable } from 'rxjs/Observable';\n\nimport * as observable_from from 'rxjs/add/observable/from';\nimport * as observable_timer from 'rxjs/add/observable/timer';\nimport * as operator_let from 'rxjs/add/operator/let';\nimport * as operator_mapTo from 'rxjs/add/operator/mapTo';\nimport * as operator_toArray from 'rxjs/add/operator/toArray';\nimport * as operator_concatMap from 'rxjs/add/operator/concatMap';\nimport * as operator_mergeMapTo from 'rxjs/add/operator/mergeMapTo';\n\nimport { $ref } from '@graphistry/falcor-json-graph';\n\nexport function createTestServices(options = {}) {\n\n    let g = {\n        genres: [\n            $ref(`listsById[123]`),\n            $ref(`listsById[456]`),\n            $ref(`listsById[789]`)\n        ],\n        listsById: {\n            123: {\n                id: 123,\n                name: 'Action flicks',\n                titles: [\n                    $ref(`titlesById['abc']`)\n                ]\n            },\n            456: {\n                id: 456,\n                name: 'Kid flicks',\n                titles: [\n                    $ref(`titlesById['def']`)\n                ]\n            },\n            789: {\n                id: 789,\n                name: 'Starring Arnold Schwarzenegger',\n                titles: [\n                    $ref(`titlesById['abc']`),\n                    $ref(`titlesById['def']`),\n                    $ref(`titlesById['ghi']`)\n                ]\n            }\n        },\n        titlesById: {\n            abc: {\n                id: 'abc',\n                rating: 25,\n                name: 'True Lies'\n            },\n            def: {\n                id: 'def',\n                rating: 15,\n                name: 'Kindergarten Cop'\n            },\n            ghi: {\n                id: 'ghi',\n                rating: 75,\n                name: 'The Terminator'\n            }\n        }\n    };\n\n    const loadGenres = () => {\n        return Observable\n            .from([g])\n            .let(letDelayEach(options.app));\n    }\n    const loadListsById = ({ listIds }) => {\n        return Observable\n            .from(listIds.map((id) => ({\n                list: g.listsById[id]\n            })))\n            .let(letDelayEach(options.genres));\n    }\n    const loadTitlesById = ({ titleIds }) => {\n        return Observable\n            .from(titleIds.map((id) => ({\n                title: g.titlesById[id]\n            })))\n            .let(letDelayEach(options.titles));\n    }\n\n    return {\n        loadGenres,\n        loadListsById,\n        loadTitlesById\n    };\n}\n\nfunction letDelayEach(options = {}, index) {\n    return function(source) {\n        if (options.batch === true) {\n            return source.toArray();\n        } else if (typeof options.delay === 'number') {\n            return source.concatMap(function(x) {\n                return Observable.timer(options.delay).mapTo(x);\n            });\n        } else if (Array.isArray(options.delay)) {\n            if (typeof index === 'number') {\n                return Observable.timer(options.delay[index]).mergeMapTo(source);\n            } else {\n                return source.mergeMap(function(x, i) {\n                    return Observable.timer(options.delay[i]).mapTo(x);\n                });\n            }\n        }\n        return source;\n    }\n}\n"]}