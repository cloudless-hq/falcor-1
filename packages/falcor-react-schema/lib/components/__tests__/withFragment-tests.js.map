{"version":3,"sources":["../../../src/components/__tests__/withFragment-tests.js"],"names":["describe","it","App","model","load","do","x","expect","data","toMatchSnapshot","toPromise","renderLoading","create","unbatch","toJSON"],"mappings":";;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AAEAA,SAAS,cAAT,EAAyB,YAAM;;AAE3BC,OAAG,2CAAH,EAAgD,YAAM;AAAA,wBAC3B,0BAD2B;AAAA,YAC1CC,GAD0C,aAC1CA,GAD0C;AAAA,YACrCC,KADqC,aACrCA,KADqC;;AAElD,eAAOD,IACFE,IADE,CACG,EAAED,YAAF,EADH,EAEFE,EAFE,CAEC,UAACC,CAAD;AAAA,mBAAOC,OAAOD,EAAEE,IAAT,EAAeC,eAAf,EAAP;AAAA,SAFD,EAGFC,SAHE,EAAP;AAIH,KAND;;AAQAT,OAAG,mGAAH,EAAwG,YAAM;AAAA,yBACnF,0BADmF;AAAA,YAClGC,GADkG,cAClGA,GADkG;AAAA,YAC7FC,KAD6F,cAC7FA,KAD6F;;AAE1G,eAAOD,IACFE,IADE,CACG,EAAED,YAAF,EAASQ,eAAe,IAAxB,EADH,EAEFN,EAFE,CAEC,UAACC,CAAD;AAAA,mBAAOC,OAAOD,EAAEE,IAAT,EAAeC,eAAf,EAAP;AAAA,SAFD,EAGFC,SAHE,EAAP;AAIH,KAND;;AAQAT,OAAG,wDAAH,EAA6D,YAAM;AAAA,yBACxC,0BADwC;AAAA,YACvDC,GADuD,cACvDA,GADuD;AAAA,YAClDC,KADkD,cAClDA,KADkD;;AAE/DI,eAAO,4BAASK,MAAT,CACH;AAAA;AAAA,cAAU,aAAaT,MAAMU,OAAN,EAAvB;AACI,0CAAC,GAAD;AADJ,SADG,EAILC,MAJK,EAAP,EAIYL,eAJZ;AAKH,KAPD;AAQH,CA1BD","file":"withFragment-tests.js","sourcesContent":["import React from 'react';\nimport renderer from 'react-test-renderer';\n\nimport Provider from '../Provider';\nimport { testInit } from './test-init';\n\ndescribe('withFragment', () => {\n\n    it('should fetch all the data for a container', () => {\n        const { App, model } = testInit();\n        return App\n            .load({ model })\n            .do((x) => expect(x.data).toMatchSnapshot())\n            .toPromise();\n    });\n\n    it('should fetch all the data for a container and emit intermediate states when renderLoading is true', () => {\n        const { App, model } = testInit();\n        return App\n            .load({ model, renderLoading: true })\n            .do((x) => expect(x.data).toMatchSnapshot())\n            .toPromise();\n    });\n\n    it('Should render the full component tree without batching', () => {\n        const { App, model } = testInit();\n        expect(renderer.create(\n            <Provider falcorModel={model.unbatch()}>\n                <App/>\n            </Provider>\n        ).toJSON()).toMatchSnapshot();\n    });\n});\n"]}