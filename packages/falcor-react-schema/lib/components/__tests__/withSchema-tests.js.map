{"version":3,"sources":["../../../src/components/__tests__/withSchema-tests.js"],"names":["describe","getTests","setTests","it","App","schema","router","Router","toArray","get","do","x","expect","toMatchSnapshot","toPromise","set","paths","jsonGraph","genres","titles","rating","name"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AAEAA,SAAS,YAAT,EAAuB,YAAM;AACzBA,aAAS,KAAT,EAAgBC,QAAhB;AACAD,aAAS,KAAT,EAAgBE,QAAhB;AACH,CAHD;;AAKA,SAASD,QAAT,GAAoB;;AAEhBE,OAAG,mDAAH,EAAwD,YAAM;AAAA,oCAE1C,2CAF0C;AAAA,YAElDC,GAFkD,yBAElDA,GAFkD;;AAG1D,YAAMC,SAASD,IAAIC,MAAJ,CAAW,uCAAX,CAAf;AACA,YAAMC,SAAS,IAAIC,sBAAJ,CAAWF,OAAOG,OAAP,EAAX,CAAf;;AAEA,eAAOF,OAAOG,GAAP,CAAW,CACd,CAAC,QAAD,EAAW,QAAX,CADc,EAEd,CAAC,QAAD,EAAW,CAAX,EAAc,QAAd,EAAwB,CAAxB,EAA2B,MAA3B,CAFc,CAAX,EAINC,EAJM,CAIH,UAACC,CAAD;AAAA,mBAAOC,OAAOD,CAAP,EAAUE,eAAV,EAAP;AAAA,SAJG,EAKNC,SALM,EAAP;AAMH,KAZD;AAaH;;AAED,SAASZ,QAAT,GAAoB;;AAEhBC,OAAG,gDAAH,EAAqD,YAAM;AAAA,qCAEvC,2CAFuC;AAAA,YAE/CC,GAF+C,0BAE/CA,GAF+C;;AAGvD,YAAMC,SAASD,IAAIC,MAAJ,CAAW,uCAAX,CAAf;AACA,YAAMC,SAAS,IAAIC,sBAAJ,CAAWF,MAAX,CAAf;;AAEA,eAAOC,OAAOS,GAAP,CAAW;AACdC,mBAAO,CACH,CAAC,QAAD,EAAW,CAAC,CAAD,EAAI,CAAJ,CAAX,EAAmB,QAAnB,EAA6B,CAA7B,EAAgC,CAAC,MAAD,EAAS,QAAT,CAAhC,CADG,CADO;AAIdC,uBAAW;AACPC,wBAAQ;AACJ,uBAAG;AACCC,gCAAQ;AACJ,+BAAG;AACCC,wCAAQ,EADT;AAECC,sCAAM;AAFP;AADC;AADT,qBADC;AASJ,uBAAG;AACCF,gCAAQ;AACJ,+BAAG;AACCC,wCAAQ,EADT;AAECC,sCAAM;AAFP;AADC;AADT;AATC;AADD;AAJG,SAAX,EAyBNX,EAzBM,CAyBH,UAACC,CAAD;AAAA,mBAAOC,OAAOD,CAAP,EAAUE,eAAV,EAAP;AAAA,SAzBG,EA0BNC,SA1BM,EAAP;AA2BH,KAjCD;AAkCH","file":"withSchema-tests.js","sourcesContent":["import Router from '@graphistry/falcor-router';\nimport { createTestServices } from './test-services';\nimport { createTestContainers } from './test-containers';\n\ndescribe('withSchema', () => {\n    describe('get', getTests);\n    describe('set', setTests);\n});\n\nfunction getTests() {\n\n    it('should traverse the JSON tree and return the data', () => {\n\n        const { App } = createTestContainers();\n        const schema = App.schema(createTestServices());\n        const router = new Router(schema.toArray());\n\n        return router.get([\n            ['genres', 'length'],\n            ['genres', 0, 'titles', 0, 'name']\n        ])\n        .do((x) => expect(x).toMatchSnapshot())\n        .toPromise();\n    });\n}\n\nfunction setTests() {\n\n    it('should traverse the JSON tree and set the data', () => {\n\n        const { App } = createTestContainers();\n        const schema = App.schema(createTestServices());\n        const router = new Router(schema);\n\n        return router.set({\n            paths: [\n                ['genres', [0, 1], 'titles', 0, ['name', 'rating']]\n            ],\n            jsonGraph: {\n                genres: {\n                    0: {\n                        titles: {\n                            0: {\n                                rating: 75,\n                                name: 'Total Recall'\n                            }\n                        }\n                    },\n                    1: {\n                        titles: {\n                            0: {\n                                rating: 50,\n                                name: 'Independence Day'\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .do((x) => expect(x).toMatchSnapshot())\n        .toPromise();\n    });\n}\n"]}