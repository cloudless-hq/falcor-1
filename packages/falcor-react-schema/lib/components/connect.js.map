{"version":3,"sources":["../../src/components/connect.js"],"names":["connect","BaseComponent","scheduler","compose","mapPropsToDistinctChanges","innerMapPropsToDistinctChanges","prop$","switchMap","mapPropsToChanges","mapChangeToProps","distinctUntilChanged","getModelVersion","auditTime","props","model","changes","getVersion","prototype","_root","onChange","call","next"],"mappings":";;;;;;;;;;;AAOA;;kBAWwBA,O;;AAlBxB;;;;AACA;;;;AAEA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AAEA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,OAAT,CAAiBC,aAAjB,EAA4D;AAAA,QAA5BC,SAA4B;;AACvE,WAAO,4BAAaC,QAChB,8BAAe,+BAAgBF,aAAhB,EAA+B,SAA/B,CAAf,CADgB,EAEhB,8BAAeG,0BAA0BF,SAA1B,CAAf,CAFgB,CAAb,EAGJD,aAHI,CAAP;AAIH;;AAED,SAASG,yBAAT,CAAmCF,SAAnC,EAA8C;AAC1C,WAAO,SAASG,8BAAT,CAAwCC,KAAxC,EAA+C;AAClD,eAAOA,MAAMC,SAAN,CACHC,iBADG,EACgBC,gBADhB,EAGNC,oBAHM,CAGe,IAHf,EAGqBC,eAHrB,EAINC,SAJM,CAII,CAJJ,EAIOV,SAJP,CAAP;AAKH,KAND;AAOH;;AAED,SAASM,iBAAT,CAA2BK,KAA3B,EAAkC;AAC9B,QAAMC,QAAQD,MAAM,cAAN,CAAd;AACA,6BAAUC,KAAV;AACA,WAAOA,MAAMC,OAAN,EAAP;AACH;;AAED,SAASN,gBAAT,CAA0BI,KAA1B,EAAiCC,KAAjC,EAAwC;AACpC,wBAAYD,KAAZ,IAAmB,gBAAgBC,KAAnC;AACH;;AAED,SAASH,eAAT,CAAyBE,KAAzB,EAAgC;AAC5B,WAAOA,MAAM,cAAN,EAAsBG,UAAtB,EAAP;AACH;;AAED,IAAI,CAAC,cAAMC,SAAN,CAAgBF,OAArB,EAA8B;AAC1B,kBAAME,SAAN,CAAgBF,OAAhB,GAA0B,YAAW;AAAA;;AAAA,YACzBG,KADyB,GACf,IADe,CACzBA,KADyB;AAAA,YAE3BH,OAF2B,GAEfG,KAFe,CAE3BH,OAF2B;;AAGjC,YAAI,CAACA,OAAL,EAAc;AAAA;AACVA,0BAAUG,MAAMH,OAAN,GAAgB,2CAA1B;AADU,oBAEFI,QAFE,GAEWD,KAFX,CAEFC,QAFE;;AAGVD,sBAAMC,QAAN,GAAiB,YAAM;AACnB,wBAAIA,QAAJ,EAAc;AACVA,iCAASC,IAAT;AACH;AACDL,4BAAQM,IAAR;AACH,iBALD;AAHU;AASb;AACD,eAAON,OAAP;AACH,KAdD;AAeH","file":"connect.js","sourcesContent":["import invariant from 'invariant';\nimport React, { PropTypes, Children } from 'react';\n\nimport { Model } from '@graphistry/falcor';\nimport { Observable } from 'rxjs/Observable';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { animationFrame } from 'rxjs/scheduler/animationFrame';\n// import { asap as asapScheduler } from 'rxjs/scheduler/asap';\n\nimport 'rxjs/add/operator/auditTime';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/distinctUntilKeyChanged';\n\nimport hoistStatics from 'recompose/hoistStatics';\nimport mapPropsStream from 'recompose/mapPropsStream';\nimport setDisplayName from 'recompose/setDisplayName';\nimport wrapDisplayName from 'recompose/wrapDisplayName';\n\nexport default function connect(BaseComponent, scheduler = animationFrame) {\n    return hoistStatics(compose(\n        setDisplayName(wrapDisplayName(BaseComponent, 'Connect')),\n        mapPropsStream(mapPropsToDistinctChanges(scheduler))\n    ))(BaseComponent);\n}\n\nfunction mapPropsToDistinctChanges(scheduler) {\n    return function innerMapPropsToDistinctChanges(prop$) {\n        return prop$.switchMap(\n            mapPropsToChanges, mapChangeToProps\n        )\n        .distinctUntilChanged(null, getModelVersion)\n        .auditTime(0, scheduler);\n    }\n}\n\nfunction mapPropsToChanges(props) {\n    const model = props['falcor-model'];\n    invariant(model, `The top level \"connect\" container requires a root falcor model.`);\n    return model.changes();\n}\n\nfunction mapChangeToProps(props, model) {\n    return { ...props, 'falcor-model': model };\n}\n\nfunction getModelVersion(props) {\n    return props['falcor-model'].getVersion();\n}\n\nif (!Model.prototype.changes) {\n    Model.prototype.changes = function() {\n        const { _root } = this;\n        let { changes } = _root;\n        if (!changes) {\n            changes = _root.changes = new BehaviorSubject(this);\n            const { onChange } = _root;\n            _root.onChange = () => {\n                if (onChange) {\n                    onChange.call(this);\n                }\n                changes.next(this);\n            }\n        }\n        return changes;\n    }\n}\n"]}