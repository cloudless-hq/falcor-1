{"version":3,"sources":["../../src/falcor/get.js"],"names":["get","isArray","Array","slice","prototype","concat","route","displayName","options","service","defaultService","getInitialState","defaultGetInitialState","pathTemplate","getHandler","requestedPathSet","context","index","lastNamedIndex","count","length","ids","idsIndex","call","suffix","loaded","reduce","source","keys","mergeMap","rest","keysetToKeysList","key","defer","map","expandValues","innerExpandValues","vals","path","value","pathId","valsId","x","name","listIndex","list","id","undefined","$type","mergeMapArray","rangeEnd","to","rangeStart","from","xs","fn","ix","push","apply","routerInstance","request","query","requestedIds","empty"],"mappings":"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","file":"get.js","sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/observable/defer';\nimport 'rxjs/add/observable/empty';\nimport extractPathTemplateFromRoute from './extractPathTemplateFromRoute';\n\nconst isArray = Array.isArray;\nconst slice = Array.prototype.slice;\nconst concat = Array.prototype.concat;\n\nexport default function get(route, displayName, options = {}) {\n\n    if (typeof options === 'function') {\n        options = { service: options };\n    }\n\n    const service = options.service || defaultService;\n    const getInitialState = options.getInitialState || defaultGetInitialState;\n    const pathTemplate = extractPathTemplateFromRoute(route, options);\n\n    return function getHandler(requestedPathSet) {\n\n        const context = { ...getInitialState(this) };\n\n        let index = -1,\n            lastNamedIndex = 0,\n            count = pathTemplate.length;\n\n        while (++index < count) {\n            const { ids, idsIndex } = pathTemplate[index];\n            lastNamedIndex = idsIndex + 1;\n            context[ids] = concat.call([],\n                requestedPathSet[idsIndex]\n            );\n        }\n\n        const suffix = slice.call(requestedPathSet, lastNamedIndex);\n        const loaded = suffix.reduce((source, keys, index) => source.mergeMap(\n                ({ context, rest }) => keysetToKeysList(keys),\n                ({ context, rest }, key) => ({\n                    context, rest: {\n                        ...rest,\n                        [index]: key,\n                        length: index + 1\n                    }\n                })\n            ),\n            Observable\n                .defer(() => service(context, suffix))\n                .map((context) => ({ context, rest: { length: 0 } }))\n        );\n\n        return loaded.mergeMap(expandValues(pathTemplate));\n    }\n}\n\nfunction expandValues(pathTemplate) {\n\n    return function innerExpandValues({ context, rest }) {\n\n        context = context || {};\n\n        const vals = [], path = [];\n        let key, index = -1,\n            value = context,\n            pathId = -1, valsId = -1,\n            count = pathTemplate.length;\n\n        while (++index < count) {\n            const x = pathTemplate[index];\n            value = context[x.name];\n            path[x.listIndex] = x.list;\n            path[pathId = x.idsIndex] = value.id;\n        }\n\n        index = 0;\n        count = rest.length;\n\n        do {\n            if (index === count) {\n                vals[++valsId] = { value, path };\n                break;\n            } else if (value === undefined) {\n                break;\n            } else if (!value || 'object' !== typeof value || value.$type) {\n                vals[++valsId] = { value, path };\n                break;\n            }\n            key = rest[index];\n            value = value[key];\n            path[++pathId] = key;\n        } while (++index <= count);\n\n        return vals;\n    }\n}\n\nfunction keysetToKeysList(keys) {\n    if (!keys || 'object' !== typeof keys) {\n        return [keys];\n    } else if (isArray(keys)) {\n        return mergeMapArray(keys, keysetToKeysList);\n    }\n    let rangeEnd = keys.to;\n    let rangeStart = keys.from || 0;\n    if ('number' !== typeof rangeEnd) {\n        rangeEnd = rangeStart + (keys.length || 0) - 1;\n    }\n    return Array.from(\n        { length: 1 + (rangeEnd - rangeStart) },\n        (x, index) => index + rangeStart\n    );\n}\n\nfunction mergeMapArray(xs, fn) {\n    let ix = -1;\n    const list = [];\n    const { length } = xs;\n    while (++ix < length) {\n        list.push.apply(list, fn(xs[ix]));\n    }\n    return list;\n}\n\nfunction defaultGetInitialState(routerInstance) {\n    const { request  = {} } = routerInstance;\n    const { query = {} } = request;\n    return query;\n}\n\nfunction defaultService(requestedIds) {\n    return Observable.empty();\n}\n"]}