{"version":3,"sources":["../../src/falcor/set.js"],"names":["set","isArray","Array","slice","prototype","route","displayName","options","mapValue","service","defaultService","getInitialState","defaultGetInitialState","pathTemplate","setHandler","incomingJSON","context","getListIds","values","defer","mergeMap","expandAndMapValues","depth","json","$type","length","keyIdx","x","node","list","keys","ids","key","valueKeys","innerExpandValues","path","pathId","value","index","count","name","listIndex","idsIndex","id","from","expandValues","mapEachValue","expansionState","mergeMapArray","nextExpansionState","hasOwnProperty","defaultValueMapper","unboxRefs","unboxAtoms","unboxErrors","unboxTypes","ref","atom","error","innerMapJSONValues","call","subscribe","xs","fn","ix","push","apply","routerInstance","request","query","of","requestedIds","empty"],"mappings":"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","file":"set.js","sourcesContent":["import { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/observable/defer';\nimport 'rxjs/add/observable/empty';\nimport extractPathTemplateFromRoute from './extractPathTemplateFromRoute';\n\nconst isArray = Array.isArray;\nconst slice = Array.prototype.slice;\n\nexport default function set(route, displayName, options = {}, mapValue) {\n\n    if (typeof options === 'function') {\n        options = { service: options };\n    }\n\n    if (!options.mapValue && 'function' === typeof mapValue) {\n        options.mapValue = mapValue;\n    }\n\n    const service = options.service || defaultService;\n    const getInitialState = options.getInitialState || defaultGetInitialState;\n    const pathTemplate = extractPathTemplateFromRoute(route, options);\n\n    return function setHandler(incomingJSON) {\n\n        const context = getListIds(\n            { ...getInitialState(this) }, pathTemplate, 0, incomingJSON);\n\n        const values = Observable\n            .defer(() => service(context))\n            .mergeMap(expandAndMapValues(incomingJSON, pathTemplate, options));\n\n        return values;\n    }\n}\n\nfunction getListIds(context, pathTemplate, depth, json) {\n\n    if (!json || json.$type ||\n        depth === pathTemplate.length ||\n        'object' !== typeof json) {\n        return context;\n    } else {\n\n        let keyIdx = -1;\n        const x = pathTemplate[depth];\n        const node = json[x.list];\n        const keys = context[x.ids] || (context[x.ids] = []);\n\n        for (const key in node) {\n            getListIds(context, pathTemplate, depth + 1, node[keys[++keyIdx] = key]);\n        }\n    }\n\n    return context;\n}\n\nfunction expandAndMapValues(incomingJSON, pathTemplate, options = {}) {\n\n    const { valueKeys = {} } = options;\n\n    return function innerExpandValues(context) {\n\n        debugger\n\n        const path = [];\n\n        let json = incomingJSON, pathId = -1, value,\n            index = -1, count = pathTemplate.length;\n\n        while (++index < count) {\n            const x = pathTemplate[index];\n            value = context[x.name];\n            json = json[path[x.listIndex] = x.list];\n            json = json[path[pathId = x.idsIndex] = value.id];\n        }\n\n        return Observable\n            .from(expandValues(json, pathId + 1, { path }, valueKeys))\n            .mergeMap(mapEachValue(context, pathTemplate, options));\n    }\n}\n\nfunction expandValues(json, index, expansionState, valueKeys = {}) {\n\n    if (!json || 'object' !== typeof json || json.$type) {\n        return [expansionState];\n    }\n\n    const length = index + 1;\n    const { path } = expansionState;\n\n    return mergeMapArray(Object.keys(json), (key) => {\n        const nextExpansionState = {\n            value: json[key],\n            path: { ...path, [index]: key, length }\n        };\n        if (valueKeys.hasOwnProperty(key)) {\n            return [nextExpansionState];\n        }\n        return expandValues(json[key], length,\n                            nextExpansionState, valueKeys);\n    });\n}\n\nfunction mapEachValue(context, pathTemplate, options) {\n\n    const mapValue = options.mapValue || defaultValueMapper;\n    const { unboxRefs = false, unboxAtoms = true, unboxErrors = true } = options;\n    const unboxTypes = { ref: unboxRefs, atom: unboxAtoms, error: unboxErrors };\n\n    return function innerMapJSONValues({ path, value }) {\n\n        path = slice.call(path);\n\n        const count = path.length;\n        let { idsIndex: index, name } =\n            pathTemplate[pathTemplate.length - 1];\n\n        let key, node = context[name] || context;\n\n        do {\n\n            key = path[index];\n\n            if (index < count - 1) {\n                node = node[key] || (node[key] = {});\n                continue;\n            }\n\n            if (!(!value || 'object' !== typeof value)) {\n                value = unboxTypes[value.$type] ? value.value : value;\n            }\n\n            value = mapValue(node, key, value, path, context);\n        } while (++index < count);\n\n        if (!value || typeof value !== 'object') {\n            value = [{ path, value }];\n        } else if (!isArray(value) && 'function' !== typeof value.subscribe) {\n            if (!value.path) {\n                value = { path, value };\n            }\n            value = [value];\n        }\n        return value;\n    }\n}\n\nfunction mergeMapArray(xs, fn) {\n    let ix = -1;\n    const list = [];\n    const { length } = xs;\n    while (++ix < length) {\n        list.push.apply(list, fn(xs[ix]));\n    }\n    return list;\n}\n\nfunction defaultGetInitialState(routerInstance) {\n    const { request  = {} } = routerInstance;\n    const { query = {} } = request;\n    return query;\n}\n\nfunction defaultValueMapper(node, key, value, path, context) {\n    return Observable.of({ path, value: node[key] = value });\n}\n\nfunction defaultService(requestedIds) {\n    return Observable.empty();\n}\n"]}