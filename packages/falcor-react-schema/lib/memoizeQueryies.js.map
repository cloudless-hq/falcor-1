{"version":3,"sources":["../src/memoizeQueryies.js"],"names":["memoizeQueryies","limit","count","map","lru","memoizedQuerySyntax","query","entry","undefined","tail","splice","error","result","toPaths","Parser","ast","promote","head","prev","next"],"mappings":";;;;;;;;;;;;kBAMwBA,e;;AANxB;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEe,SAASA,eAAT,GAAsC;AAAA,QAAbC,KAAa,uEAAL,GAAK;;AACjD,QAAIC,QAAQ,CAAZ;AAAA,QAAeC,MAAM,EAArB;AAAA,QAAyBC,MAAM,EAA/B;AACA,WAAO,SAASC,mBAAT,CAA6BC,KAA7B,EAAoC;AACvC,YAAIC,QAAQJ,IAAIG,KAAJ,CAAZ;AACA,YAAIC,UAAUC,SAAV,IAAuB,EAAEN,KAAF,GAAUD,KAArC,EAA4C;AACxC,mBAAOE,IAAIC,IAAIK,IAAJ,CAASH,KAAb,CAAP;AACAI,mBAAON,GAAP,EAAYA,IAAIK,IAAhB;AACH;AACD,YAAI,CAACF,KAAD,IAAU,CAACA,MAAMI,KAArB,EAA4B;AACxB,gBAAMC,SAAS,sBAAeC,kBAAQC,MAAvB,EAA+BR,KAA/B,CAAf;AACA,gBAAI,CAACM,OAAOD,KAAZ,EAAmB;AACf;AACA;AACAC,uBAAOG,GAAP,GAAa,qCACT,4BAAa,iCAAkBH,OAAOG,GAAzB,CAAb,CADS,CAAb;AAEH;AACDR,oBAAQJ,IAAIG,KAAJ,eAAeA,YAAf,IAAyBM,MAAzB,CAAR;AACAI,oBAAQZ,GAAR,EAAaG,KAAb;AACH;AACD,eAAOA,KAAP;AACH,KAlBD;AAmBH;;AAED,SAASS,OAAT,CAAiBZ,GAAjB,EAAsBG,KAAtB,EAA6B;AACzB,QAAIU,OAAOb,IAAIa,IAAf;AACA,QAAI,CAACA,IAAL,EAAW;AACPb,YAAIa,IAAJ,GAAWb,IAAIK,IAAJ,GAAWF,KAAtB;AACA;AACH,KAHD,MAIK,IAAIU,SAASV,KAAb,EAAoB;AACrB;AACH;AACD,QAAIW,OAAOX,MAAMW,IAAjB;AACA,QAAIC,OAAOZ,MAAMY,IAAjB;AACAA,aAASA,KAAKD,IAAL,GAAYA,IAArB;AACAA,aAASA,KAAKC,IAAL,GAAYA,IAArB;AACAZ,UAAMW,IAAN,GAAaV,SAAb;AACA;AACAJ,QAAIa,IAAJ,GAAWV,KAAX;AACAA,UAAMY,IAAN,GAAaF,IAAb;AACAA,SAAKC,IAAL,GAAYX,KAAZ;AACA;AACA,QAAIA,UAAUH,IAAIK,IAAlB,EAAwB;AACpBL,YAAIK,IAAJ,GAAWS,IAAX;AACH;AACJ;;AAED,SAASR,MAAT,CAAgBN,GAAhB,EAAqBG,KAArB,EAA4B;AACxB,QAAIW,OAAOX,MAAMW,IAAjB;AACA,QAAIC,OAAOZ,MAAMY,IAAjB;AACAA,aAASA,KAAKD,IAAL,GAAYA,IAArB;AACAA,aAASA,KAAKC,IAAL,GAAYA,IAArB;AACAZ,UAAMW,IAAN,GAAaX,MAAMY,IAAN,GAAaX,SAA1B;AACA,QAAID,UAAUH,IAAIa,IAAlB,EAAwB;AACpBb,YAAIa,IAAJ,GAAWE,IAAX;AACH;AACD,QAAIZ,UAAUH,IAAIK,IAAlB,EAAwB;AACpBL,YAAIK,IAAJ,GAAWS,IAAX;AACH;AACJ","file":"memoizeQueryies.js","sourcesContent":["import { parse as pegJSParseUtil } from 'pegjs-util';\nimport toPaths from '@graphistry/falcor-query-syntax/lib/toPaths';\nimport toFlatBuffer from '@graphistry/falcor-path-utils/lib/toFlatBuffer';\nimport flatBufferToPaths from '@graphistry/falcor-path-utils/lib/flatBufferToPaths';\nimport computeFlatBufferHash from '@graphistry/falcor-path-utils/lib/computeFlatBufferHash';\n\nexport default function memoizeQueryies(limit = 100) {\n    let count = 0, map = {}, lru = {};\n    return function memoizedQuerySyntax(query) {\n        let entry = map[query];\n        if (entry === undefined && ++count > limit) {\n            delete map[lru.tail.query];\n            splice(lru, lru.tail);\n        }\n        if (!entry || !entry.error) {\n            const result = pegJSParseUtil(toPaths.Parser, query);\n            if (!result.error) {\n                // Turn the computed AST into paths, then turn it back into an\n                // AST so we collapse adjacent nodes.\n                result.ast = computeFlatBufferHash(\n                    toFlatBuffer(flatBufferToPaths(result.ast)));\n            }\n            entry = map[query] = { query, ...result };\n            promote(lru, entry);\n        }\n        return entry;\n    }\n}\n\nfunction promote(lru, entry) {\n    let head = lru.head;\n    if (!head) {\n        lru.head = lru.tail = entry;\n        return;\n    }\n    else if (head === entry) {\n        return;\n    }\n    let prev = entry.prev;\n    let next = entry.next;\n    next && (next.prev = prev);\n    prev && (prev.next = next);\n    entry.prev = undefined;\n    // Insert into head position\n    lru.head = entry;\n    entry.next = head;\n    head.prev = entry;\n    // If the item we promoted was the tail, then set prev to tail.\n    if (entry === lru.tail) {\n        lru.tail = prev;\n    }\n}\n\nfunction splice(lru, entry) {\n    let prev = entry.prev;\n    let next = entry.next;\n    next && (next.prev = prev);\n    prev && (prev.next = next);\n    entry.prev = entry.next = undefined;\n    if (entry === lru.head) {\n        lru.head = next;\n    }\n    if (entry === lru.tail) {\n        lru.tail = prev;\n    }\n}\n"]}