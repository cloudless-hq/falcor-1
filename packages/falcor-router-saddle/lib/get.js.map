{"version":3,"sources":["../src/get.js"],"names":["get","typeofNumber","typeofObject","isArray","Array","slice","prototype","defaultPropsResolver","routerInstance","request","query","defaultLoader","requestedIds","empty","options","lists","loader","getInitialProps","getHandler","requestedPathSet","context","listName","index","count","length","concat","suffix","call","loaded","reduce","source","keys","mergeMap","rest","keysetToKeysList","key","defer","map","expandValues","innerExpandValues","vals","path","pathId","valsId","value","id","undefined","$type","mergeMapArray","rangeEnd","to","rangeStart","from","x","xs","fn","ix","list","push","apply"],"mappings":"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","file":"get.js","sourcesContent":["const typeofNumber = 'number';\nconst typeofObject = 'object';\nconst isArray = Array.isArray;\nconst slice = Array.prototype.slice;\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/observable/defer';\nimport 'rxjs/add/observable/empty';\n\nfunction defaultPropsResolver(routerInstance) {\n    const { request  = {} } = routerInstance;\n    const { query = {} } = request;\n    return query;\n}\n\nfunction defaultLoader(requestedIds) {\n    return Observable.empty();\n}\n\nexport function get(options = {}) {\n\n    const lists = options.lists || [];\n    const loader = options.loader || defaultLoader;\n    const getInitialProps = options.getInitialProps || defaultPropsResolver;\n\n    return function getHandler(requestedPathSet) {\n\n        const context = { ...getInitialProps(this) };\n\n        let listName, index = -1, count = lists.length;\n\n        while (++index < count) {\n            listName = lists[index];\n            context[`${listName}Ids`] = [].concat(\n                requestedPathSet[1 + (index * 2)]\n            );\n        }\n\n        const suffix = slice.call(requestedPathSet, count * 2);\n        const loaded = suffix.reduce((source, keys, index) => source.mergeMap(\n                ({ context, rest }) => keysetToKeysList(keys),\n                ({ context, rest }, key) => ({\n                    context, rest: {\n                        ...rest,\n                        [index]: key,\n                        length: index + 1\n                    }\n                })\n            ),\n            Observable\n                .defer(() => loader(context, suffix))\n                .map((context) => ({ context, rest: { length: 0 } }))\n        );\n\n        return loaded.mergeMap(expandValues(lists));\n    }\n}\n\nfunction expandValues(lists) {\n\n    return function innerExpandValues({ context, rest }) {\n\n        context = context || {};\n\n        const vals = [], path = [];\n        let key, pathId = -1, valsId = -1,\n            index = -1, count = lists.length,\n            value = context[lists[count - 1]] || context;\n\n        while (++index < count) {\n            key = lists[index];\n            path[++pathId] = `${key}sById`;\n            path[++pathId] = context[key].id;\n        }\n\n        index = 0;\n        count = rest.length;\n\n        do {\n            if (index === count) {\n                vals[++valsId] = { value, path };\n                break;\n            } else if (value === undefined) {\n                break;\n            } else if (!value || typeofObject !== typeof value || value.$type) {\n                vals[++valsId] = { value, path };\n                break;\n            }\n            key = rest[index];\n            value = value[key];\n            path[++pathId] = key;\n        } while (++index <= count);\n\n        return vals;\n    }\n}\n\nfunction keysetToKeysList(keys) {\n    if (!keys || typeofObject !== typeof keys) {\n        return [keys];\n    } else if (isArray(keys)) {\n        return mergeMapArray(keys, keysetToKeysList);\n    }\n    let rangeEnd = keys.to;\n    let rangeStart = keys.from || 0;\n    if (typeofNumber !== typeof rangeEnd) {\n        rangeEnd = rangeStart + (keys.length || 0) - 1;\n    }\n    return Array.from(\n        {length: 1 + (rangeEnd - rangeStart) },\n        (x, index) => index + rangeStart\n    );\n}\n\nfunction mergeMapArray(xs, fn) {\n    let ix = -1;\n    const list = [];\n    const { length } = xs;\n    while (++ix < length) {\n        list.push.apply(list, fn(xs[ix]));\n    }\n    return list;\n}\n"]}