{"version":3,"sources":["webpack:///falcor.node.min.js","webpack:///webpack/bootstrap 392b72f976201610e978","webpack:///./lib/cache/isExpired.js","webpack:///./lib/cache/expireNode.js","webpack:///./lib/cache/get/json/FalcorJSON.js","webpack:///./lib/errors/NullInPathError.js","webpack:///./lib/errors/createErrorClass.js","webpack:///./lib/support/isObject.js","webpack:///./lib/cache/clone.js","webpack:///./lib/cache/createHardlink.js","webpack:///./lib/support/getSize.js","webpack:///./lib/cache/getCachePosition.js","webpack:///./lib/cache/updateNodeAncestors.js","webpack:///./lib/errors/InvalidKeySetError.js","webpack:///./lib/lru/promote.js","webpack:///./lib/request/Subscriber.js","webpack:///./lib/request/Subscription.js","webpack:///./lib/cache/get/onValueType.js","webpack:///./lib/cache/getBoundCacheNode.js","webpack:///./lib/cache/set/setJSONGraphs.js","webpack:///./lib/cache/set/setPathMaps.js","webpack:///./lib/support/isInternalKey.js","webpack:///external \"@graphistry/falcor-path-utils/lib/support/materializedAtom\"","webpack:///./lib/cache/get/json/index.js","webpack:///./lib/cache/get/jsonGraph/index.js","webpack:///./lib/cache/get/jsonGraph/inlineValue.js","webpack:///./lib/cache/get/onMissing.js","webpack:///./lib/cache/invalidate/invalidatePathSets.js","webpack:///./lib/cache/removeNodeAndDescendants.js","webpack:///./lib/cache/set/setPathValues.js","webpack:///./lib/cache/updateBackReferenceVersions.js","webpack:///./lib/internal/isInternal.js","webpack:///./lib/support/getTimestamp.js","webpack:///./lib/values/expires-now.js","webpack:///(webpack)/buildin/global.js","webpack:///external \"@graphistry/falcor-path-utils/lib/iterateKeySet\"","webpack:///./lib/cache/get/json/getJSON.js","webpack:///./lib/cache/get/json/getReferenceTarget.js","webpack:///./lib/cache/get/json/onValue.js","webpack:///./lib/cache/get/jsonGraph/getJSONGraph.js","webpack:///./lib/cache/get/onMaterialize.js","webpack:///./lib/cache/groupCacheArguments.js","webpack:///./lib/cache/insertNode.js","webpack:///./lib/cache/invalidate/invalidatePathMaps.js","webpack:///./lib/cache/mergeValueOrInsertBranch.js","webpack:///./lib/cache/reconstructPath.js","webpack:///./lib/cache/replaceNode.js","webpack:///./lib/cache/wrapNode.js","webpack:///./lib/errors/CircularReferenceError.js","webpack:///./lib/errors/InvalidSourceError.js","webpack:///./lib/lru/splice.js","webpack:///./lib/request/Source.js","webpack:///./lib/schedulers/ImmediateScheduler.js","webpack:///./lib/support/isJSONEnvelope.js","webpack:///./lib/support/isJSONGraphEnvelope.js","webpack:///./lib/support/now.js","webpack:///./lib/values/expires-never.js","webpack:///external \"@graphistry/falcor-path-utils/lib/collapse\"","webpack:///./lib/index.js","webpack:///./lib/Model.js","webpack:///./lib/ModelDataSourceAdapter.js","webpack:///./lib/ModelRoot.js","webpack:///./lib/cache/call/index.js","webpack:///./lib/cache/get/index.js","webpack:///./lib/cache/get/json/onError.js","webpack:///./lib/cache/get/json/walkFlatBuffer.js","webpack:///./lib/cache/get/json/walkPath.js","webpack:///./lib/cache/get/jsonGraph/getReferenceTarget.js","webpack:///./lib/cache/get/jsonGraph/onValue.js","webpack:///./lib/cache/get/jsonGraph/walkPath.js","webpack:///./lib/cache/get/onMaterializeFlatBuffer.js","webpack:///./lib/cache/getCache.js","webpack:///./lib/cache/getVersion.js","webpack:///./lib/cache/invalidate/index.js","webpack:///./lib/cache/mergeJSONGraphNode.js","webpack:///./lib/cache/set/index.js","webpack:///./lib/cache/transferBackReferences.js","webpack:///./lib/cache/unlinkBackReferences.js","webpack:///./lib/cache/unlinkForwardReference.js","webpack:///./lib/deref/hasValidParentReference.js","webpack:///./lib/deref/index.js","webpack:///./lib/errors/BoundJSONGraphModelError.js","webpack:///./lib/errors/InvalidDerefInputError.js","webpack:///./lib/errors/InvalidModelError.js","webpack:///./lib/errors/MaxRetryExceededError.js","webpack:///./lib/internal/f_.js","webpack:///./lib/lru/collect.js","webpack:///./lib/request/Call.js","webpack:///./lib/request/Queue.js","webpack:///./lib/request/Request.js","webpack:///./lib/request/Subject.js","webpack:///./lib/schedulers/TimeoutScheduler.js","webpack:///./lib/support/array-flat-map.js","webpack:///./lib/support/clone.js","webpack:///./lib/support/getExpires.js","webpack:///./lib/support/getType.js","webpack:///./lib/support/isPathValue.js","webpack:///./~/symbol-observable/index.js","webpack:///./~/symbol-observable/lib/index.js","webpack:///./~/symbol-observable/lib/ponyfill.js","webpack:///(webpack)/buildin/module.js","webpack:///external \"@graphistry/falcor-path-utils/lib/computeFlatBufferHash\"","webpack:///external \"@graphistry/falcor-path-utils/lib/flatBufferToPaths\"","webpack:///external \"@graphistry/falcor-path-utils/lib/getHashCode\"","webpack:///external \"@graphistry/falcor-path-utils/lib/hasIntersection\"","webpack:///external \"@graphistry/falcor-path-utils/lib/toCollapseMap\"","webpack:///external \"@graphistry/falcor-path-utils/lib/toCollapseTrees\"","webpack:///external \"@graphistry/falcor-path-utils/lib/toFlatBuffer\"","webpack:///external \"@graphistry/falcor-path-utils/lib/toPaths\""],"names":["module","exports","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","__webpack_require__.i","value","d","__webpack_require__.d","name","getter","Object","defineProperty","configurable","enumerable","get","n","__webpack_require__.n","__esModule","getDefault","getModuleExports","o","__webpack_require__.o","object","property","prototype","hasOwnProperty","p","s","now","$now","$never","module.exports","node","expireImmediate","exp","undefined","splice","expired","lru","global","FalcorJSON","f_meta","bindArrayMethod","fn","bound","arguments","getInst","inst","typeofInst","argsLen","typeofString","typeofObject","toJSON","serialize","toProps","f_meta_inst","f_meta_json","version","json","serializer","includeMetadata","createWithProto","count","total","keys","key","xs","isArray","$code","abs_path","deref_to","deref_from","ys","reduce","descriptors","writable","Array","toString","JSON","$__hash","$__path","$__version","createErrorClass","message","MESSAGE","init","E","Error","constructor","stack","E.is","x","isObject","isInternal","clone","index","length","from","to","backRefs","getCachePosition","cache","path","type","depth","maxDepth","removeNodeAndDescendants","updateBackReferenceVersions","updateNodeAncestors","offset","curr","next","keysOrRanges","mesage","EXPIRES_NEVER","root","head","prev","Subscriber","destination","parent","onCompleted","Subscription","error","onError","onNext","complete","Subscriber.prototype.onNext","dest","Subscriber.prototype.onError","signaled","dispose","Subscriber.prototype.onCompleted","Subscriber.prototype.unsubscribe","subscriptions","Subscription.prototype.add","subscription","push","Subscription.prototype.remove","indexOf","Subscription.prototype.unsubscribe","isExpired","expireNode","lruPromote","onValueType","seed","results","requestedPath","requestedLength","optimizedPath","optimizedLength","fromReference","modelRoot","branchSelector","boxValues","materialized","reportMissing","treatErrorsAsValues","onValue","onMissing","onMaterialize","reportMaterialized","getBoundCacheNode","model","setJSONGraphPathSet","messageRoot","messageParent","requestedPaths","optimizedPaths","comparator","errorSelector","note","branch","keySet","iterateKeySet","optimizedIndex","setNode","nextNode","nextParent","nextOptimizedPath","reference","container","createHardlink","arr","NullInPathError","mergeJSONGraphNode","jsonGraphEnvelopes","jsonGraphEnvelopeIndex","jsonGraphEnvelopeCount","jsonGraphEnvelope","paths","jsonGraph","pathIndex","pathCount","setPathMap","pathMap","itr","isInternalKey","keyIndex","keyCount","child","mergeValueOrInsertBranch","pathMapEnvelopes","pathMapIndex","pathMapCount","pathMapEnvelope","require","inlineJSONGraphValue","keyset","restPathIndex","restPath","restPathCount","isEmptyKeySet","rangeEnd","mPath","lastKeyIsNull","isRequestedPath","missingPaths","missTotal","missingPath","missDepth","Number","invalidatePathSet","invalidateNode","getSize","invalidatePathSets","key2","lruSplice","unlinkForwardReference","unlinkBackReferences","setPathSet","pathValues","pathValueIndex","pathValueCount","pathValue","nodeArg","ref","f_","regexp","RegExp","g","Function","eval","e","window","walkPathAndBuildOutput","walkFlatBufferAndBuildOutput","InvalidModelError","toFlatBuffer","computeFlatBufferHash","getJSON","progressive","referenceContainer","boundPath","isFlatBuffer","data","recycleJSON","hasDataSource","Boolean","allowFromWhenceYouCame","pathsIndex","pathsCount","requested","boundRequested","len","promote","CircularReferenceError","getReferenceTarget","context","copy","onJSONValue","BoundJSONGraphModelError","getJSONGraph","materializedAtom","nextDepth","keysetIndex","keysetLength","iteratingKeyset","nextKey","keyIsRange","InvalidKeySetError","typeofNumber","isPathValue","isJSONEnvelope","isJSONGraphEnvelope","groupCacheArguments","args","groups","argIndex","argCount","group","groupType","arg","argType","inputType","invalidatePathMap","invalidatePathMaps","getType","getTimestamp","wrapNode","insertNode","replaceNode","reconstructPath","cType","mType","sizeOffset","currentPath","transferBackReferences","replacement","getExpires","expiresNow","typeArg","size","modelCreated","$type","atomSize","expires","referencePath","Source","subscribe","source","$$observable","default","Source.prototype.operator","Source.prototype.subscribe","y","operator","Source.prototype.then","_promise","resolve","reject","values","rejected","errors","then","ImmediateScheduler","empty","unsubscribe","ImmediateScheduler.prototype.schedule","action","envelope","Date","falcor","opts","Model","options","_node","_path","_source","_root","ModelRoot","_recycleJSON","_scheduler","_seed","_treatErrorsAsValues","__proto__","_boxed","_materialized","_allowFromWhenceYouCame","setCache","Call","ModelDataSourceAdapter","TimeoutScheduler","collapse","setJSONGraphs","getCache","Model.prototype.get","_len","_key","_toJSON","Model.prototype.set","_len2","_key2","Model.prototype.preload","_len3","_key3","Model.prototype.call","_len4","_key4","Model.prototype.invalidate","_len5","_key5","Model.prototype.getValue","lift","subscriber","Model.prototype.setValue","Model.prototype.setCache","cacheOrJSONGraphEnvelope","rootOnChangeHandler","Model.prototype.getCache","env","Model.prototype.getVersion","concat","_getVersion","Model.prototype._clone","Model.prototype.batch","schedulerOrDelay","scheduler","Math","scheudle","_clone","Model.prototype.unbatch","Model.prototype.treatErrorsAsValues","Model.prototype.asDataSource","Model.prototype._materialize","Model.prototype._dematerialize","Model.prototype.boxValues","Model.prototype.unboxValues","Model.prototype.withoutDataSource","Model.prototype.inspect","getVersion","join","Model.prototype.toJSON","getPath","Model.prototype.getPath","slice","Model.prototype._fromWhenceYouCame","allow","Model.prototype._optimizePath","_model","ModelDataSourceAdapter.prototype.get","pathSets","apply","_toJSONG","ModelDataSourceAdapter.prototype.set","jsongResponse","set","ModelDataSourceAdapter.prototype.call","suffixes","syncRefCount","maxRetryCount","topLevelModel","requests","Requests","collectRatio","maxSize","functionTypeof","onChange","onChangesCompleted","defaultCompare","_args","hasValue","missing","thisPaths","fragments","errorPath","errorValue","refTarget","f_old_keys","f_new_keys","f_code","nextJSON","nextReferenceContainer","nextOptimizedLength","optimizedLengthNext","refContainerAbsPath","refContainerRefPath","nodeAbsPath","jsonAbsPath","keysIndex","keysLength","nextPath","nextPathKey","hasMissingPath","getHashCode","tmp","flatBufferToPaths","rPath","originalOnMissing","inlineValue","onJSONGraphValue","isLeaf","onMaterializeFlatBuffer","_copyCache","out","fromKey","cacheNext","outNext","isUserCreatedcacheNext","clonedValue","boxedValue","invalidate","changed","groupIndex","groupCount","groupedArgs","pluckPaths","operation","rootChangeHandler","invalidatePathValues","cIsObject","mIsObject","cTimestamp","mTimestamp","isDistinct","setGroupsIntoCache","arrayFlatMap","optimized","jsong","relative","setPathMaps","setPathValues","fromNode","destNode","fromNodeRefsLength","destNodeRefsLength","hasValidParentReference","_referenceContainer","cacheRoot","absolutePath","originalRefPath","originalAbsPath","cacheNode","validContainer","CONTAINER_DOES_NOT_EXIST","currentRefPath","shortedPath","printPaths","absolute","String","totalArg","max","ratioArg","ratio","targetSize","CallOperator","CallSubscriber","retryCount","completed","tryOnNext","tryOnError","self","err","mergeInto","destValue","nodeValue","lruCollect","InvalidSourceError","MaxRetryExceededError","Call.prototype.lift","Call.prototype.operator","_subscribe","Call.prototype._subscribe","Call.prototype._toJSON","Call.prototype._toJSONG","Call.prototype.retry","progresive","Call.prototype.progressively","CallOperator.prototype.call","CallSubscriber.prototype.onNext","started","seedIsImmutable","operations","CallSubscriber.prototype.onError","errored","CallSubscriber.prototype.onCompleted","request","CallSubscriber.prototype.unsubscribe","rootOnChangesCompletedHandler","Queue","Dedupe","queue","dataSource","Request","isolateSet","isolateCall","callArgs","batchAndDedupeGet","Dedupe.prototype.subscribe","requestsIndex","requestsCount","batch","Subject","tree","responded","active","disposable","flush","obs","toPaths","toCollapseTrees","collapseMap","toCollapseMap","filterPathsBoundTo","boundLength","filtered","filteredIndex","outer","invalidatePaths","hasIntersection","Request.prototype.onNext","invalidated","observers","forEach","observer","Request.prototype.onError","errorPathValues","Request.prototype.onCompleted","Request.prototype.remove","Request.prototype.unsubscribe","Request.prototype.connect","scheduledDisposable","schedule","Request.prototype.batch","requestedComplements","optimizedComplements","requestedIntersection","optimizedIntersection","complementIndex","intersectionIndex","optTotal","reqTotal","pathLen","subTree","Subject.prototype.onError","Subject.prototype.onCompleted","Subject.prototype.subscribe","Subject.prototype.unsubscribe","delay","TimerDisposable","id","disposed","TimeoutScheduler.prototype.schedule","setTimeout","TimerDisposable.prototype.unsubscribe","clearTimeout","array","selector","array2","array3","j","k","anyType","_ponyfill","_ponyfill2","result","symbolObservablePonyfill","_Symbol","Symbol","observable","webpackPolyfill","deprecate","module.deprecate","children"],"mappings":"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","file":"falcor.node.min.js","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmory imports with the correct context\n/******/ \t__webpack_require__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmory exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tObject.defineProperty(exports, name, {\n/******/ \t\t\tconfigurable: false,\n/******/ \t\t\tenumerable: true,\n/******/ \t\t\tget: getter\n/******/ \t\t});\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 107);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar now = __webpack_require__(53);\nvar $now = __webpack_require__(31);\nvar $never = __webpack_require__(54);\n\nmodule.exports = function isExpired(node, expireImmediate) {\n    var exp = node.$expires;\n    if (exp === undefined || exp === null || exp === $never) {\n        return false;\n    } else if (exp === $now) {\n        return expireImmediate;\n    }\n    return exp < now();\n};\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar splice = __webpack_require__(48);\n\nmodule.exports = function expireNode(node, expired, lru) {\n    if (!node[\"\u001eƒ_invalidated\"]) {\n        node[\"\u001eƒ_invalidated\"] = true;\n        expired.push(node);\n        splice(lru, node);\n    }\n    return node;\n};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {function FalcorJSON(f_meta) {\n    if (!f_meta) {\n        this[\"\u001eƒ_meta\"] = {};\n    } else if (!(this[\"\u001eƒ_meta\"] = f_meta[\"\u001eƒ_meta\"])) {\n        this[\"\u001eƒ_meta\"] = f_meta;\n    }\n}\n\nObject.defineProperties(FalcorJSON.prototype, ['concat', 'copyWithin', 'entries', 'every', 'fill', 'filter', 'find', 'findIndex', 'forEach', 'includes', 'indexOf', 'join', 'keys', 'lastIndexOf', 'map', 'pop', 'push', 'reduce', 'reduceRight', 'reverse', 'shift', 'slice', 'some', 'sort', 'splice', 'unshift', 'values'].reduce(function (descriptors, name) {\n    descriptors[name] = {\n        writable: true, enumerable: false,\n        value: bindArrayMethod(Array.prototype[name])\n    };\n    return descriptors;\n}, {\n    toJSON: { enumerable: false, value: toJSON },\n    toProps: { enumerable: false, value: toProps },\n    toString: { enumerable: false, value: toString },\n    $__hash: {\n        enumerable: false,\n        get: function () {\n            var f_meta = this[\"\u001eƒ_meta\"];\n            return f_meta && f_meta['$code'] || '';\n        }\n    },\n    $__path: {\n        enumerable: false,\n        get: function () {\n            var f_meta = this[\"\u001eƒ_meta\"];\n            return f_meta && f_meta[\"abs_path\"] || [];\n        }\n    },\n    $__version: {\n        enumerable: false,\n        get: function () {\n            var f_meta = this[\"\u001eƒ_meta\"];\n            return f_meta && f_meta[\"version\"] || 0;\n        }\n    }\n}));\n\nfunction bindArrayMethod(fn) {\n    return (bound.fn = fn) && bound;\n    function bound() {\n        return bound.fn.apply(this, arguments);\n    }\n}\n\nvar isArray = Array.isArray;\nvar typeofObject = 'object';\nvar typeofString = 'string';\n\nfunction getInst(inst) {\n    var typeofInst = typeof inst;\n    var argsLen = arguments.length;\n    if (argsLen === 0) {\n        inst = this;\n    } else if (typeofInst !== typeofString) {\n        if (!inst || typeofInst !== typeofObject) {\n            return inst;\n        }\n    } else if (argsLen !== 1) {\n        return inst;\n    } else {\n        inst = this;\n    }\n    return inst === global ? undefined : inst;\n}\n\nfunction toJSON() {\n    return serialize(getInst.apply(this, arguments), toJSON);\n}\n\nfunction toString(includeMetadata) {\n    return JSON.stringify(serialize(getInst.call(this, this), serialize, includeMetadata === true));\n}\n\nfunction toProps(inst) {\n\n    inst = getInst.apply(this, arguments);\n\n    var f_meta_inst,\n        f_meta_json,\n        version = 0;\n    var json = serialize(inst, toProps, true, true);\n\n    if (inst && (f_meta_inst = inst[\"\u001eƒ_meta\"])) {\n        version = f_meta_inst[\"version\"];\n    }\n\n    if (!(!json || typeof json !== typeofObject)) {\n        if (f_meta_json = json[\"\u001eƒ_meta\"]) {\n            f_meta_json[\"version\"] = version;\n        }\n    }\n\n    return json;\n}\n\nfunction serialize(inst, serializer, includeMetadata, createWithProto) {\n\n    if (!inst || typeof inst !== typeofObject) {\n        return inst;\n    }\n\n    var count, total, f_meta, keys, key, xs, ys;\n\n    if (isArray(inst)) {\n        xs = inst;\n    } else {\n\n        count = -1;\n        keys = Object.keys(inst);\n        total = keys.length;\n        xs = {};\n\n        if (createWithProto) {\n            xs.__proto__ = FalcorJSON.prototype;\n        }\n\n        if (includeMetadata && (f_meta = inst[\"\u001eƒ_meta\"])) {\n\n            var $code = f_meta['$code'];\n            var abs_path = f_meta[\"abs_path\"];\n            var deref_to = f_meta[\"deref_to\"];\n            var deref_from = f_meta[\"deref_from\"];\n\n            f_meta = {};\n            $code && (f_meta['$code'] = $code);\n            abs_path && (f_meta[\"abs_path\"] = abs_path);\n            deref_to && (f_meta[\"deref_to\"] = deref_to);\n            deref_from && (f_meta[\"deref_from\"] = deref_from);\n\n            xs[\"\u001eƒ_meta\"] = f_meta;\n\n            if (createWithProto) {\n                ys = {};\n                ys.__proto__ = xs;\n                xs = ys;\n            }\n        }\n\n        while (++count < total) {\n            if ((key = keys[count]) !== \"\u001eƒ_meta\") {\n                xs[key] = serializer(inst[key], serializer, includeMetadata);\n            }\n        }\n    }\n\n    return xs;\n}\n\nmodule.exports = FalcorJSON;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar createErrorClass = __webpack_require__(4);\nvar MESSAGE = '`null` is not allowed in branch key positions.';\n\n/**\n * Do not allow null in path.\n */\nmodule.exports = createErrorClass('NullInPathError', function () {\n  this.message = MESSAGE;\n});\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\nmodule.exports = createErrorClass;\n\nfunction createErrorClass(name, init) {\n    function E(message) {\n        this.message = message;\n        init && init.apply(this, arguments);\n        if (!Error.captureStackTrace) {\n            this.stack = new Error().stack;\n        } else {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n    E.prototype = Object.create(Error.prototype);\n    E.prototype.name = name;\n    E.prototype.constructor = E;\n    E.is = function (x) {\n        return x.name === name;\n    };\n    return E;\n}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\nmodule.exports = isObject;\n\nfunction isObject(value) {\n    return value !== null && typeof value === 'object';\n}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isInternal = __webpack_require__(29);\n\nmodule.exports = clone;\n\nfunction clone(node) {\n\n    var key,\n        keys = Object.keys(node),\n        json = {},\n        index = -1,\n        length = keys.length;\n\n    while (++index < length) {\n        key = keys[index];\n        if (isInternal(key)) {\n            continue;\n        }\n        json[key] = node[key];\n    }\n\n    return json;\n}\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = function createHardlink(from, to) {\n\n    // create a back reference\n    var backRefs = to[\"\u001eƒ_refs_length\"] || 0;\n    to[\"\u001eƒ_ref\" + backRefs] = from;\n    to[\"\u001eƒ_refs_length\"] = backRefs + 1;\n\n    // create a hard reference\n    from[\"\u001eƒ_ref_index\"] = backRefs;\n    from[\"\u001eƒ_context\"] = to;\n};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(5);\nmodule.exports = function getSize(node) {\n    return isObject(node) && node.$size || 0;\n};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n/**\n * getCachePosition makes a fast walk to the bound value since all bound\n * paths are the most possible optimized path.\n *\n * @param {Model} model -\n * @param {Array} path -\n * @returns {Mixed} - undefined if there is nothing in this position.\n * @private\n */\nmodule.exports = getCachePosition;\n\nfunction getCachePosition(cache, path) {\n\n    var node = cache;\n    var type,\n        depth = 0;\n    var maxDepth = path.length;\n\n    if (maxDepth > 0) {\n        do {\n            node = node[path[depth]];\n\n            while (node && (type = node.$type) === \"ref\") {\n                node = getCachePosition(cache, node.value);\n            }\n        } while (++depth < maxDepth && node && !type);\n    }\n\n    return node;\n};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar removeNodeAndDescendants = __webpack_require__(26);\nvar updateBackReferenceVersions = __webpack_require__(28);\n\nmodule.exports = updateNodeAncestors;\n\nfunction updateNodeAncestors(node, offset, lru, version) {\n    var curr = node,\n        next = curr[\"\u001eƒ_parent\"];\n    do {\n        if ((curr.$size = (curr.$size || 0) - offset) > 0) {\n            if (!(next = curr[\"\u001eƒ_parent\"])) {\n                curr[\"\u001eƒ_version\"] = version;\n            } else if (curr[\"\u001eƒ_version\"] !== version) {\n                updateBackReferenceVersions(curr, version);\n            }\n        } else if (next = curr[\"\u001eƒ_parent\"]) {\n            removeNodeAndDescendants(curr, next, curr[\"\u001eƒ_key\"], lru, version);\n        }\n    } while (curr = next);\n    return node;\n}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar createErrorClass = __webpack_require__(4);\n\n/**\n * InvalidKeySetError happens when a dataSource syncronously throws\n * an exception during a get/set/call operation.\n *\n * @param {Error} error - The error that was thrown.\n * @private\n */\nmodule.exports = createErrorClass('InvalidKeySetError', function (path, keysOrRanges) {\n  this.mesage = '' + 'The KeySet ' + JSON.stringify(keysOrRanges) + ' in path ' + JSON.stringify(path) + ' contains a KeySet. ' + 'Keysets can only contain Keys or Ranges';\n});\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar EXPIRES_NEVER = __webpack_require__(54);\n\n// [H] -> Next -> ... -> [T]\n// [T] -> Prev -> ... -> [H]\nmodule.exports = function lruPromote(root, object) {\n    // Never promote node.$expires === 1.  They cannot expire.\n    if (object.$expires === EXPIRES_NEVER) {\n        return;\n    }\n\n    var head = root[\"\u001eƒ_head\"];\n\n    // Nothing is in the cache.\n    if (!head) {\n        root[\"\u001eƒ_head\"] = root[\"\u001eƒ_tail\"] = object;\n        return;\n    }\n\n    if (head === object) {\n        return;\n    }\n\n    // The item always exist in the cache since to get anything in the\n    // cache it first must go through set.\n    var prev = object[\"\u001eƒ_prev\"];\n    var next = object[\"\u001eƒ_next\"];\n    if (next) {\n        next[\"\u001eƒ_prev\"] = prev;\n    }\n    if (prev) {\n        prev[\"\u001eƒ_next\"] = next;\n    }\n    object[\"\u001eƒ_prev\"] = undefined;\n\n    // Insert into head position\n    root[\"\u001eƒ_head\"] = object;\n    object[\"\u001eƒ_next\"] = head;\n    head[\"\u001eƒ_prev\"] = object;\n\n    // If the item we promoted was the tail, then set prev to tail.\n    if (object === root[\"\u001eƒ_tail\"]) {\n        root[\"\u001eƒ_tail\"] = prev;\n    }\n};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar Subscription = __webpack_require__(14);\n\nmodule.exports = Subscriber;\n\nfunction Subscriber(destination, parent, onCompleted) {\n    if (typeof destination === 'function' || typeof parent === 'function' || typeof onCompleted === 'function') {\n        Subscription.call(this, []);\n        this.destination = {\n            error: parent,\n            onError: parent,\n            next: destination,\n            onNext: destination,\n            complete: onCompleted,\n            onCompleted: onCompleted\n        };\n    } else {\n        Subscription.call(this, [], parent);\n        this.parent = parent;\n        this.destination = destination;\n    }\n}\n\nSubscriber.prototype = Object.create(Subscription.prototype);\n\nSubscriber.prototype.next = Subscriber.prototype.onNext = function onNext(value) {\n    var dest = this.destination;\n    if (dest) {\n        if (dest.onNext) {\n            dest.onNext(value);\n        } else if (dest.next) {\n            dest.next(value);\n        }\n    }\n};\n\nSubscriber.prototype.error = Subscriber.prototype.onError = function onError(error) {\n    var signaled = false;\n    var dest = this.destination;\n    if (dest) {\n        if (dest.onError) {\n            signaled = true;\n            dest.onError(error);\n        } else if (dest.error) {\n            signaled = true;\n            dest.error(error);\n        }\n        this.dispose();\n    }\n    if (!signaled) {\n        throw error;\n    }\n};\n\nSubscriber.prototype.complete = Subscriber.prototype.onCompleted = function onCompleted() {\n    var dest = this.destination;\n    if (dest) {\n        if (dest.onCompleted) {\n            dest.onCompleted();\n        } else if (dest.complete) {\n            dest.complete();\n        }\n        this.dispose();\n    }\n};\n\nSubscriber.prototype.dispose = Subscriber.prototype.unsubscribe = function () {\n    this.destination = null;\n    Subscription.prototype.dispose.call(this);\n};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports) {\n\nmodule.exports = Subscription;\n\nfunction Subscription(subscriptions, parent) {\n    this.parent = parent;\n    this.subscriptions = subscriptions || [];\n}\n\nSubscription.prototype.add = function (subscription) {\n    return this.subscriptions.push(subscription) && this || this;\n};\n\nSubscription.prototype.remove = function (subscription) {\n    var index = this.subscriptions.indexOf(subscription);\n    if (~index) {\n        this.subscriptions.splice(index, 1);\n    }\n    return this;\n};\n\nSubscription.prototype.dispose = Subscription.prototype.unsubscribe = function () {\n    var subscription,\n        subscriptions = this.subscriptions;\n    while (subscriptions.length) {\n        (subscription = subscriptions.pop()) && subscription.dispose && subscription.dispose();\n    }\n    var parent = this.parent;\n    if (parent) {\n        this.parent = null;\n        parent.remove && parent.remove(this);\n    }\n};\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isExpired = __webpack_require__(0);\nvar expireNode = __webpack_require__(1);\nvar lruPromote = __webpack_require__(12);\n\nmodule.exports = onValueType;\n\nfunction onValueType(node, type, json, path, depth, seed, results, requestedPath, requestedLength, optimizedPath, optimizedLength, fromReference, modelRoot, expired, expireImmediate, branchSelector, boxValues, materialized, reportMissing, treatErrorsAsValues, onValue, onMissing, onMaterialize) {\n\n    var reportMaterialized = reportMissing;\n\n    if (type) {\n        if (isExpired(node, expireImmediate)) {\n            if (!node[\"\u001eƒ_invalidated\"]) {\n                expireNode(node, expired, modelRoot);\n            }\n        } else {\n            lruPromote(modelRoot, node);\n            if (node.value === undefined) {\n                reportMissing = false;\n                reportMaterialized = materialized;\n            } else {\n                if (seed) {\n                    if (fromReference) {\n                        requestedPath[depth] = null;\n                    }\n                    return onValue(node, type, depth, seed, results, requestedPath, optimizedPath, optimizedLength, fromReference, boxValues, materialized, treatErrorsAsValues);\n                }\n                return undefined;\n            }\n        }\n    }\n\n    if (materialized) {\n        seed && (results.hasValue = true);\n    } else if (!reportMaterialized) {\n        return undefined;\n    }\n\n    return onMissing(path, depth, results, requestedPath, requestedLength, fromReference, optimizedPath, optimizedLength, reportMissing, materialized, json, branchSelector, boxValues, onMaterialize, modelRoot);\n}\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar getCachePosition = __webpack_require__(9);\n\nmodule.exports = getBoundCacheNode;\n\nfunction getBoundCacheNode(model, path) {\n    path = path || model._path;\n    var node = model._node;\n    if (!node || node[\"\u001eƒ_parent\"] === undefined || node[\"\u001eƒ_invalidated\"]) {\n        model._node = null;\n        if (path.length === 0) {\n            node = model._root.cache;\n        } else {\n            node = getCachePosition(model._root.cache, path);\n            if (path === model._path) {\n                model._node = node;\n            }\n        }\n    }\n    return node;\n}\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar arr = new Array(5);\nvar isExpired = __webpack_require__(0);\nvar expireNode = __webpack_require__(1);\nvar createHardlink = __webpack_require__(7);\nvar mergeJSONGraphNode = __webpack_require__(72);\nvar NullInPathError = __webpack_require__(3);\nvar iterateKeySet = __webpack_require__(33);\n\n/**\n * Merges a list of {@link JSONGraphEnvelope}s into a {@link JSONGraph}.\n * @function\n * @param {Object} model - the Model for which to merge the {@link JSONGraphEnvelope}s.\n * @param {Array.<PathValue>} jsonGraphEnvelopes - the {@link JSONGraphEnvelope}s to merge.\n * @return {Array.<Array.<Path>>} - an Array of Arrays where each inner Array is a list of requested and optimized paths (respectively) for the successfully set values.\n */\n\nmodule.exports = function setJSONGraphs(model, jsonGraphEnvelopes, errorSelector, comparator, expireImmediate) {\n\n    var modelRoot = model._root;\n    var lru = modelRoot;\n    var expired = modelRoot.expired;\n    var version = modelRoot.version + 1;\n    var cache = modelRoot.cache;\n\n    var requestedPath = [];\n    var optimizedPath = [];\n    var requestedPaths = [];\n    var optimizedPaths = [];\n    var jsonGraphEnvelopeIndex = -1;\n    var jsonGraphEnvelopeCount = jsonGraphEnvelopes.length;\n\n    while (++jsonGraphEnvelopeIndex < jsonGraphEnvelopeCount) {\n\n        var jsonGraphEnvelope = jsonGraphEnvelopes[jsonGraphEnvelopeIndex];\n        var paths = jsonGraphEnvelope.paths;\n        var jsonGraph = jsonGraphEnvelope.jsonGraph;\n\n        var pathIndex = -1;\n        var pathCount = paths.length;\n\n        while (++pathIndex < pathCount) {\n\n            var path = paths[pathIndex];\n            optimizedPath.index = 0;\n\n            setJSONGraphPathSet(path, 0, cache, cache, cache, jsonGraph, jsonGraph, jsonGraph, requestedPaths, optimizedPaths, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n        }\n    }\n\n    arr[0] = undefined;\n    arr[1] = undefined;\n    arr[2] = undefined;\n    arr[3] = undefined;\n    arr[4] = undefined;\n\n    if (cache[\"\u001eƒ_version\"] === version) {\n        modelRoot.version = version;\n        return [requestedPaths, optimizedPaths, true];\n    }\n\n    return [requestedPaths, optimizedPaths, false];\n};\n\n/* eslint-disable no-constant-condition */\nfunction setJSONGraphPathSet(path, depth, root, parent, node, messageRoot, messageParent, message, requestedPaths, optimizedPaths, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var note = {};\n    var branch = depth < path.length - 1;\n    var keySet = path[depth];\n    var key = iterateKeySet(keySet, note);\n    var optimizedIndex = optimizedPath.index;\n\n    do {\n\n        requestedPath.depth = depth;\n\n        var results = setNode(root, parent, node, messageRoot, messageParent, message, key, branch, false, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n\n        requestedPath[depth] = key;\n        requestedPath.index = depth;\n\n        var nextNode = results[0];\n        var nextParent = results[1];\n        var nextOptimizedPath = results[4];\n        nextOptimizedPath[nextOptimizedPath.index++] = key;\n\n        if (nextNode) {\n            if (branch) {\n                setJSONGraphPathSet(path, depth + 1, root, nextParent, nextNode, messageRoot, results[3], results[2], requestedPaths, optimizedPaths, requestedPath, nextOptimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n            } else {\n                requestedPaths.push(requestedPath.slice(0, requestedPath.index + 1));\n                optimizedPaths.push(nextOptimizedPath.slice(0, nextOptimizedPath.index));\n            }\n        }\n        key = iterateKeySet(keySet, note);\n        if (note.done) {\n            break;\n        }\n        optimizedPath.index = optimizedIndex;\n    } while (true);\n}\n/* eslint-enable */\n\nfunction setReference(root, node, messageRoot, message, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var parent;\n    var messageParent;\n    var reference = node.value;\n    optimizedPath = reference.slice(0);\n\n    if (isExpired(node, expireImmediate)) {\n        expireNode(node, expired, lru);\n        node = undefined;\n        parent = root;\n        messageParent = messageRoot;\n        optimizedPath.index = reference.length;\n    } else {\n\n        var index = 0;\n        var container = node;\n        var count = reference.length - 1;\n        parent = node = root;\n        messageParent = message = messageRoot;\n\n        do {\n            var key = reference[index];\n            var branch = index < count;\n            optimizedPath.index = index;\n\n            var results = setNode(root, parent, node, messageRoot, messageParent, message, key, branch, true, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n            node = results[0];\n            optimizedPath = results[4];\n            if (!node || typeof node !== 'object') {\n                optimizedPath.index = index;\n                return results;\n            }\n            parent = results[1];\n            message = results[2];\n            messageParent = results[3];\n        } while (index++ < count);\n\n        optimizedPath.index = index;\n\n        if (container[\"\u001eƒ_context\"] !== node) {\n            createHardlink(container, node);\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n    arr[2] = message;\n    arr[3] = messageParent;\n    arr[4] = optimizedPath;\n\n    return arr;\n}\n\nfunction setNode(root, parent, node, messageRoot, messageParent, message, key, branch, reference, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var type = node.$type;\n\n    while (type === \"ref\") {\n\n        var results = setReference(root, node, messageRoot, message, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n\n        node = results[0];\n\n        if (!node || typeof node !== 'object') {\n            return results;\n        }\n\n        parent = results[1];\n        message = results[2];\n        messageParent = results[3];\n        optimizedPath = results[4];\n        type = node.$type;\n    }\n\n    if (type === undefined) {\n        if (key == null) {\n            if (branch) {\n                throw new NullInPathError();\n            } else if (node) {\n                key = node[\"\u001eƒ_key\"];\n            }\n        } else {\n            parent = node;\n            messageParent = message;\n            node = parent[key];\n            message = messageParent && messageParent[key];\n        }\n\n        node = mergeJSONGraphNode(parent, node, message, key, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n    arr[2] = message;\n    arr[3] = messageParent;\n    arr[4] = optimizedPath;\n\n    return arr;\n}\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar arr = new Array(3);\nvar isArray = Array.isArray;\nvar isExpired = __webpack_require__(0);\nvar expireNode = __webpack_require__(1);\nvar createHardlink = __webpack_require__(7);\nvar getCachePosition = __webpack_require__(9);\nvar isInternalKey = __webpack_require__(19);\nvar NullInPathError = __webpack_require__(3);\nvar mergeValueOrInsertBranch = __webpack_require__(42);\n\n/**\n * Sets a list of {@link PathMapEnvelope}s into a {@link JSONGraph}.\n * @function\n * @param {Object} model - the Model for which to insert the PathMaps.\n * @param {Array.<PathMapEnvelope>} pathMapEnvelopes - the a list of {@link PathMapEnvelope}s to set.\n * @return {Array.<Array.<Path>>} - an Array of Arrays where each inner Array is a list of requested and optimized paths (respectively) for the successfully set values.\n */\n\nmodule.exports = function setPathMaps(model, pathMapEnvelopes, errorSelector, comparator, expireImmediate) {\n\n    var modelRoot = model._root;\n    var expired = modelRoot.expired;\n    var version = modelRoot.version + 1;\n    var bound = model._path;\n    var cache = modelRoot.cache;\n    var node = getCachePosition(cache, bound);\n\n    if (!node) {\n        return [[], [], false];\n    }\n\n    var parent = node[\"\u001eƒ_parent\"] || cache;\n\n    var requestedPath = [];\n    var requestedPaths = [];\n    var optimizedPaths = [];\n    var optimizedIndex = bound.length;\n    var pathMapIndex = -1;\n    var pathMapCount = pathMapEnvelopes.length;\n\n    while (++pathMapIndex < pathMapCount) {\n\n        var pathMapEnvelope = pathMapEnvelopes[pathMapIndex];\n        var optimizedPath = bound.slice(0);\n        optimizedPath.index = optimizedIndex;\n\n        setPathMap(pathMapEnvelope.json, 0, cache, parent, node, requestedPaths, optimizedPaths, requestedPath, optimizedPath, version, expired, modelRoot, comparator, errorSelector, expireImmediate);\n    }\n\n    arr[0] = undefined;\n    arr[1] = undefined;\n    arr[2] = undefined;\n\n    if (cache[\"\u001eƒ_version\"] === version) {\n        modelRoot.version = version;\n        return [requestedPaths, optimizedPaths, true];\n    }\n\n    return [requestedPaths, optimizedPaths, false];\n};\n\n/* eslint-disable no-constant-condition */\nfunction setPathMap(pathMap, depth, root, parent, node, requestedPaths, optimizedPaths, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var keys = getKeys(pathMap);\n\n    if (keys && keys.length) {\n\n        var keyIndex = 0;\n        var keyCount = keys.length;\n        var optimizedIndex = optimizedPath.index;\n\n        do {\n            var key = keys[keyIndex];\n            var child = pathMap[key];\n            var branch = !(!child || typeof child !== 'object') && !child.$type;\n\n            requestedPath.depth = depth;\n\n            var results = setNode(root, parent, node, key, child, branch, false, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n\n            requestedPath[depth] = key;\n            requestedPath.index = depth;\n\n            var nextNode = results[0];\n            var nextParent = results[1];\n            var nextOptimizedPath = results[2];\n            nextOptimizedPath[nextOptimizedPath.index++] = key;\n\n            if (nextNode) {\n                if (branch) {\n                    setPathMap(child, depth + 1, root, nextParent, nextNode, requestedPaths, optimizedPaths, requestedPath, nextOptimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n                } else {\n                    requestedPaths.push(requestedPath.slice(0, requestedPath.index + 1));\n                    optimizedPaths.push(nextOptimizedPath.slice(0, nextOptimizedPath.index));\n                }\n            }\n            if (++keyIndex >= keyCount) {\n                break;\n            }\n            optimizedPath.index = optimizedIndex;\n        } while (true);\n    }\n}\n/* eslint-enable */\n\nfunction setReference(value, root, node, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var parent;\n    var reference = node.value;\n    optimizedPath = reference.slice(0);\n\n    if (isExpired(node, expireImmediate)) {\n        expireNode(node, expired, lru);\n        node = undefined;\n        parent = root;\n        optimizedPath.index = reference.length;\n    } else {\n        var container = node;\n        parent = root;\n\n        node = node[\"\u001eƒ_context\"];\n\n        if (node != null) {\n            parent = node[\"\u001eƒ_parent\"] || root;\n            optimizedPath.index = reference.length;\n        } else {\n\n            var index = 0;\n            var count = reference.length - 1;\n            optimizedPath.index = index;\n\n            parent = node = root;\n\n            do {\n                var key = reference[index];\n                var branch = index < count;\n                var results = setNode(root, parent, node, key, value, branch, true, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n                node = results[0];\n                optimizedPath = results[2];\n                if (!node || typeof node !== 'object') {\n                    optimizedPath.index = index;\n                    return results;\n                }\n                parent = results[1];\n            } while (index++ < count);\n\n            optimizedPath.index = index;\n\n            if (container[\"\u001eƒ_context\"] !== node) {\n                createHardlink(container, node);\n            }\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n    arr[2] = optimizedPath;\n\n    return arr;\n}\n\nfunction setNode(root, parent, node, key, value, branch, reference, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var type = node.$type;\n\n    while (type === \"ref\") {\n\n        var results = setReference(value, root, node, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n\n        node = results[0];\n\n        if (!node || typeof node !== 'object') {\n            return results;\n        }\n\n        parent = results[1];\n        optimizedPath = results[2];\n        type = node && node.$type;\n    }\n\n    if (!branch || type === undefined) {\n        if (key == null) {\n            if (branch) {\n                throw new NullInPathError();\n            } else if (node) {\n                key = node[\"\u001eƒ_key\"];\n            }\n        } else {\n            parent = node;\n            node = parent[key];\n        }\n\n        node = mergeValueOrInsertBranch(parent, node, key, value, branch, reference, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n    arr[2] = optimizedPath;\n\n    return arr;\n}\n\nfunction getKeys(pathMap) {\n\n    if (!(!pathMap || typeof pathMap !== 'object') && !pathMap.$type) {\n        var keys = [];\n        var itr = 0;\n        if (isArray(pathMap)) {\n            keys[itr++] = 'length';\n        }\n        for (var key in pathMap) {\n            if (isInternalKey(key)) {\n                continue;\n            }\n            keys[itr++] = key;\n        }\n        return keys;\n    }\n\n    return undefined;\n}\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n/**\n * Determined if the key passed in is an internal key.\n *\n * @param {String} x The key\n * @private\n * @returns {Boolean}\n */\n\nmodule.exports = isInternalKey;\n\nvar isInternal = __webpack_require__(29);\n\nfunction isInternalKey(key) {\n  return key && key[0] === '$' || isInternal(key);\n}\n\n/***/ },\n/* 20 */\n/***/ function(module, exports) {\n\nmodule.exports = require(\"@graphistry/falcor-path-utils/lib/support/materializedAtom\");\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(34);\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(37);\n\n/***/ },\n/* 23 */\n/***/ function(module, exports) {\n\nmodule.exports = inlineJSONGraphValue;\n\n/* eslint-disable no-constant-condition */\nfunction inlineJSONGraphValue(node, path, length, seed, branch) {\n\n    var key,\n        depth = 0,\n        prev,\n        curr = seed.jsonGraph;\n\n    if (!curr) {\n        seed.jsonGraph = curr = {};\n    }\n\n    do {\n        prev = curr;\n        key = path[depth++];\n        if (depth >= length) {\n            curr = prev[key] = branch !== true ? node : prev[key] || {};\n            break;\n        }\n        curr = prev[key] || (prev[key] = {});\n    } while (true);\n\n    return curr;\n}\n/* eslint-enable */\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\nvar isArray = Array.isArray;\n\nmodule.exports = onMissing;\n\n/* eslint-disable no-constant-condition */\nfunction onMissing(path, depth, results, requestedPath, requestedLength, fromReference, optimizedPath, optimizedLength, reportMissing, reportMaterialized, json, branchSelector, boxValues, onMaterialize, modelRoot) {\n\n    if (!reportMissing && !reportMaterialized) {\n        return;\n    }\n\n    var keyset,\n        restPathIndex = -1,\n        restPathCount = requestedLength - depth,\n        restPath = restPathCount && new Array(restPathCount) || undefined;\n\n    while (++restPathIndex < restPathCount) {\n        keyset = path[restPathIndex + depth];\n        if (isEmptyKeySet(keyset)) {\n            return;\n        }\n        restPath[restPathIndex] = keyset;\n    }\n\n    var index, count, mPath;\n    var lastKeyIsNull = keyset === null;\n    var isRequestedPath = reportMissing;\n    var missDepth, missTotal, missingPath, missingPaths;\n\n    if (!reportMissing) {\n        missDepth = optimizedLength;\n        missingPath = optimizedPath;\n        missTotal = optimizedLength + restPathCount - Number(lastKeyIsNull);\n    } else {\n        missDepth = depth;\n        missTotal = requestedLength;\n        missingPath = requestedPath;\n        missingPaths = results.requested || (results.requested = []);\n    }\n\n    do {\n        if (restPathCount < requestedLength || !isRequestedPath) {\n            index = -1;\n            count = missDepth;\n            mPath = new Array(missTotal);\n            while (++index < count) {\n                mPath[index] = missingPath[index];\n            }\n            restPathIndex = -1;\n            while (index < missTotal) {\n                mPath[index++] = restPath[++restPathIndex];\n            }\n        }\n\n        // break after inserting both requested and optimized missing paths\n        if (isRequestedPath = !isRequestedPath) {\n            if (reportMissing) {\n                missingPaths[missingPaths.length] = mPath;\n            }\n            break;\n        }\n\n        missingPaths[missingPaths.length] = mPath || restPath;\n\n        missDepth = optimizedLength;\n        missingPath = optimizedPath;\n        missingPaths = results.missing || (results.missing = []);\n        missTotal = optimizedLength + restPathCount - Number(lastKeyIsNull);\n    } while (true);\n\n    if (reportMaterialized) {\n        return onMaterialize(json, mPath, missDepth, missTotal, branchSelector, boxValues, modelRoot);\n    }\n}\n/* eslint-enable */\n\nfunction isEmptyKeySet(keyset) {\n\n    // false if the keyset is a primitive\n    if ('object' !== typeof keyset) {\n        return false;\n    } else if (keyset === null) {\n        return false;\n    }\n\n    if (isArray(keyset)) {\n        // return true if the keyset is an empty array\n        return keyset.length === 0;\n    }\n\n    var rangeEnd = keyset.to,\n        from = keyset.from || 0;\n    if ('number' !== typeof rangeEnd) {\n        rangeEnd = from + (keyset.length || 0);\n    }\n\n    // false if trying to request incorrect or empty ranges\n    // e.g. { from: 10, to: 0 } or { from: 5, length: 0 }\n    return from >= rangeEnd;\n}\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar arr = new Array(2);\nvar isExpired = __webpack_require__(0);\nvar expireNode = __webpack_require__(1);\nvar lruPromote = __webpack_require__(12);\nvar getSize = __webpack_require__(8);\nvar createHardlink = __webpack_require__(7);\nvar getBoundCacheNode = __webpack_require__(16);\nvar updateNodeAncestors = __webpack_require__(10);\nvar iterateKeySet = __webpack_require__(33);\n\n/**\n * Invalidates a list of Paths in a JSON Graph.\n * @function\n * @param {Object} model - the Model for which to insert the PathValues.\n * @param {Array.<PathValue>} paths - the PathValues to set.\n */\n\nmodule.exports = invalidatePathSets;\n\nfunction invalidatePathSets(model, paths, expireImmediate) {\n\n    var modelRoot = model._root;\n    var lru = modelRoot;\n    var expired = modelRoot.expired;\n    var version = modelRoot.version + 1;\n    var cache = modelRoot.cache;\n    var node = getBoundCacheNode(model);\n\n    if (!node) {\n        return false;\n    }\n\n    var pathIndex = -1;\n    var pathCount = paths.length;\n    var parent = node[\"\u001eƒ_parent\"] || cache;\n\n    while (++pathIndex < pathCount) {\n\n        var path = paths[pathIndex];\n\n        invalidatePathSet(path, 0, cache, parent, node, version, expired, lru, expireImmediate);\n    }\n\n    arr[0] = undefined;\n    arr[1] = undefined;\n\n    if (cache[\"\u001eƒ_version\"] === version) {\n        modelRoot.version = version;\n        return true;\n    }\n\n    return false;\n}\n\nfunction invalidatePathSet(path, depth, root, parent, node, version, expired, lru, expireImmediate) {\n\n    var note = {};\n    var branch = depth < path.length - 1;\n    var keySet = path[depth];\n    var key = iterateKeySet(keySet, note);\n\n    do {\n        arr = invalidateNode(root, parent, node, key, branch, false, version, expired, lru, expireImmediate);\n        var nextNode = arr[0];\n        var nextParent = arr[1];\n        if (nextNode) {\n            if (branch) {\n                invalidatePathSet(path, depth + 1, root, nextParent, nextNode, version, expired, lru, expireImmediate);\n            } else {\n                updateNodeAncestors(nextNode, getSize(nextNode), lru, version);\n            }\n        }\n        key = iterateKeySet(keySet, note);\n    } while (!note.done);\n}\n\nfunction invalidateReference(root, node, version, expired, lru, expireImmediate) {\n\n    if (isExpired(node, expireImmediate)) {\n        expireNode(node, expired, lru);\n        arr[0] = undefined;\n        arr[1] = root;\n        return arr;\n    }\n\n    lruPromote(lru, node);\n\n    var container = node;\n    var reference = node.value;\n    var parent = root;\n\n    node = node[\"\u001eƒ_context\"];\n\n    if (node != null) {\n        parent = node[\"\u001eƒ_parent\"] || root;\n    } else {\n\n        var index = 0;\n        var count = reference.length - 1;\n\n        parent = node = root;\n\n        do {\n            var key = reference[index];\n            var branch = index < count;\n            arr = invalidateNode(root, parent, node, key, branch, true, version, expired, lru, expireImmediate);\n            node = arr[0];\n            if (!node && typeof node !== 'object') {\n                return arr;\n            }\n            parent = arr[1];\n        } while (index++ < count);\n\n        if (container[\"\u001eƒ_context\"] !== node) {\n            createHardlink(container, node);\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n\n    return arr;\n}\n\nfunction invalidateNode(root, parent, node, key, branch, reference, version, expired, lru, expireImmediate) {\n\n    var type = node.$type;\n\n    while (type === \"ref\") {\n\n        arr = invalidateReference(root, node, version, expired, lru, expireImmediate);\n\n        node = arr[0];\n\n        if (!node && typeof node !== 'object') {\n            return arr;\n        }\n\n        parent = arr[1];\n        type = node.$type;\n    }\n\n    if (type === undefined) {\n        if (key == null) {\n            if (branch) {\n                throw new Error('`null` is not allowed in branch key positions.');\n            } else if (node) {\n                key = node[\"\u001eƒ_key\"];\n            }\n        } else {\n            parent = node;\n            node = parent[key];\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n\n    return arr;\n}\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar lruSplice = __webpack_require__(48);\nvar isInternalKey = __webpack_require__(19);\nvar unlinkBackReferences = __webpack_require__(75);\nvar unlinkForwardReference = __webpack_require__(76);\nvar updateBackReferenceVersions = __webpack_require__(28);\n\nmodule.exports = removeNodeAndDescendants;\n\nfunction removeNodeAndDescendants(node, parent, key, lru, version) {\n    if (!(!node || typeof node !== 'object')) {\n        var type = node.$type;\n        if (type === undefined) {\n            for (var key2 in node) {\n                if (!isInternalKey(key2)) {\n                    removeNodeAndDescendants(node[key2], node, key2, lru, version);\n                }\n            }\n        } else {\n            if (type === \"ref\") {\n                unlinkForwardReference(node);\n            }\n            lruSplice(lru, node);\n        }\n        unlinkBackReferences(updateBackReferenceVersions(node, version));\n        parent[key] = node[\"\u001eƒ_parent\"] = undefined;\n        return true;\n    }\n    return false;\n}\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar arr = new Array(3);\nvar isExpired = __webpack_require__(0);\nvar expireNode = __webpack_require__(1);\nvar createHardlink = __webpack_require__(7);\nvar getCachePosition = __webpack_require__(9);\nvar NullInPathError = __webpack_require__(3);\nvar iterateKeySet = __webpack_require__(33);\nvar mergeValueOrInsertBranch = __webpack_require__(42);\n\n/**\n * Sets a list of {@link PathValue}s into a {@link JSONGraph}.\n * @function\n * @param {Object} model - the Model for which to insert the {@link PathValue}s.\n * @param {Array.<PathValue>} pathValues - the list of {@link PathValue}s to set.\n * @return {Array.<Array.<Path>>} - an Array of Arrays where each inner Array is a list of requested and optimized paths (respectively) for the successfully set values.\n */\n\nmodule.exports = function setPathValues(model, pathValues, errorSelector, comparator, expireImmediate) {\n\n    var modelRoot = model._root;\n    var expired = modelRoot.expired;\n    var version = modelRoot.version + 1;\n    var bound = model._path;\n    var cache = modelRoot.cache;\n    var node = getCachePosition(cache, bound);\n\n    if (!node) {\n        return [[], [], false];\n    }\n\n    var parent = node[\"\u001eƒ_parent\"] || cache;\n\n    var requestedPath = [];\n    var requestedPaths = [];\n    var optimizedPaths = [];\n    var optimizedIndex = bound.length;\n    var pathValueIndex = -1;\n    var pathValueCount = pathValues.length;\n\n    while (++pathValueIndex < pathValueCount) {\n\n        var pathValue = pathValues[pathValueIndex];\n        var path = pathValue.path;\n        var value = pathValue.value;\n        var optimizedPath = bound.slice(0);\n        optimizedPath.index = optimizedIndex;\n\n        setPathSet(value, path, 0, cache, parent, node, requestedPaths, optimizedPaths, requestedPath, optimizedPath, version, expired, modelRoot, comparator, errorSelector, expireImmediate);\n    }\n\n    arr[0] = undefined;\n    arr[1] = undefined;\n    arr[2] = undefined;\n\n    if (cache[\"\u001eƒ_version\"] === version) {\n        modelRoot.version = version;\n        return [requestedPaths, optimizedPaths, true];\n    }\n\n    return [requestedPaths, optimizedPaths, false];\n};\n\n/* eslint-disable no-constant-condition */\nfunction setPathSet(value, path, depth, root, parent, node, requestedPaths, optimizedPaths, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var note = {};\n    var branch = depth < path.length - 1;\n    var keySet = path[depth];\n    var key = iterateKeySet(keySet, note);\n    var optimizedIndex = optimizedPath.index;\n\n    do {\n\n        requestedPath.depth = depth;\n        requestedPath[depth] = key;\n        requestedPath.index = depth;\n\n        var results = setNode(root, parent, node, key, value, branch, false, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n\n        requestedPath[depth] = key;\n        requestedPath.index = depth;\n\n        var nextNode = results[0];\n        var nextParent = results[1];\n        var nextOptimizedPath = results[2];\n        nextOptimizedPath[nextOptimizedPath.index++] = key;\n\n        if (nextNode) {\n            if (branch) {\n                setPathSet(value, path, depth + 1, root, nextParent, nextNode, requestedPaths, optimizedPaths, requestedPath, nextOptimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n            } else {\n                requestedPaths.push(requestedPath.slice(0, requestedPath.index + 1));\n                optimizedPaths.push(nextOptimizedPath.slice(0, nextOptimizedPath.index));\n            }\n        }\n        key = iterateKeySet(keySet, note);\n        if (note.done) {\n            break;\n        }\n        optimizedPath.index = optimizedIndex;\n    } while (true);\n}\n/* eslint-enable */\n\nfunction setReference(value, root, node, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var parent;\n    var reference = node.value;\n    optimizedPath = reference.slice(0);\n\n    if (isExpired(node, expireImmediate)) {\n        expireNode(node, expired, lru);\n        node = undefined;\n        parent = root;\n        optimizedPath.index = reference.length;\n    } else {\n\n        var container = node;\n        parent = root;\n\n        node = node[\"\u001eƒ_context\"];\n\n        if (node != null) {\n            parent = node[\"\u001eƒ_parent\"] || root;\n            optimizedPath.index = reference.length;\n        } else {\n\n            var index = 0;\n            var count = reference.length - 1;\n\n            parent = node = root;\n\n            do {\n                var key = reference[index];\n                var branch = index < count;\n                optimizedPath.index = index;\n\n                var results = setNode(root, parent, node, key, value, branch, true, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n                node = results[0];\n                optimizedPath = results[2];\n                if (!node || typeof node !== 'object') {\n                    optimizedPath.index = index;\n                    return results;\n                }\n                parent = results[1];\n            } while (index++ < count);\n\n            optimizedPath.index = index;\n\n            if (container[\"\u001eƒ_context\"] !== node) {\n                createHardlink(container, node);\n            }\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n    arr[2] = optimizedPath;\n\n    return arr;\n}\n\nfunction setNode(root, parent, node, key, value, branch, reference, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var type = node.$type;\n\n    while (type === \"ref\") {\n\n        var results = setReference(value, root, node, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n\n        node = results[0];\n\n        if (!node || typeof node !== 'object') {\n            return results;\n        }\n\n        parent = results[1];\n        optimizedPath = results[2];\n        type = node.$type;\n    }\n\n    if (!branch || type === undefined) {\n        if (key == null) {\n            if (branch) {\n                throw new NullInPathError();\n            } else if (node) {\n                key = node[\"\u001eƒ_key\"];\n            }\n        } else {\n            parent = node;\n            node = parent[key];\n        }\n\n        node = mergeValueOrInsertBranch(parent, node, key, value, branch, reference, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate);\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n    arr[2] = optimizedPath;\n\n    return arr;\n}\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = updateBackReferenceVersions;\n\nfunction updateBackReferenceVersions(nodeArg, version) {\n    var node = nodeArg,\n        stack = [],\n        count = 0,\n        ref,\n        i,\n        n;\n    do {\n        i = -1;\n        ref = node[\"\u001eƒ_parent\"];\n        node[\"\u001eƒ_version\"] = version;\n        n = node[\"\u001eƒ_refs_length\"] || 0;\n        do {\n            if (ref && ref[\"\u001eƒ_version\"] !== version) {\n                stack[count++] = ref;\n            }\n            if (++i < n) {\n                ref = node[\"\u001eƒ_ref\" + i];\n                continue;\n            }\n            break;\n        } while (true);\n    } while (node = stack[--count]);\n    return nodeArg;\n}\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n/**\n * Determined if the key passed in is an f_ internal key.\n *\n * @param {String} x The key\n * @private\n * @returns {Boolean}\n */\n\nvar f_ = __webpack_require__(83);\nvar regexp = new RegExp('^' + f_, 'i', 'g');\n\nmodule.exports = regexp.test.bind(regexp);\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(5);\nmodule.exports = function getTimestamp(node) {\n    return isObject(node) && node.$timestamp || undefined;\n};\n\n/***/ },\n/* 31 */\n/***/ function(module, exports) {\n\nmodule.exports = 0;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ },\n/* 33 */\n/***/ function(module, exports) {\n\nmodule.exports = require(\"@graphistry/falcor-path-utils/lib/iterateKeySet\");\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isArray = Array.isArray;\nvar walkPathAndBuildOutput = __webpack_require__(64);\nvar walkFlatBufferAndBuildOutput = __webpack_require__(63);\nvar getBoundCacheNode = __webpack_require__(16);\nvar InvalidModelError = __webpack_require__(81);\nvar toFlatBuffer = __webpack_require__(105);\nvar computeFlatBufferHash = __webpack_require__(99);\n\nmodule.exports = getJSON;\n\nfunction getJSON(model, paths, seed, progressive, expireImmediate) {\n\n    var node,\n        referenceContainer,\n        boundPath = model._path,\n        modelRoot = model._root,\n        cache = modelRoot.cache,\n        requestedPath,\n        requestedLength,\n        optimizedPath,\n        optimizedLength = boundPath && boundPath.length || 0;\n\n    // If the model is bound, get the cache position.\n    if (optimizedLength) {\n        node = getBoundCacheNode(model);\n        // If there was a short, then we 'throw an error' to the outside\n        // calling function which will onError the observer.\n        if (node && node.$type) {\n            return { error: new InvalidModelError(boundPath, boundPath) };\n        }\n        // We need to get the new cache position and copy the bound path.\n        optimizedPath = [];\n        for (var i = 0; i < optimizedLength; ++i) {\n            optimizedPath[i] = boundPath[i];\n        }\n        referenceContainer = model._referenceContainer;\n    } else {\n        node = cache;\n        optimizedPath = [];\n    }\n\n    requestedPath = [];\n\n    var isFlatBuffer = false,\n        json = seed && seed.json,\n        results = { data: seed },\n        boxValues = model._boxed,\n        expired = modelRoot.expired,\n        recycleJSON = model._recycleJSON,\n        hasDataSource = Boolean(model._source),\n        branchSelector = modelRoot.branchSelector,\n        materialized = seed && model._materialized,\n        treatErrorsAsValues = model._treatErrorsAsValues,\n        allowFromWhenceYouCame = model._allowFromWhenceYouCame;\n\n    var arr,\n        path,\n        pathsIndex = 0,\n        pathsCount = paths.length;\n\n    if (pathsCount > 0) {\n        if (recycleJSON) {\n            isFlatBuffer = true;\n            if (pathsCount > 1 || isArray(paths[0])) {\n                paths = [computeFlatBufferHash(toFlatBuffer(paths, {}))];\n            }\n            arr = walkFlatBufferAndBuildOutput(cache, node, json, paths[0], 0, seed, results, requestedPath, optimizedPath, optimizedLength,\n            /* fromReference = */false, referenceContainer, modelRoot, expired, expireImmediate, branchSelector, boxValues, materialized, hasDataSource, treatErrorsAsValues, allowFromWhenceYouCame);\n            json = arr[0];\n            arr[0] = undefined;\n            arr[1] = undefined;\n        } else {\n            do {\n                path = paths[pathsIndex];\n                requestedLength = path.length;\n                json = walkPathAndBuildOutput(cache, node, json, path,\n                /* depth = */0, seed, results, requestedPath, requestedLength, optimizedPath, optimizedLength,\n                /* fromReference = */false, referenceContainer, modelRoot, expired, expireImmediate, branchSelector, boxValues, materialized, hasDataSource, treatErrorsAsValues, allowFromWhenceYouCame);\n            } while (++pathsIndex < pathsCount);\n        }\n    }\n\n    var requested = results.requested;\n\n    results.args = isFlatBuffer && paths || requested;\n\n    if (requested && requested.length) {\n        results.relative = results.args;\n        if (optimizedLength) {\n            var boundRequested = [];\n            for (var i = 0, len = requested.length; i < len; ++i) {\n                boundRequested[i] = boundPath.concat(requested[i]);\n            }\n            results.requested = boundRequested;\n        }\n    }\n\n    if (results.hasValue) {\n        seed.json = json;\n    }\n\n    return results;\n}\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar arr = new Array(3);\nvar promote = __webpack_require__(12);\nvar isExpired = __webpack_require__(0);\nvar createHardlink = __webpack_require__(7);\nvar CircularReferenceError = __webpack_require__(46);\n\nmodule.exports = getReferenceTarget;\n\n/* eslint-disable no-undef */\n/* eslint-disable no-console */\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction getReferenceTarget(root, ref, modelRoot, expireImmediate) {\n\n    promote(modelRoot, ref);\n\n    var context,\n        key,\n        type,\n        depth = 0,\n        node = root,\n        path = ref.value,\n        copy = path,\n        length = path.length;\n\n    do {\n        if (depth === 0 && undefined !== (context = ref[\"\u001eƒ_context\"])) {\n            node = context;\n            depth = length;\n        } else {\n            key = path[depth++];\n            if (undefined === (node = node[key])) {\n                break;\n            }\n        }\n\n        if (depth === length) {\n            type = node.$type;\n            // If the reference points to an expired\n            // value node, don't create a hard-link.\n            if (undefined !== type && isExpired(node, expireImmediate)) {\n                break;\n            }\n            // If a reference points to itself, throw an error.\n            else if (node === ref) {\n                    throw new CircularReferenceError(path);\n                }\n                // If the node we land on isn't the existing ref context,\n                // create a hard-link between the reference and the node\n                // it points to.\n                else if (node !== context) {\n                        createHardlink(ref, node);\n                    }\n\n            // If the reference points to another ref, follow the new ref\n            // by resetting the relevant state and continuing from the top.\n            if (type === \"ref\") {\n\n                promote(modelRoot, node);\n\n                depth = 0;\n                ref = node;\n                node = root;\n                path = copy = ref.value;\n                length = path.length;\n\n                continue;\n            }\n            break;\n        } else if (undefined !== node.$type) {\n            break;\n        }\n    } while (true);\n\n    if (depth < length && undefined !== node) {\n        length = depth;\n    }\n\n    depth = -1;\n    path = new Array(length);\n    while (++depth < length) {\n        path[depth] = copy[depth];\n    }\n\n    arr[0] = node;\n    arr[1] = path;\n    arr[2] = ref;\n\n    return arr;\n}\n/* eslint-enable */\n\n/***/ },\n/* 36 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar clone = __webpack_require__(6);\nvar onError = __webpack_require__(62);\n\nmodule.exports = onJSONValue;\n\nfunction onJSONValue(node, type, depth, seed, results, requestedPath, optimizedPath, optimizedLength, fromReference, boxValues, materialized, treatErrorsAsValues) {\n\n    if (\"error\" === type && !treatErrorsAsValues) {\n        return onError(node, depth, results, requestedPath, fromReference, boxValues);\n    }\n\n    results.hasValue = true;\n\n    // boxValues always clones the node\n    return !boxValues ? node.value : clone(node);\n}\n\n/***/ },\n/* 37 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar walkPathAndBuildOutput = __webpack_require__(67);\nvar BoundJSONGraphModelError = __webpack_require__(79);\n\nmodule.exports = getJSONGraph;\n\nfunction getJSONGraph(model, paths, seed, progressive, expireImmediate) {\n\n    var node,\n        cache,\n        boundPath = model._path,\n        modelRoot = model._root,\n        requestedPath,\n        requestedLength,\n        optimizedPath,\n        optimizedLength = boundPath && boundPath.length || 0;\n\n    // If the model is bound, then get that cache position.\n    if (optimizedLength) {\n        // JSONGraph output cannot ever be bound or else it will\n        // throw an error.\n        return { error: new BoundJSONGraphModelError() };\n    } else {\n        optimizedPath = [];\n        cache = node = modelRoot.cache;\n    }\n\n    requestedPath = [];\n\n    var boxValues = model._boxed,\n        expired = modelRoot.expired,\n        materialized = model._materialized,\n        hasDataSource = Boolean(model._source),\n        treatErrorsAsValues = model._treatErrorsAsValues,\n        results = { data: seed },\n        pathsIndex = -1,\n        pathsCount = paths.length;\n\n    while (++pathsIndex < pathsCount) {\n        var path = paths[pathsIndex];\n        requestedLength = path.length;\n        walkPathAndBuildOutput(cache, node, path,\n        /* depth = */0, seed, results, requestedPath, requestedLength, optimizedPath, optimizedLength,\n        /* fromReference = */false, modelRoot, expired, expireImmediate, boxValues, materialized, hasDataSource, treatErrorsAsValues);\n    }\n\n    results.args = results.relative = results.requested;\n\n    return results;\n}\n\n/***/ },\n/* 38 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isArray = Array.isArray;\nvar typeofNumber = 'number';\nvar typeofObject = 'object';\nvar clone = __webpack_require__(6);\nvar FalcorJSON = __webpack_require__(2);\nvar NullInPathError = __webpack_require__(3);\nvar InvalidKeySetError = __webpack_require__(11);\nvar materializedAtom = __webpack_require__(20);\n\nmodule.exports = onMaterialize;\n\n/* eslint-disable camelcase */\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction onMaterialize(json, path, depth, length, branchSelector, boxValues, modelRoot) {\n\n    var type, refTarget;\n\n    // ============ Check for base cases ================\n\n    // If there's nowhere to go, we've reached a terminal node, or hit\n    // the end of the path, stop now. Either build missing paths or report the value.\n    if (depth === length) {\n        return boxValues ? clone(materializedAtom) : undefined;\n    }\n\n    var f_meta;\n\n    var nextKey,\n        keyset,\n        keyIsRange,\n        nextDepth = depth + 1,\n        rangeEnd,\n        keysOrRanges,\n        keysetIndex = -1,\n        keysetLength = 0;\n\n    keyset = path[depth];\n\n    if (!json || typeofObject !== typeof json) {\n        json = {};\n        json.__proto__ = FalcorJSON.prototype;\n        json[\"\u001eƒ_meta\"] = f_meta = {};\n        f_meta[\"version\"] = modelRoot.version;\n        f_meta[\"abs_path\"] = path.slice(0, depth);\n        if (branchSelector) {\n            json = branchSelector(json);\n        }\n    } else if (!(f_meta = json[\"\u001eƒ_meta\"])) {\n        json[\"\u001eƒ_meta\"] = f_meta = {};\n        f_meta[\"version\"] = modelRoot.version;\n        f_meta[\"abs_path\"] = path.slice(0, depth);\n    } else {\n        f_meta[\"version\"] = modelRoot.version;\n        f_meta[\"abs_path\"] = path.slice(0, depth);\n    }\n\n    // Iterate over every key in the keyset. This loop is perhaps a bit clever,\n    // but we do it this way because this is a performance-sensitive code path.\n    // This loop simulates a recursive function if we encounter a Keyset that\n    // contains Keys or Ranges. This is accomplished by a nifty dance between an\n    // outer loop and an inner loop.\n    //\n    // The outer loop is responsible for identifying if the value at this depth\n    // is a Key, Range, or Keyset. If it encounters a Keyset, the `keysetIndex`,\n    // `keysetLength`, and `keysOrRanges` variables are assigned and the outer\n    // loop restarts. If it encounters a Key or Range, `nextKey`, `keyIsRange`,\n    // and `rangeEnd` are assigned values which signal whether the inner loop\n    // should iterate a Range or exit after the first run.\n    //\n    // The inner loop steps `nextKey` one level down in the cache. If a Range\n    // was encountered in the outer loop, the inner loop will iterate until the\n    // Range has been exhausted. If a Key was encountered, the inner loop exits\n    // after the first execution.\n    //\n    // After the inner loop exits, the outer loop iterates the `keysetIndex`\n    // until the Keyset is exhausted. `keysetIndex` and `keysetLength` are\n    // initialized to -1 and 0 respectively, so if a Keyset wasn't encountered\n    // at this depth in the path, then the outer loop exits after one execution.\n\n    iteratingKeyset: do {\n\n        // If the keyset is a primitive value, we've found our `nextKey`.\n        if (typeofObject !== typeof keyset) {\n            nextKey = keyset;\n            rangeEnd = undefined;\n            keyIsRange = false;\n        }\n        // If we encounter a Keyset, either iterate through the Keys and Ranges,\n        // or throw an error if we're already iterating a Keyset. Keysets cannot\n        // contain other Keysets.\n        else if (isArray(keyset)) {\n                // If we've already encountered an Array keyset, throw an error.\n                if (keysOrRanges !== undefined) {\n                    throw new InvalidKeySetError(path, keysOrRanges);\n                }\n                keysetIndex = 0;\n                keysOrRanges = keyset;\n                keysetLength = keyset.length;\n                // If an Array of keys or ranges is empty, terminate the graph walk\n                // and return the json constructed so far. An example of an empty\n                // Keyset is: ['lolomo', [], 'summary']. This should short circuit\n                // without building missing paths.\n                if (0 === keysetLength) {\n                    break iteratingKeyset;\n                }\n                // Assign `keyset` to the first value in the Keyset. Re-entering the\n                // outer loop mimics a singly-recursive function call.\n                keyset = keysOrRanges[keysetIndex];\n                continue iteratingKeyset;\n            }\n            // If the Keyset isn't a primitive or Array, then it must be a Range.\n            else {\n                    rangeEnd = keyset.to;\n                    nextKey = keyset.from || 0;\n                    if (typeofNumber !== typeof rangeEnd) {\n                        rangeEnd = nextKey + (keyset.length || 0) - 1;\n                    }\n                    if (rangeEnd - nextKey < 0) {\n                        break iteratingKeyset;\n                    }\n                    keyIsRange = true;\n                }\n\n        // Now that we have the next key, step down one level in the cache.\n        do {\n            // insert the materialized branch\n            json[nextKey] = onMaterialize(json[nextKey], path, nextDepth, length, branchSelector, boxValues, modelRoot);\n        }\n        // Re-enter the inner loop and continue iterating the Range, or exit\n        // here if we encountered a Key.\n        while (keyIsRange && ++nextKey <= rangeEnd);\n\n        // If we've exhausted the Keyset (or never encountered one at all),\n        // exit the outer loop.\n        if (++keysetIndex === keysetLength) {\n            break iteratingKeyset;\n        }\n\n        // Otherwise get the next Key or Range from the Keyset and re-enter the\n        // outer loop from the top.\n        keyset = keysOrRanges[keysetIndex];\n    } while (true);\n\n    // `json` will be a branch if any cache hits, or undefined if all cache misses\n    return json;\n}\n\n/***/ },\n/* 39 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isArray = Array.isArray;\nvar isPathValue = __webpack_require__(94);\nvar isJSONEnvelope = __webpack_require__(51);\nvar isJSONGraphEnvelope = __webpack_require__(52);\n\nmodule.exports = groupCacheArguments;\n\nfunction groupCacheArguments(args) {\n\n    var groups = [];\n    var argIndex = -1;\n    var argCount = args.length;\n    var group, groupType, arg, argType;\n\n    while (++argIndex < argCount) {\n        arg = args[argIndex];\n        if (isArray(arg)) {\n            arg = { path: arg };\n            argType = 'PathValues';\n        } else if (isPathValue(arg)) {\n            argType = 'PathValues';\n        } else if (isJSONGraphEnvelope(arg)) {\n            argType = 'JSONGraphs';\n        } else if (isJSONEnvelope(arg)) {\n            argType = 'PathMaps';\n        }\n\n        if (groupType !== argType) {\n            groupType = argType;\n            groups.push(group = {\n                arguments: [],\n                inputType: argType\n            });\n        }\n\n        group.arguments.push(arg);\n    }\n\n    return groups;\n}\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = function insertNode(node, parent, key, version, optimizedPath) {\n    node[\"\u001eƒ_key\"] = key;\n    node[\"\u001eƒ_parent\"] = parent;\n\n    if (version !== undefined) {\n        node[\"\u001eƒ_version\"] = version;\n    }\n    if (!node[\"\u001eƒ_abs_path\"]) {\n        node[\"\u001eƒ_abs_path\"] = optimizedPath.slice(0, optimizedPath.index).concat(key);\n    }\n\n    parent[key] = node;\n\n    return node;\n};\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar arr = new Array(2);\nvar isExpired = __webpack_require__(0);\nvar expireNode = __webpack_require__(1);\nvar lruPromote = __webpack_require__(12);\nvar getSize = __webpack_require__(8);\nvar createHardlink = __webpack_require__(7);\nvar getBoundCacheNode = __webpack_require__(16);\nvar isInternalKey = __webpack_require__(19);\nvar updateNodeAncestors = __webpack_require__(10);\n\n/**\n * Sets a list of PathMaps into a JSON Graph.\n * @function\n * @param {Object} model - the Model for which to insert the PathMaps.\n * @param {Array.<PathMapEnvelope>} pathMapEnvelopes - the a list of @PathMapEnvelopes to set.\n */\n\nmodule.exports = invalidatePathMaps;\n\nfunction invalidatePathMaps(model, pathMapEnvelopes, expireImmediate) {\n\n    var modelRoot = model._root;\n    var lru = modelRoot;\n    var expired = modelRoot.expired;\n    var version = modelRoot.version + 1;\n    var comparator = modelRoot._comparator;\n    var cache = modelRoot.cache;\n    var node = getBoundCacheNode(model);\n\n    if (!node) {\n        return false;\n    }\n\n    var pathMapIndex = -1;\n    var parent = node[\"\u001eƒ_parent\"] || cache;\n    var pathMapCount = pathMapEnvelopes.length;\n\n    while (++pathMapIndex < pathMapCount) {\n\n        var pathMapEnvelope = pathMapEnvelopes[pathMapIndex];\n\n        invalidatePathMap(pathMapEnvelope.json, 0, cache, parent, node, version, expired, lru, comparator, expireImmediate);\n    }\n\n    arr[0] = undefined;\n    arr[1] = undefined;\n\n    if (cache[\"\u001eƒ_version\"] === version) {\n        modelRoot.version = version;\n        return true;\n    }\n\n    return false;\n}\n\nfunction invalidatePathMap(pathMap, depth, root, parent, node, version, expired, lru, comparator, expireImmediate) {\n\n    if (!pathMap || typeof pathMap !== 'object' || pathMap.$type) {\n        return;\n    }\n\n    for (var key in pathMap) {\n        if (!isInternalKey(key)) {\n            var child = pathMap[key];\n            var branch = !(!child || typeof child !== 'object') && !child.$type;\n            arr = invalidateNode(root, parent, node, key, child, branch, false, version, expired, lru, comparator, expireImmediate);\n            var nextNode = arr[0];\n            var nextParent = arr[1];\n            if (nextNode) {\n                if (branch) {\n                    invalidatePathMap(child, depth + 1, root, nextParent, nextNode, version, expired, lru, comparator, expireImmediate);\n                } else {\n                    updateNodeAncestors(nextNode, getSize(nextNode), lru, version);\n                }\n            }\n        }\n    }\n}\n\nfunction invalidateReference(value, root, node, version, expired, lru, comparator, expireImmediate) {\n\n    if (isExpired(node, expireImmediate)) {\n        expireNode(node, expired, lru);\n        arr[0] = undefined;\n        arr[1] = root;\n        return arr;\n    }\n\n    lruPromote(lru, node);\n\n    var container = node;\n    var reference = node.value;\n    var parent = root;\n\n    node = node[\"\u001eƒ_context\"];\n\n    if (node != null) {\n        parent = node[\"\u001eƒ_parent\"] || root;\n    } else {\n\n        var index = 0;\n        var count = reference.length - 1;\n\n        parent = node = root;\n\n        do {\n            var key = reference[index];\n            var branch = index < count;\n            arr = invalidateNode(root, parent, node, key, value, branch, true, version, expired, lru, comparator, expireImmediate);\n            node = arr[0];\n            if (!node && typeof node !== 'object') {\n                return arr;\n            }\n            parent = arr[1];\n        } while (index++ < count);\n\n        if (container[\"\u001eƒ_context\"] !== node) {\n            createHardlink(container, node);\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n\n    return arr;\n}\n\nfunction invalidateNode(root, parent, node, key, value, branch, reference, version, expired, lru, comparator, expireImmediate) {\n\n    var type = node.$type;\n\n    while (type === \"ref\") {\n\n        arr = invalidateReference(value, root, node, version, expired, lru, comparator, expireImmediate);\n\n        node = arr[0];\n\n        if (!node && typeof node !== 'object') {\n            return arr;\n        }\n\n        parent = arr[1];\n        type = node.$type;\n    }\n\n    if (type === undefined) {\n        if (key == null) {\n            if (branch) {\n                throw new Error('`null` is not allowed in branch key positions.');\n            } else if (node) {\n                key = node[\"\u001eƒ_key\"];\n            }\n        } else {\n            parent = node;\n            node = parent[key];\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n\n    return arr;\n}\n\n/***/ },\n/* 42 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar $now = __webpack_require__(31);\nvar getType = __webpack_require__(93);\nvar getSize = __webpack_require__(8);\nvar getTimestamp = __webpack_require__(30);\n\nvar wrapNode = __webpack_require__(45);\nvar isExpired = __webpack_require__(0);\nvar expireNode = __webpack_require__(1);\nvar insertNode = __webpack_require__(40);\nvar replaceNode = __webpack_require__(44);\nvar reconstructPath = __webpack_require__(43);\nvar updateNodeAncestors = __webpack_require__(10);\nvar removeNodeAndDescendants = __webpack_require__(26);\n\nmodule.exports = function mergeValueOrInsertBranch(parent, node, key, value, branch, reference, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var cType = getType(node, reference);\n\n    if (branch || reference) {\n        if (cType && isExpired(node,\n        /* expireImmediate:\n         * force true so the node is marked as\n         * expired but keep using it for the merge if it expires immediately\n         */\n        true)) {\n            expireNode(node, expired, lru);\n            cType = node.$expires === $now ? cType : 'expired';\n        }\n        if (cType && cType !== \"ref\" || !node || typeof node !== 'object') {\n            node = replaceNode(node, {}, parent, key, lru, version);\n            node = insertNode(node, parent, key, version, optimizedPath);\n        }\n    } else {\n        var message = value;\n        var isDistinct = true;\n        var mType = getType(message);\n\n        // If both the cache and message are primitives,\n        // insert the message into the cache.\n        if (!cType && !mType) {\n            isDistinct = true;\n        }\n        // Compare the current cache value with the new value. If either of\n        // them don't have a timestamp, or the message's timestamp is newer,\n        // replace the cache value with the message value. If a comparator\n        // is specified, the comparator takes precedence over timestamps.\n        else if (comparator) {\n                isDistinct = !(comparator.length < 3 ? comparator(node, message) : comparator(node, message, optimizedPath.slice(0, optimizedPath.index)));\n            } else {\n                // Comparing either Number or undefined to undefined always results in false.\n                isDistinct = getTimestamp(message) < getTimestamp(node) === false;\n            }\n\n        if (isDistinct) {\n\n            if (errorSelector && mType === \"error\") {\n                message = errorSelector(reconstructPath(requestedPath, key), message);\n            }\n\n            var sizeOffset = getSize(node) - getSize(message = wrapNode(message, mType, mType ? message.value : message));\n\n            node = replaceNode(node, message, parent, key, lru, version);\n            parent = updateNodeAncestors(parent, sizeOffset, lru, version);\n            node = insertNode(node, parent, key, version, optimizedPath);\n        }\n    }\n\n    return node;\n};\n\n/***/ },\n/* 43 */\n/***/ function(module, exports) {\n\n/**\n * Reconstructs the path for the current key, from currentPath (requestedPath)\n * state maintained during set/merge walk operations.\n *\n * During the walk, since the requestedPath array is updated after we attempt to\n * merge/insert nodes during a walk (it reflects the inserted node's parent branch)\n * we need to reconstitute a path from it.\n *\n * @param  {Array} currentPath The current requestedPath state, during the walk\n * @param  {String} key        The current key value, during the walk\n * @return {Array} A new array, with the path which represents the node we're about\n * to insert\n */\nmodule.exports = function reconstructPath(currentPath, key) {\n\n  var path = currentPath.slice(0, currentPath.depth);\n  path[path.length] = key;\n\n  return path;\n};\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar transferBackReferences = __webpack_require__(74);\nvar removeNodeAndDescendants = __webpack_require__(26);\nvar updateBackReferenceVersions = __webpack_require__(28);\n\nmodule.exports = function replaceNode(node, replacement, parent, key, lru, version) {\n    if (node === replacement) {\n        return node;\n    } else if (!(!node || typeof node !== 'object')) {\n        transferBackReferences(node, replacement);\n        removeNodeAndDescendants(node, parent, key, lru);\n        updateBackReferenceVersions(replacement, version);\n    }\n\n    parent[key] = replacement;\n    return replacement;\n};\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isArray = Array.isArray;\nvar now = __webpack_require__(53);\nvar clone = __webpack_require__(91);\nvar getSize = __webpack_require__(8);\nvar getExpires = __webpack_require__(92);\nvar expiresNow = __webpack_require__(31);\n\nvar atomSize = 50;\n\nmodule.exports = function wrapNode(nodeArg, typeArg, value) {\n\n    var size = 0;\n    var node = nodeArg;\n    var type = typeArg;\n\n    if (type) {\n        var modelCreated = node[\"\u001eƒ_wrapped_value\"];\n        node = clone(node);\n        size = getSize(node);\n        node.$type = type;\n        node[\"\u001eƒ_prev\"] = undefined;\n        node[\"\u001eƒ_next\"] = undefined;\n        node[\"\u001eƒ_wrapped_value\"] = modelCreated || false;\n    } else {\n        node = { $type: \"atom\", value: value };\n        node[\"\u001eƒ_prev\"] = undefined;\n        node[\"\u001eƒ_next\"] = undefined;\n        node[\"\u001eƒ_wrapped_value\"] = true;\n    }\n\n    if (value == null) {\n        size = atomSize + 1;\n    } else if (size == null || size <= 0) {\n        switch (typeof value) {\n            case 'object':\n                if (isArray(value)) {\n                    size = atomSize + value.length;\n                } else {\n                    size = atomSize + 1;\n                }\n                break;\n            case 'string':\n                size = atomSize + value.length;\n                break;\n            default:\n                size = atomSize + 1;\n                break;\n        }\n    }\n\n    var expires = getExpires(node);\n\n    if (typeof expires === 'number' && expires < expiresNow) {\n        node.$expires = now() + expires * -1;\n    }\n\n    node.$size = size;\n\n    return node;\n};\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar createErrorClass = __webpack_require__(4);\n\nmodule.exports = createErrorClass('CircularReferenceError', function (referencePath) {\n    this.message = 'Encountered circular reference ' + JSON.stringify(referencePath);\n});\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar createErrorClass = __webpack_require__(4);\nvar MESSAGE = 'An exception was thrown when making a request';\n\n/**\n * InvalidSourceError happens when a dataSource syncronously throws\n * an exception during a get/set/call operation.\n *\n * @param {Error} error - The error that was thrown.\n * @private\n */\nmodule.exports = createErrorClass('InvalidSourceError', function (error) {\n  this.message = MESSAGE + ':\\n\\t' + error;\n});\n\n/***/ },\n/* 48 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = function lruSplice(root, object) {\n\n    // Its in the cache.  Splice out.\n    var prev = object[\"\u001eƒ_prev\"];\n    var next = object[\"\u001eƒ_next\"];\n    if (next) {\n        next[\"\u001eƒ_prev\"] = prev;\n    }\n    if (prev) {\n        prev[\"\u001eƒ_next\"] = next;\n    }\n    object[\"\u001eƒ_prev\"] = object[\"\u001eƒ_next\"] = undefined;\n\n    if (object === root[\"\u001eƒ_head\"]) {\n        root[\"\u001eƒ_head\"] = next;\n    }\n    if (object === root[\"\u001eƒ_tail\"]) {\n        root[\"\u001eƒ_tail\"] = prev;\n    }\n};\n\n/***/ },\n/* 49 */\n/***/ function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {var Subscriber = __webpack_require__(13);\nvar Subscription = __webpack_require__(14);\nvar $$observable = __webpack_require__(95).default;\n\nmodule.exports = Source;\n\nfunction Source(subscribe) {\n    if (!subscribe) {\n        return;\n    }\n    switch (typeof subscribe) {\n        case 'object':\n            this.source = subscribe;\n            break;\n        case 'function':\n            this.source = { subscribe: subscribe };\n            break;\n    }\n}\n\nSource.prototype[$$observable] = function () {\n    return this;\n};\n\nSource.prototype.operator = function (destination) {\n    return this.subscribe(destination);\n};\n\n// Unused\n// Source.prototype.lift = function(operator, source) {\n//     source = new Source(source || this);\n//     source.operator = operator;\n//     source._promise = this._promise;\n//     return source;\n// }\n\nSource.prototype.subscribe = function (destination, x, y) {\n    return new Subscription([this.operator.call(this.source, !(destination instanceof Subscriber) ? new Subscriber(destination, x, y) : destination)]);\n};\n\nSource.prototype.then = function then(onNext, onError) {\n    /* global Promise */\n    var source = this;\n    if (!this._promise) {\n        this._promise = new global['Promise'](function (resolve, reject) {\n            var values = [],\n                rejected = false;\n            source.subscribe({\n                next: function (value) {\n                    values[values.length] = value;\n                },\n                error: function (errors) {\n                    (rejected = true) && reject(errors);\n                },\n                complete: function () {\n                    !rejected && resolve(values.length <= 1 ? values[0] : values);\n                }\n            });\n        });\n    }\n    return this._promise.then(onNext, onError);\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32)))\n\n/***/ },\n/* 50 */\n/***/ function(module, exports) {\n\nvar empty = {\n    dispose: function () {},\n    unsubscribe: function () {}\n};\n\nfunction ImmediateScheduler() {}\n\nImmediateScheduler.prototype.schedule = function schedule(action) {\n    action();\n    return empty;\n};\n\nmodule.exports = ImmediateScheduler;\n\n/***/ },\n/* 51 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(5);\n\nmodule.exports = function isJSONEnvelope(envelope) {\n    return isObject(envelope) && 'json' in envelope;\n};\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isArray = Array.isArray;\nvar isObject = __webpack_require__(5);\n\nmodule.exports = function isJSONGraphEnvelope(envelope) {\n    return isObject(envelope) && isArray(envelope.paths) && (isObject(envelope.jsonGraph) || isObject(envelope.jsong) || isObject(envelope.json) || isObject(envelope.values) || isObject(envelope.value));\n};\n\n/***/ },\n/* 53 */\n/***/ function(module, exports) {\n\nmodule.exports = Date.now;\n\n/***/ },\n/* 54 */\n/***/ function(module, exports) {\n\nmodule.exports = 1;\n\n/***/ },\n/* 55 */\n/***/ function(module, exports) {\n\nmodule.exports = require(\"@graphistry/falcor-path-utils/lib/collapse\");\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar Model = __webpack_require__(57);\nvar FalcorJSON = __webpack_require__(2);\n\nfunction falcor(opts) {\n    if (!(this instanceof Model)) {\n        return new Model(opts);\n    }\n    Model.call(this, opts);\n}\n\nfalcor.prototype = Object.create(Model.prototype);\n\nfalcor['Model'] = Model;\nfalcor['FalcorJSON'] = FalcorJSON;\nfalcor['toProps'] = FalcorJSON.prototype.toProps;\n\nmodule.exports = falcor;\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar Call = __webpack_require__(85);\nvar ModelRoot = __webpack_require__(59);\nvar FalcorJSON = __webpack_require__(2);\nvar ModelDataSourceAdapter = __webpack_require__(58);\nvar TimeoutScheduler = __webpack_require__(89);\nvar ImmediateScheduler = __webpack_require__(50);\nvar collapse = __webpack_require__(55);\n\nvar getSize = __webpack_require__(8);\nvar isObject = __webpack_require__(5);\nvar isJSONEnvelope = __webpack_require__(51);\nvar getCachePosition = __webpack_require__(9);\nvar isJSONGraphEnvelope = __webpack_require__(52);\n\nvar setCache = __webpack_require__(18);\nvar setJSONGraphs = __webpack_require__(17);\n\nvar getJSON = __webpack_require__(21);\nvar getCache = __webpack_require__(69);\nvar getJSONGraph = __webpack_require__(22);\n\nmodule.exports = Model;\n\n/**\n * This callback is invoked when the Model's cache is changed.\n * @callback Model~onChange\n */\n\n/**\n* This function is invoked on every JSONGraph Error retrieved from the DataSource. This function allows Error objects to be transformed before being stored in the Model's cache.\n* @callback Model~errorSelector\n* @param {Object} jsonGraphError - the JSONGraph Error object to transform before it is stored in the Model's cache.\n* @returns {Object} the JSONGraph Error object to store in the Model cache.\n*/\n\n/**\n* This function is invoked every time a value in the Model cache is about to be replaced with a new value. If the function returns true, the existing value is replaced with a new value and the version flag on all of the value's ancestors in the tree are incremented.\n* @callback Model~comparator\n* @param {Object} existingValue - the current value in the Model cache.\n* @param {Object} newValue - the value about to be set into the Model cache.\n* @returns {Boolean} the Boolean value indicating whether the new value and the existing value are equal.\n*/\n\n/**\n * A Model object is used to execute commands against a {@link JSONGraph} object. {@link Model}s can work with a local JSONGraph cache, or it can work with a remote {@link JSONGraph} object through a {@link DataSource}.\n * @constructor\n * @param {?Object} options - a set of options to customize behavior\n * @param {?DataSource} options.source - a data source to retrieve and manage the {@link JSONGraph}\n * @param {?JSONGraph} options.cache - initial state of the {@link JSONGraph}\n * @param {?number} options.maxSize - the maximum size of the cache. This value roughly correlates to item count (where itemCount = maxSize / 50). Each item by default is given a metadata `$size` of 50 (or its length when it's an array or string). You can get better control of falcor's memory usage by tweaking `$size`\n * @param {?number} options.collectRatio - the ratio of the maximum size to collect when the maxSize is exceeded\n * @param {?Model~errorSelector} options.errorSelector - a function used to translate errors before they are returned\n * @param {?Model~onChange} options.onChange - a function called whenever the Model's cache is changed\n * @param {?Model~comparator} options.comparator - a function called whenever a value in the Model's cache is about to be replaced with a new value.\n */\nfunction Model(opts) {\n\n    var options = opts || {};\n\n    this._node = options._node;\n    this._path = options._path || [];\n    this._source = options.source || options._source;\n    this._root = options._root || new ModelRoot(options, this);\n    this._recycleJSON = options.recycleJSON === true || options._recycleJSON;\n    this._scheduler = options.scheduler || options._scheduler || new ImmediateScheduler();\n\n    if (options._seed) {\n        this._recycleJSON = true;\n        this._seed = options._seed;\n        this._treatErrorsAsValues = true;\n    } else if (this._recycleJSON) {\n        this._treatErrorsAsValues = true;\n        this._seed = {};\n        this._seed.__proto__ = FalcorJSON.prototype;\n    }\n\n    this._boxed = options.boxed === true || options._boxed || false;\n    this._materialized = options.materialized === true || options._materialized || false;\n    this._treatErrorsAsValues = options.treatErrorsAsValues === true || options._treatErrorsAsValues || false;\n    this._allowFromWhenceYouCame = options.allowFromWhenceYouCame === true || options._allowFromWhenceYouCame || false;\n\n    if (options.cache) {\n        this.setCache(options.cache);\n    }\n}\n\nModel.prototype.constructor = Model;\n\n/**\n * The get method retrieves several {@link Path}s or {@link PathSet}s from a {@link Model}. The get method loads each value into a JSON object and returns in a ModelResponse.\n * @function\n * @param {...PathSet} path - the path(s) to retrieve\n * @return {ModelResponse.<JSONEnvelope>} - the requested data as JSON\n */\nModel.prototype.get = function get() {\n    var seed = this._seed;\n    if (!seed) {\n        seed = {};\n        seed.__proto__ = FalcorJSON.prototype;\n    }\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n    }\n\n    return new Call('get', this, args)._toJSON(seed, []);\n};\n\n/**\n * Sets the value at one or more places in the JSONGraph model. The set method accepts one or more {@link PathValue}s, each of which is a combination of a location in the document and the value to place there.  In addition to accepting  {@link PathValue}s, the set method also returns the values after the set operation is complete.\n * @function\n * @return {ModelResponse.<JSONEnvelope>} - an {@link Observable} stream containing the values in the JSONGraph model after the set was attempted\n */\nModel.prototype.set = function set() {\n    var seed = {};\n    seed.__proto__ = FalcorJSON.prototype;\n\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n    }\n\n    return new Call('set', this, args)._toJSON(seed, []);\n};\n\n/**\n * The preload method retrieves several {@link Path}s or {@link PathSet}s from a {@link Model} and loads them into the Model cache.\n * @function\n * @param {...PathSet} path - the path(s) to retrieve\n * @return {ModelResponse.<JSONEnvelope>} - a ModelResponse that completes when the data has been loaded into the cache.\n */\nModel.prototype.preload = function preload() {\n    for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n    }\n\n    return new Call('get', this, args)._toJSON(null, []);\n};\n\n/**\n * Invokes a function in the JSON Graph.\n * @function\n * @param {Path} functionPath - the path to the function to invoke\n * @param {Array.<Object>} args - the arguments to pass to the function\n * @param {Array.<PathSet>} refPaths - the paths to retrieve from the JSON Graph References in the message returned from the function\n * @param {Array.<PathSet>} thisPaths - the paths to retrieve from function's this object after successful function execution\n * @return {ModelResponse.<JSONEnvelope> - a JSONEnvelope contains the values returned from the function\n */\n\nModel.prototype.call = function call() {\n    var seed = {};\n    seed.__proto__ = FalcorJSON.prototype;\n\n    for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n    }\n\n    return new Call('call', this, args)._toJSON(seed, []);\n};\n\n/**\n * The invalidate method synchronously removes several {@link Path}s or {@link PathSet}s from a {@link Model} cache.\n * @function\n * @param {...PathSet} path - the  paths to remove from the {@link Model}'s cache.\n */\nModel.prototype.invalidate = function invalidate() {\n    for (var _len5 = arguments.length, args = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n    }\n\n    return new Call('invalidate', this, args)._toJSON(null, null).then();\n};\n\n/**\n * Returns a new {@link Model} bound to a location within the {@link\n * JSONGraph}. The bound location is never a {@link Reference}: any {@link\n * Reference}s encountered while resolving the bound {@link Path} are always\n * replaced with the {@link Reference}s target value. For subsequent operations\n * on the {@link Model}, all paths will be evaluated relative to the bound\n * path. Deref allows you to:\n * - Expose only a fragment of the {@link JSONGraph} to components, rather than\n *   the entire graph\n * - Hide the location of a {@link JSONGraph} fragment from components\n * - Optimize for executing multiple operations and path looksup at/below the\n *   same location in the {@link JSONGraph}\n * @method\n * @param {Object} responseObject - an object previously retrieved from the\n * Model\n * @return {Model} - the dereferenced {@link Model}\n * @example\nvar Model = falcor.Model;\nvar model = new Model({\n  cache: {\n    users: [\n      Model.ref(['usersById', 32])\n    ],\n    usersById: {\n      32: {\n        name: 'Steve',\n        surname: 'McGuire'\n      }\n    }\n  }\n});\n\nmodel.\n    get(['users', 0, 'name']).\n    subscribe(function(jsonEnv) {\n        var userModel = model.deref(jsonEnv.json.users[0]);\n        console.log(model.getPath());\n        console.log(userModel.getPath());\n   });\n});\n\n// prints the following:\n// []\n// ['usersById', 32] - because userModel refers to target of reference at ['users', 0]\n */\nModel.prototype.deref = __webpack_require__(78);\n\n/**\n * A dereferenced model can become invalid when the reference from which it was\n * built has been removed/collected/expired/etc etc.  To fix the issue, a from\n * the parent request should be made (no parent, then from the root) for a valid\n * path and re-dereference performed to update what the model is bound too.\n *\n * @method\n * @private\n * @return {Boolean} - If the currently deref'd model is still considered a\n * valid deref.\n */\nModel.prototype._hasValidParentReference = __webpack_require__(77);\n\n/**\n * Get data for a single {@link Path}.\n * @param {Path} path - the path to retrieve\n * @return {Observable.<*>} - the value for the path\n * @example\n var model = new falcor.Model({source: new falcor.HttpDataSource('/model.json') });\n\n model.\n     getValue('user.name').\n     subscribe(function(name) {\n         console.log(name);\n     });\n\n // The code above prints 'Jim' to the console.\n */\nModel.prototype.getValue = function getValue(path) {\n    return new Call('get', this, [path])._toJSON({}, []).lift(function (subscriber) {\n        return this.subscribe({\n            onNext: function (data) {\n                var depth = -1;\n                var x = data.json;\n                var length = path.length;\n                while (x && !x.$type && ++depth < length) {\n                    x = x[path[depth]];\n                }\n                subscriber.onNext(x);\n            },\n            onError: subscriber.onError.bind(subscriber),\n            onCompleted: subscriber.onCompleted.bind(subscriber)\n        });\n    });\n};\n\n/**\n * Set value for a single {@link Path}.\n * @param {Path} path - the path to set\n * @param {Object} value - the value to set\n * @return {Observable.<*>} - the value for the path\n * @example\n var model = new falcor.Model({source: new falcor.HttpDataSource('/model.json') });\n\n model.\n     setValue('user.name', 'Jim').\n     subscribe(function(name) {\n         console.log(name);\n     });\n\n // The code above prints 'Jim' to the console.\n */\nModel.prototype.setValue = function setValue(path, value) {\n    path = arguments.length === 1 ? path.path : path;\n    value = arguments.length === 1 ? path : { path: path, value: value };\n    return new Call('set', this, [value])._toJSON({}, []).lift(function (subscriber) {\n        return this.subscribe({\n            onNext: function (data) {\n                var depth = -1;\n                var x = data.json;\n                var length = path.length;\n                while (x && !x.$type && ++depth < length) {\n                    x = x[path[depth]];\n                }\n                subscriber.onNext(x);\n            },\n            onError: subscriber.onError.bind(subscriber),\n            onCompleted: subscriber.onCompleted.bind(subscriber)\n        });\n    });\n};\n\n/**\n * Set the local cache to a {@link JSONGraph} fragment. This method can be a useful way of mocking a remote document, or restoring the local cache from a previously stored state.\n * @param {JSONGraph} jsonGraph - the {@link JSONGraph} fragment to use as the local cache\n */\nModel.prototype.setCache = function modelSetCache(cacheOrJSONGraphEnvelope) {\n\n    var modelRoot = this._root;\n    var cache = modelRoot.cache;\n\n    if (cacheOrJSONGraphEnvelope !== cache) {\n\n        var options = {\n            _path: [],\n            _boxed: false,\n            _root: modelRoot,\n            _materialized: false,\n            _treatErrorsAsValues: false\n        };\n\n        modelRoot.cache = this._node = {};\n\n        if (typeof cache !== 'undefined') {\n            modelRoot.expired = [];\n            modelRoot[\"\u001eƒ_head\"] = undefined;\n            modelRoot[\"\u001eƒ_tail\"] = undefined;\n            if (this._recycleJSON) {\n                this._seed = {};\n                this._seed.__proto__ = FalcorJSON.prototype;\n            }\n        }\n\n        var results, rootOnChangeHandler;\n        if (isJSONGraphEnvelope(cacheOrJSONGraphEnvelope)) {\n            results = setJSONGraphs(options, [cacheOrJSONGraphEnvelope]);\n        } else if (isJSONEnvelope(cacheOrJSONGraphEnvelope)) {\n            results = setCache(options, [cacheOrJSONGraphEnvelope]);\n        } else if (isObject(cacheOrJSONGraphEnvelope)) {\n            results = setCache(options, [{ json: cacheOrJSONGraphEnvelope }]);\n        }\n\n        if (results) {\n            // performs promotion without producing output.\n            if (results[0].length) {\n                getJSON(options, results[0], null, false, false);\n            }\n            if (results[2] && (rootOnChangeHandler = modelRoot.onChange)) {\n                rootOnChangeHandler();\n            }\n        }\n    } else if (typeof cache === 'undefined') {\n        this._root.cache = {};\n    }\n    return this;\n};\n\n/**\n * Get the local {@link JSONGraph} cache. This method can be a useful to store the state of the cache.\n * @param {...Array.<PathSet>} [pathSets] - The path(s) to retrieve. If no paths are specified, the entire {@link JSONGraph} is returned.\n * @return {JSONGraph} all of the {@link JSONGraph} data in the {@link Model} cache.\n * @example\n // Storing the boxshot of the first 10 titles in the first 10 genreLists to local storage.\n localStorage.setItem('cache', JSON.stringify(model.getCache('genreLists[0...10][0...10].boxshot')));\n */\nModel.prototype.getCache = function _getCache() {\n\n    var paths = Array.prototype.slice.call(arguments, 0);\n\n    if (paths.length === 0) {\n        return getCache(this._root.cache);\n    }\n\n    var seed = {};\n    seed.__proto__ = FalcorJSON.prototype;\n\n    var env = getJSONGraph({\n        _path: [],\n        _root: this._root,\n        _boxed: this._boxed,\n        _materialized: this._materialized,\n        _treatErrorsAsValues: this._treatErrorsAsValues\n    }, paths, seed).data;\n\n    env.paths = collapse(paths);\n\n    return env;\n};\n\n/**\n * Retrieves a number which is incremented every single time a value is changed underneath the Model or the object at an optionally-provided Path beneath the Model.\n * @param {Path?} path - a path at which to retrieve the version number\n * @return {Number} a version number which changes whenever a value is changed underneath the Model or provided Path\n */\nModel.prototype.getVersion = function getVersion(path) {\n    path = path || [];\n    if (Array.isArray(path) === false) {\n        throw new Error('Model#getVersion must be called with an Array path.');\n    }\n    if (this._path.length) {\n        path = this._path.concat(path);\n    }\n    return this._getVersion(this, path);\n};\n\n/* eslint-disable guard-for-in */\nModel.prototype._clone = function cloneModel(opts) {\n    var clone = new Model(this);\n    if (opts) {\n        for (var key in opts) {\n            var value = opts[key];\n            if (value === 'delete') {\n                delete clone[key];\n            } else if (key === '_path') {\n                clone[key] = value;\n                if (false === opts.hasOwnProperty('_node')) {\n                    delete clone['_node'];\n                }\n            } else {\n                clone[key] = value;\n            }\n        }\n    }\n    if (clone._path.length > 0) {\n        clone.setCache = void 0;\n    }\n    return clone;\n};\n/* eslint-enable */\n\n/**\n * Returns a clone of the {@link Model} that enables batching. Within the configured time period, paths for get operations are collected and sent to the {@link DataSource} in a batch. Batching can be more efficient if the {@link DataSource} access the network, potentially reducing the number of HTTP requests to the server.\n * @param {?Scheduler|number} schedulerOrDelay - Either a {@link Scheduler} that determines when to send a batch to the {@link DataSource}, or the number in milliseconds to collect a batch before sending to the {@link DataSource}. If this parameter is omitted, then batch collection ends at the end of the next tick.\n * @return {Model} a Model which schedules a batch of get requests to the DataSource.\n */\nModel.prototype.batch = function batch(schedulerOrDelay) {\n\n    var scheduler;\n\n    if (typeof schedulerOrDelay === 'number') {\n        scheduler = new TimeoutScheduler(Math.round(Math.abs(schedulerOrDelay)));\n    } else if (!schedulerOrDelay) {\n        scheduler = new TimeoutScheduler(1);\n    } else if (typeof schedulerOrDelay.schedule === 'function') {\n        scheduler = schedulerOrDelay;\n    } else if (typeof schedulerOrDelay === 'function') {\n        scheduler = { scheudle: schedulerOrDelay };\n    }\n\n    return this._clone({ _scheduler: scheduler });\n};\n\n/**\n * Returns a clone of the {@link Model} that disables batching. This is the default mode. Each get operation will be executed on the {@link DataSource} separately.\n * @name unbatch\n * @memberof Model.prototype\n * @function\n * @return {Model} a {@link Model} that batches requests of the same type and sends them to the data source together\n */\nModel.prototype.unbatch = function unbatch() {\n    return this._clone({ _scheduler: new ImmediateScheduler() });\n};\n\n/**\n * Returns a clone of the {@link Model} that treats errors as values. Errors will be reported in the same callback used to report data. Errors will appear as objects in responses, rather than being sent to the {@link Observable~onErrorCallback} callback of the {@link ModelResponse}.\n * @return {Model}\n */\nModel.prototype.treatErrorsAsValues = function treatErrorsAsValues() {\n    return this._clone({ _treatErrorsAsValues: true });\n};\n\n/**\n * Adapts a Model to the {@link DataSource} interface.\n * @return {DataSource}\n * @example\nvar model =\n    new falcor.Model({\n        cache: {\n            user: {\n                name: 'Steve',\n                surname: 'McGuire'\n            }\n        }\n    }),\n    proxyModel = new falcor.Model({ source: model.asDataSource() });\n\n// Prints 'Steve'\nproxyModel.getValue('user.name').\n    then(function(name) {\n        console.log(name);\n    });\n */\nModel.prototype.asDataSource = function asDataSource() {\n    return new ModelDataSourceAdapter(this);\n};\n\nModel.prototype._materialize = function materialize() {\n    return this._clone({\n        _materialized: true\n    });\n};\n\nModel.prototype._dematerialize = function dematerialize() {\n    return this._clone({\n        _materialized: 'delete'\n    });\n};\n\n/**\n * Returns a clone of the {@link Model} that boxes values returning the wrapper ({@link Atom}, {@link Reference}, or {@link Error}), rather than the value inside it. This allows any metadata attached to the wrapper to be inspected.\n * @return {Model}\n */\nModel.prototype.boxValues = function boxValues() {\n    return this._clone({\n        _boxed: true\n    });\n};\n\n/**\n * Returns a clone of the {@link Model} that unboxes values, returning the value inside of the wrapper ({@link Atom}, {@link Reference}, or {@link Error}), rather than the wrapper itself. This is the default mode.\n * @return {Model}\n */\nModel.prototype.unboxValues = function unboxValues() {\n    return this._clone({\n        _boxed: 'delete'\n    });\n};\n\n/**\n * Returns a clone of the {@link Model} that only uses the local {@link JSONGraph} and never uses a {@link DataSource} to retrieve missing paths.\n * @return {Model}\n */\nModel.prototype.withoutDataSource = function withoutDataSource() {\n    return this._clone({\n        _source: 'delete'\n    });\n};\n\n/* implement inspect method for node's inspect utility */\nModel.prototype.inspect = function inspect() {\n    return '{ v: ' + this.getVersion() + ' p: [' + this._path.join(', ') + '] }';\n};\n\nModel.prototype.toJSON = function toJSON() {\n    return {\n        $type: 'ref',\n        value: this.getPath()\n    };\n};\n\n/**\n * Returns the {@link Path} to the object within the JSON Graph that this Model references.\n * @return {Path}\n * @example\nvar Model = falcor.Model;\nvar model = new Model({\n  cache: {\n    users: [\n      Model.ref(['usersById', 32])\n    ],\n    usersById: {\n      32: {\n        name: 'Steve',\n        surname: 'McGuire'\n      }\n    }\n  }\n});\n\nmodel.\n    get(['users', 0, 'name']).\n    subscribe(function(jsonEnv) {\n        var userModel = model.deref(jsonEnv.json.users[0]);\n        console.log(model.getPath());\n        console.log(userModel.getPath());\n   });\n});\n\n// prints the following:\n// []\n// ['usersById', 32] - because userModel refers to target of reference at ['users', 0]\n */\nModel.prototype.getPath = function getPath() {\n    return this._path.slice(0);\n};\n\n/**\n * This one is actually private.  I would not use this without talking to\n * jhusain, sdesai, or michaelbpaulson (github).\n * @private\n */\nModel.prototype._fromWhenceYouCame = function fromWhenceYouCame(allow) {\n    return this._clone({\n        _allowFromWhenceYouCame: allow === undefined ? true : allow\n    });\n};\n\nModel.prototype._optimizePath = function _optimizePath(path) {\n    var node = getCachePosition(this._root.cache, path);\n    var abs_path = node && node[\"\u001eƒ_abs_path\"] || [];\n    return abs_path.slice(0);\n};\n\nModel.prototype._getVersion = __webpack_require__(70);\nModel.prototype._getPathValuesAsPathMap = getJSON;\nModel.prototype._getPathValuesAsJSONG = getJSONGraph;\n\nModel.prototype._setPathValues = __webpack_require__(27);\nModel.prototype._setPathMaps = __webpack_require__(18);\nModel.prototype._setJSONGs = __webpack_require__(17);\nModel.prototype._setCache = __webpack_require__(18);\n\nModel.prototype._invalidatePathValues = __webpack_require__(25);\nModel.prototype._invalidatePathMaps = __webpack_require__(41);\n\n/***/ },\n/* 58 */\n/***/ function(module, exports) {\n\nfunction ModelDataSourceAdapter(model) {\n    this._model = model\n    // .boxValues()\n    ._materialize().treatErrorsAsValues();\n}\n\nModelDataSourceAdapter.prototype.get = function get(pathSets) {\n    return this._model.get.apply(this._model, pathSets)._toJSONG();\n};\n\nModelDataSourceAdapter.prototype.set = function set(jsongResponse) {\n    return this._model.set(jsongResponse)._toJSONG();\n};\n\nModelDataSourceAdapter.prototype.call = function call(path, args, suffixes, paths) {\n    return this._model.call.apply(this._model, [path, args, suffixes].concat(paths))._toJSONG();\n};\n\nmodule.exports = ModelDataSourceAdapter;\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar functionTypeof = 'function';\nvar Requests = __webpack_require__(86);\nvar getTimestamp = __webpack_require__(30);\n\nfunction ModelRoot(o, model) {\n\n    var options = o || {};\n\n    this.cache = {};\n    this.version = -1;\n    this.syncRefCount = 0;\n    this.maxRetryCount = 10;\n    this.topLevelModel = model;\n    this.requests = new Requests(this);\n    this.expired = options.expired || [];\n\n    this.collectRatio = 0.75;\n    this.maxSize = Math.pow(2, 53) - 1;\n\n    if (typeof options.collectRatio === 'number') {\n        this.collectRatio = options.collectRatio;\n    }\n\n    if (typeof options.maxSize === 'number') {\n        this.maxSize = options.maxSize;\n    }\n\n    if (typeof options.comparator === functionTypeof) {\n        this.comparator = options.comparator;\n    }\n\n    if (typeof options.branchSelector === functionTypeof) {\n        this.branchSelector = options.branchSelector;\n    }\n\n    if (typeof options.errorSelector === functionTypeof) {\n        this.errorSelector = options.errorSelector;\n    }\n\n    if (typeof options.branchSelector === functionTypeof) {\n        this.branchSelector = options.branchSelector;\n    }\n\n    if (typeof options.onChange === functionTypeof) {\n        this.onChange = options.onChange;\n    }\n\n    if (typeof options.onChangesCompleted === functionTypeof) {\n        this.onChangesCompleted = options.onChangesCompleted;\n    }\n}\n\nfunction defaultCompare(node, message) {\n    var cType = node && node.$type;\n    var mType = message && message.$type;\n    if (cType) {\n        // If the cache has a type, but the message is a primitive,\n        // the message might be the primitive response from the datasource.\n        // If so, return true, so we don't update the back-reference versions.\n        if (!mType) {\n            return node.value === message;\n        }\n        // If the message is older than the cache node, then isDistinct = false\n        else if (getTimestamp(message) < getTimestamp(node) === true) {\n                return true; // isDistinct = false\n            }\n        // Otherwise they are the same if all the following fields are the same.\n        return !(cType !== mType || node.value !== message.value || node.$expires !== message.$expires);\n    }\n    // If cache doesn't have a type but the message\n    // does, they must be different.\n    else if (mType) {\n            return false;\n        }\n    return node === message;\n}\n\nModelRoot.comparator = ModelRoot.prototype.comparator = defaultCompare;\n\nmodule.exports = ModelRoot;\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar getJSON = __webpack_require__(21);\nvar getJSONGraph = __webpack_require__(22);\n\nmodule.exports = { json: json, jsonGraph: jsonGraph };\n\nfunction json(model, _args, data, progressive) {\n    var hasValue = false;\n    if (!_args) {\n        return { missing: false, hasValue: false };\n    }\n    var args = [].concat(_args[1] || []);\n    var suffixes = [].concat(_args[2] || []);\n    var thisPaths = [].concat(_args[3] || []);\n    var path = (model._path || []).concat(_args[0] || []);\n    if (progressive && thisPaths && thisPaths.length) {\n        hasValue = getJSON(model, thisPaths, data, progressive, true).hasValue;\n    }\n    return {\n        data: data,\n        missing: true,\n        hasValue: hasValue,\n        fragments: [path, args, suffixes, thisPaths]\n    };\n}\n\nfunction jsonGraph(model, _args, data, progressive) {\n    var hasValue = false;\n    if (!_args) {\n        return { missing: false, hasValue: false };\n    }\n    var args = [].concat(_args[1] || []);\n    var suffixes = [].concat(_args[2] || []);\n    var thisPaths = [].concat(_args[3] || []);\n    var path = (model._path || []).concat(_args[0] || []);\n    if (progressive && thisPaths && thisPaths.length) {\n        hasValue = getJSONGraph({\n            _root: model._root,\n            _boxed: model._boxed,\n            _materialized: model._materialized,\n            _treatErrorsAsValues: model._treatErrorsAsValues\n        }, thisPaths, data, true, true).hasValue;\n    }\n    return {\n        data: data,\n        missing: true,\n        hasValue: hasValue,\n        fragments: [path, args, suffixes, thisPaths]\n    };\n}\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = {\n    json: __webpack_require__(34),\n    jsonGraph: __webpack_require__(37)\n};\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar clone = __webpack_require__(6);\n\nmodule.exports = onError;\n\nfunction onError(node, depth, results, requestedPath, fromReference, boxValues) {\n\n    var index = -1;\n    var length = depth + !!fromReference; // depth + 1 if fromReference === true\n    var errorPath = new Array(length);\n    var errorValue = !boxValues ? node.value : clone(node);\n\n    while (++index < length) {\n        errorPath[index] = requestedPath[index];\n    }\n\n    (results.errors || (results.errors = [])).push({\n        path: errorPath,\n        value: errorValue\n    });\n}\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar arr = new Array(2);\nvar typeofNumber = 'number';\nvar typeofObject = 'object';\nvar onValue = __webpack_require__(36);\nvar FalcorJSON = __webpack_require__(2);\nvar isExpired = __webpack_require__(0);\nvar onValueType = __webpack_require__(15);\nvar originalOnMissing = __webpack_require__(24);\nvar getReferenceTarget = __webpack_require__(35);\nvar onMaterialize = __webpack_require__(68);\nvar NullInPathError = __webpack_require__(3);\nvar InvalidKeySetError = __webpack_require__(11);\nvar getHashCode = __webpack_require__(101);\nvar flatBufferToPaths = __webpack_require__(100);\n\nmodule.exports = walkPathAndBuildOutput;\n\n/* eslint-disable camelcase */\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction walkPathAndBuildOutput(root, node, json, path, depth, seed, results, requestedPath, optimizedPath, optimizedLength, fromReference, referenceContainer, modelRoot, expired, expireImmediate, branchSelector, boxValues, materialized, hasDataSource, treatErrorsAsValues, allowFromWhenceYouCame) {\n\n    var type, refTarget;\n\n    // ============ Check for base cases ================\n\n    // If there's nowhere to go, we've reached a terminal node, or hit\n    // the end of the path, stop now. Either build missing paths or report the value.\n    if (undefined === node || undefined !== (type = node.$type) || undefined === path) {\n        arr[1] = hasDataSource && node === undefined;\n        arr[0] = onValueType(node, type, json, path, depth, seed, results, requestedPath, depth, optimizedPath, optimizedLength, fromReference, modelRoot, expired, expireImmediate, branchSelector, boxValues, materialized, hasDataSource, treatErrorsAsValues, onValue, onMissing, onMaterialize);\n        return arr;\n    }\n\n    var f_meta,\n        f_old_keys,\n        f_new_keys,\n        f_code = '';\n\n    var next,\n        nextKey,\n        keyset,\n        keyIsRange,\n        keys = path['$keys'],\n        nodeAbsPath,\n        jsonAbsPath,\n        nextDepth = depth + 1,\n        rangeEnd,\n        nextJSON,\n        nextReferenceContainer,\n        nextOptimizedLength,\n        nextOptimizedPath,\n        optimizedLengthNext = optimizedLength + 1,\n        refContainerAbsPath,\n        refContainerRefPath;\n\n    if (allowFromWhenceYouCame && referenceContainer) {\n        refContainerRefPath = referenceContainer.value;\n        refContainerAbsPath = referenceContainer[\"\u001eƒ_abs_path\"];\n    }\n\n    if (!json || typeofObject !== typeof json) {\n        json = undefined;\n    } else if (f_meta = json[\"\u001eƒ_meta\"]) {\n\n        nodeAbsPath = node[\"\u001eƒ_abs_path\"];\n        jsonAbsPath = f_meta[\"abs_path\"];\n\n        if (!branchSelector && !(json instanceof FalcorJSON)) {\n            json.__proto__ = {};\n            json.__proto__[\"\u001eƒ_meta\"] = f_meta;\n            json.__proto__.__proto__ = FalcorJSON.prototype;\n        }\n\n        if (nodeAbsPath !== jsonAbsPath) {\n            f_meta['$code'] = '__loading__';\n            f_meta[\"abs_path\"] = nodeAbsPath;\n            f_meta[\"version\"] = node[\"\u001eƒ_version\"];\n            f_meta[\"deref_to\"] = refContainerRefPath;\n            f_meta[\"deref_from\"] = refContainerAbsPath;\n            if (f_old_keys = f_meta[\"keys\"]) {\n                f_meta[\"keys\"] = Object.create(null);\n                for (nextKey in f_old_keys) {\n                    if (f_old_keys[nextKey]) {\n                        delete json[nextKey];\n                    }\n                }\n            }\n            arr[0] = json;\n            arr[1] = true;\n            return arr;\n        } else if (!(f_meta[\"version\"] !== node[\"\u001eƒ_version\"] || f_meta['$code'] !== path['$code'])) {\n            results.hasValue = true;\n            arr[0] = json;\n            arr[1] = false;\n            return arr;\n        }\n\n        f_old_keys = f_meta[\"keys\"];\n        f_meta[\"abs_path\"] = nodeAbsPath;\n        f_meta[\"version\"] = node[\"\u001eƒ_version\"];\n        f_meta[\"deref_to\"] = refContainerRefPath;\n        f_meta[\"deref_from\"] = refContainerAbsPath;\n    }\n\n    f_new_keys = Object.create(null);\n\n    var keysIndex = -1;\n    var keysLength = keys.length;\n    var nextPath,\n        nextPathKey,\n        hasMissingPath = false;\n\n    iteratingKeyset: while (++keysIndex < keysLength) {\n\n        keyset = keys[keysIndex];\n        nextPath = path[keysIndex];\n\n        // If `null` appears before the end of the path, throw an error.\n        // If `null` is at the end of the path, but the reference doesn't\n        // point to a sentinel value, throw an error.\n        //\n        // Inserting `null` at the end of the path indicates the target of a ref\n        // should be returned, rather than the ref itself. When `null` is the last\n        // key, the path is lengthened by one, ensuring that if a ref is encountered\n        // just before the `null` key, the reference is followed before terminating.\n        if (null === keyset) {\n            if (nextPath !== undefined) {\n                throw new NullInPathError();\n            }\n            f_code = '' + getHashCode('' + f_code + 'null');\n            continue;\n        }\n        // If the keyset is a primitive value, we've found our `nextKey`.\n        else if (typeofObject !== typeof keyset) {\n                nextKey = keyset;\n                rangeEnd = undefined;\n                keyIsRange = false;\n                nextPathKey = nextKey;\n            }\n            // If the Keyset isn't null or primitive, then it must be a Range.\n            else {\n                    rangeEnd = keyset.to;\n                    nextKey = keyset.from || 0;\n                    if (typeofNumber !== typeof rangeEnd) {\n                        rangeEnd = nextKey + (keyset.length || 0) - 1;\n                    }\n                    if (rangeEnd - nextKey < 0) {\n                        break iteratingKeyset;\n                    }\n                    keyIsRange = true;\n                    nextPathKey = '[' + nextKey + '..' + rangeEnd + ']';\n                }\n\n        // Now that we have the next key, step down one level in the cache.\n        do {\n            fromReference = false;\n            nextJSON = json && json[nextKey];\n            nextOptimizedPath = optimizedPath;\n            nextOptimizedLength = optimizedLengthNext;\n            nextReferenceContainer = referenceContainer;\n\n            next = node[nextKey];\n            requestedPath[depth] = nextKey;\n            optimizedPath[optimizedLength] = nextKey;\n\n            if (nextPath === undefined) {\n\n                arr = walkPathAndBuildOutput(root, next, nextJSON, nextPath, nextDepth, seed, results, requestedPath, nextOptimizedPath, nextOptimizedLength, fromReference, nextReferenceContainer, modelRoot, expired, expireImmediate, branchSelector, boxValues, materialized, hasDataSource, treatErrorsAsValues, allowFromWhenceYouCame);\n\n                if (!hasMissingPath && arr[1] === true) {\n                    hasMissingPath = true;\n                }\n\n                if ((nextJSON = arr[0]) === undefined && !materialized) {\n                    if (json && json.hasOwnProperty(nextKey)) {\n                        delete json[nextKey];\n                    }\n                    continue;\n                }\n            } else {\n                // If we encounter a ref, inline the reference target and continue\n                // evaluating the path.\n                if (next &&\n                // If the reference is expired, it will be invalidated and\n                // reported as missing in the next call to walkPath below.\n                next.$type === \"ref\" && !isExpired(next, expireImmediate)) {\n\n                    // Retrieve the reference target and next referenceContainer (if\n                    // this reference points to other references) and continue\n                    // following the path. If the reference resolves to a missing\n                    // path or leaf node, it will be handled in the next call to\n                    // walkPath.\n                    refTarget = getReferenceTarget(root, next, modelRoot, expireImmediate);\n\n                    next = refTarget[0];\n                    fromReference = true;\n                    nextOptimizedPath = refTarget[1];\n                    nextReferenceContainer = refTarget[2];\n                    nextOptimizedLength = nextOptimizedPath.length;\n                    refTarget[0] = refTarget[1] = refTarget[2] = undefined;\n                }\n\n                // Continue following the path\n\n                // Inspect the return value from the step and determine whether to\n                // create or write into the JSON branch at this level.\n                //\n                // 1. If the next node was a leaf value, nextJSON is the value.\n                // 2. If the next node was a missing path, nextJSON is undefined.\n                // 3. If the next node was a branch, then nextJSON will either be an\n                //    Object or undefined. If nextJSON is undefined, all paths under\n                //    this step resolved to missing paths. If it's an Object, then\n                //    at least one path resolved to a successful leaf value.\n                //\n                // This check defers creating branches until we see at least one\n                // cache hit. Otherwise, don't waste the cycles creating a branch\n                // if everything underneath is a cache miss.\n\n                arr = walkPathAndBuildOutput(root, next, nextJSON, nextPath, nextDepth, seed, results, requestedPath, nextOptimizedPath, nextOptimizedLength, fromReference, nextReferenceContainer, modelRoot, expired, expireImmediate, branchSelector, boxValues, materialized, hasDataSource, treatErrorsAsValues, allowFromWhenceYouCame);\n\n                if (!hasMissingPath && arr[1] === true) {\n                    hasMissingPath = true;\n                }\n\n                if ((nextJSON = arr[0]) === undefined) {\n                    if (json && json.hasOwnProperty(nextKey)) {\n                        delete json[nextKey];\n                    }\n                    continue;\n                }\n            }\n\n            // The json value will initially be undefined. If we're here,\n            // then at least one leaf value was encountered, so create a\n            // branch to contain it.\n            if (f_meta === undefined) {\n                f_meta = {};\n                f_meta[\"version\"] = node[\"\u001eƒ_version\"];\n                f_meta[\"abs_path\"] = node[\"\u001eƒ_abs_path\"];\n                f_meta[\"deref_to\"] = refContainerRefPath;\n                f_meta[\"deref_from\"] = refContainerAbsPath;\n                json = {};\n                json[\"\u001eƒ_meta\"] = f_meta;\n                json.__proto__ = FalcorJSON.prototype;\n                // Empower developers to instrument branch node creation by\n                // providing a custom function. If they do, delegate branch\n                // node creation to them.\n                if (branchSelector) {\n                    json = branchSelector(json);\n                } else {\n                    var tmp = json;\n                    json = {};\n                    json.__proto__ = tmp;\n                    tmp = undefined;\n                }\n            }\n\n            f_new_keys[nextKey] = true;\n            if (f_old_keys && nextKey in f_old_keys) {\n                f_old_keys[nextKey] = false;\n            }\n\n            // Set the reported branch or leaf into this branch.\n            json[nextKey] = nextJSON;\n        }\n        // Re-enter the inner loop and continue iterating the Range, or exit\n        // here if we encountered a Key.\n        while (keyIsRange && ++nextKey <= rangeEnd);\n\n        if (!hasMissingPath) {\n            f_code = '' + getHashCode('' + f_code + nextPathKey + (nextPath && nextPath['$code'] || ''));\n        }\n    }\n\n    if (hasMissingPath) {\n        f_code = '__loading__';\n    }\n\n    if (f_meta) {\n        f_meta['$code'] = f_code;\n        f_meta[\"keys\"] = f_new_keys;\n        if (f_old_keys) {\n            for (nextKey in f_old_keys) {\n                if (f_old_keys[nextKey]) {\n                    delete json[nextKey];\n                }\n            }\n        }\n    }\n\n    // `json` will be a branch if any cache hits, or undefined if all cache misses\n\n    arr[0] = json;\n    arr[1] = hasMissingPath;\n\n    return arr;\n}\n/* eslint-enable */\n\nfunction onMissing(path, depth, results, requestedPath, requestedLength, fromReference, optimizedPath, optimizedLength, reportMissing, reportMaterialized, json, branchSelector, boxValues, onMaterialize, modelRoot) {\n\n    if (reportMaterialized) {\n        return onMaterialize(json, path, depth, depth, branchSelector, boxValues, modelRoot, results, requestedPath, optimizedPath, optimizedLength, fromReference, reportMissing, onMissing);\n    }\n\n    var paths = path ? flatBufferToPaths(path) : [[]];\n    var rPath = requestedPath.slice(0, requestedLength);\n\n    return paths.forEach(function (restPath) {\n        requestedLength = depth + restPath.length;\n        return originalOnMissing(rPath.concat(restPath), depth, results, requestedPath, requestedLength, fromReference, optimizedPath, optimizedLength, reportMissing, false, json, branchSelector, boxValues, onMaterialize, modelRoot);\n    });\n}\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isArray = Array.isArray;\nvar typeofNumber = 'number';\nvar typeofObject = 'object';\nvar onValue = __webpack_require__(36);\nvar onMissing = __webpack_require__(24);\nvar FalcorJSON = __webpack_require__(2);\nvar onValueType = __webpack_require__(15);\nvar isExpired = __webpack_require__(0);\nvar onMaterialize = __webpack_require__(38);\nvar getReferenceTarget = __webpack_require__(35);\nvar NullInPathError = __webpack_require__(3);\nvar InvalidKeySetError = __webpack_require__(11);\nvar materializedAtom = __webpack_require__(20);\n\nmodule.exports = walkPathAndBuildOutput;\n\n/* eslint-disable camelcase */\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction walkPathAndBuildOutput(root, node, json, path, depth, seed, results, requestedPath, requestedLength, optimizedPath, optimizedLength, fromReference, referenceContainer, modelRoot, expired, expireImmediate, branchSelector, boxValues, materialized, hasDataSource, treatErrorsAsValues, allowFromWhenceYouCame) {\n\n    var type, refTarget;\n\n    // ============ Check for base cases ================\n\n    // If there's nowhere to go, we've reached a terminal node, or hit\n    // the end of the path, stop now. Either build missing paths or report the value.\n    if (node === undefined || (type = node.$type) || depth === requestedLength) {\n        return onValueType(node, type, json, path, depth, seed, results, requestedPath, requestedLength, optimizedPath, optimizedLength, fromReference, modelRoot, expired, expireImmediate, branchSelector, boxValues, materialized, hasDataSource, treatErrorsAsValues, onValue, onMissing, onMaterialize);\n    }\n\n    var f_meta;\n\n    var next,\n        nextKey,\n        keyset,\n        keyIsRange,\n        nextDepth = depth + 1,\n        rangeEnd,\n        keysOrRanges,\n        nextJSON,\n        nextReferenceContainer,\n        keysetIndex = -1,\n        keysetLength = 0,\n        nextOptimizedLength,\n        nextOptimizedPath,\n        optimizedLengthNext = optimizedLength + 1,\n        refContainerAbsPath,\n        refContainerRefPath;\n\n    keyset = path[depth];\n\n    // If `null` appears before the end of the path, throw an error.\n    // If `null` is at the end of the path, but the reference doesn't\n    // point to a sentinel value, throw an error.\n    //\n    // Inserting `null` at the end of the path indicates the target of a ref\n    // should be returned, rather than the ref itself. When `null` is the last\n    // key, the path is lengthened by one, ensuring that if a ref is encountered\n    // just before the `null` key, the reference is followed before terminating.\n    if (null === keyset) {\n        if (nextDepth < requestedLength) {\n            throw new NullInPathError();\n        }\n        return json;\n    }\n\n    if (allowFromWhenceYouCame && referenceContainer) {\n        refContainerRefPath = referenceContainer.value;\n        refContainerAbsPath = referenceContainer[\"\u001eƒ_abs_path\"];\n    }\n\n    if (!json || typeofObject !== typeof json) {\n        json = undefined;\n    } else if (f_meta = json[\"\u001eƒ_meta\"]) {\n        f_meta[\"version\"] = node[\"\u001eƒ_version\"];\n        f_meta[\"abs_path\"] = node[\"\u001eƒ_abs_path\"];\n        f_meta[\"deref_to\"] = refContainerRefPath;\n        f_meta[\"deref_from\"] = refContainerAbsPath;\n    }\n\n    // Iterate over every key in the keyset. This loop is perhaps a bit clever,\n    // but we do it this way because this is a performance-sensitive code path.\n    // This loop simulates a recursive function if we encounter a Keyset that\n    // contains Keys or Ranges. This is accomplished by a nifty dance between an\n    // outer loop and an inner loop.\n    //\n    // The outer loop is responsible for identifying if the value at this depth\n    // is a Key, Range, or Keyset. If it encounters a Keyset, the `keysetIndex`,\n    // `keysetLength`, and `keysOrRanges` variables are assigned and the outer\n    // loop restarts. If it encounters a Key or Range, `nextKey`, `keyIsRange`,\n    // and `rangeEnd` are assigned values which signal whether the inner loop\n    // should iterate a Range or exit after the first run.\n    //\n    // The inner loop steps `nextKey` one level down in the cache. If a Range\n    // was encountered in the outer loop, the inner loop will iterate until the\n    // Range has been exhausted. If a Key was encountered, the inner loop exits\n    // after the first execution.\n    //\n    // After the inner loop exits, the outer loop iterates the `keysetIndex`\n    // until the Keyset is exhausted. `keysetIndex` and `keysetLength` are\n    // initialized to -1 and 0 respectively, so if a Keyset wasn't encountered\n    // at this depth in the path, then the outer loop exits after one execution.\n\n    iteratingKeyset: do {\n\n        // If the keyset is a primitive value, we've found our `nextKey`.\n        if (typeofObject !== typeof keyset) {\n            nextKey = keyset;\n            rangeEnd = undefined;\n            keyIsRange = false;\n        }\n        // If we encounter a Keyset, either iterate through the Keys and Ranges,\n        // or throw an error if we're already iterating a Keyset. Keysets cannot\n        // contain other Keysets.\n        else if (isArray(keyset)) {\n                // If we've already encountered an Array keyset, throw an error.\n                if (keysOrRanges !== undefined) {\n                    throw new InvalidKeySetError(path, keysOrRanges);\n                }\n                keysetIndex = 0;\n                keysOrRanges = keyset;\n                keysetLength = keyset.length;\n                // If an Array of keys or ranges is empty, terminate the graph walk\n                // and return the json constructed so far. An example of an empty\n                // Keyset is: ['lolomo', [], 'summary']. This should short circuit\n                // without building missing paths.\n                if (0 === keysetLength) {\n                    break iteratingKeyset;\n                }\n                // Assign `keyset` to the first value in the Keyset. Re-entering the\n                // outer loop mimics a singly-recursive function call.\n                keyset = keysOrRanges[keysetIndex];\n                continue iteratingKeyset;\n            }\n            // If the Keyset isn't a primitive or Array, then it must be a Range.\n            else {\n                    rangeEnd = keyset.to;\n                    nextKey = keyset.from || 0;\n                    if (typeofNumber !== typeof rangeEnd) {\n                        rangeEnd = nextKey + (keyset.length || 0) - 1;\n                    }\n                    if (rangeEnd - nextKey < 0) {\n                        break iteratingKeyset;\n                    }\n                    keyIsRange = true;\n                }\n\n        // Now that we have the next key, step down one level in the cache.\n        do {\n            fromReference = false;\n            nextJSON = json && json[nextKey];\n            nextOptimizedPath = optimizedPath;\n            nextOptimizedLength = optimizedLengthNext;\n            nextReferenceContainer = referenceContainer;\n\n            next = node[nextKey];\n            requestedPath[depth] = nextKey;\n            optimizedPath[optimizedLength] = nextKey;\n\n            if (nextDepth === requestedLength) {\n                nextJSON = walkPathAndBuildOutput(root, next, nextJSON, path, nextDepth, seed, results, requestedPath, requestedLength, nextOptimizedPath, nextOptimizedLength, fromReference, nextReferenceContainer, modelRoot, expired, expireImmediate, branchSelector, boxValues, materialized, hasDataSource, treatErrorsAsValues, allowFromWhenceYouCame);\n                if (nextJSON === undefined && !materialized) {\n                    continue;\n                }\n            } else {\n                // If we encounter a ref, inline the reference target and continue\n                // evaluating the path.\n                if (next &&\n                // If the reference is expired, it will be invalidated and\n                // reported as missing in the next call to walkPath below.\n                next.$type === \"ref\" && !isExpired(next, expireImmediate)) {\n\n                    // Retrieve the reference target and next referenceContainer (if\n                    // this reference points to other references) and continue\n                    // following the path. If the reference resolves to a missing\n                    // path or leaf node, it will be handled in the next call to\n                    // walkPath.\n                    refTarget = getReferenceTarget(root, next, modelRoot, expireImmediate);\n\n                    next = refTarget[0];\n                    fromReference = true;\n                    nextOptimizedPath = refTarget[1];\n                    nextReferenceContainer = refTarget[2];\n                    nextOptimizedLength = nextOptimizedPath.length;\n                    refTarget[0] = refTarget[1] = refTarget[2] = undefined;\n                }\n\n                // Continue following the path\n\n                // Inspect the return value from the step and determine whether to\n                // create or write into the JSON branch at this level.\n                //\n                // 1. If the next node was a leaf value, nextJSON is the value.\n                // 2. If the next node was a missing path, nextJSON is undefined.\n                // 3. If the next node was a branch, then nextJSON will either be an\n                //    Object or undefined. If nextJSON is undefined, all paths under\n                //    this step resolved to missing paths. If it's an Object, then\n                //    at least one path resolved to a successful leaf value.\n                //\n                // This check defers creating branches until we see at least one\n                // cache hit. Otherwise, don't waste the cycles creating a branch\n                // if everything underneath is a cache miss.\n\n                if (undefined === (nextJSON = walkPathAndBuildOutput(root, next, nextJSON, path, nextDepth, seed, results, requestedPath, requestedLength, nextOptimizedPath, nextOptimizedLength, fromReference, nextReferenceContainer, modelRoot, expired, expireImmediate, branchSelector, boxValues, materialized, hasDataSource, treatErrorsAsValues, allowFromWhenceYouCame))) {\n                    continue;\n                }\n            }\n\n            // The json value will initially be undefined. If we're here,\n            // then at least one leaf value was encountered, so create a\n            // branch to contain it.\n            if (f_meta === undefined) {\n                f_meta = {};\n                f_meta[\"version\"] = node[\"\u001eƒ_version\"];\n                f_meta[\"abs_path\"] = node[\"\u001eƒ_abs_path\"];\n                f_meta[\"deref_to\"] = refContainerRefPath;\n                f_meta[\"deref_from\"] = refContainerAbsPath;\n                json = {};\n                json[\"\u001eƒ_meta\"] = f_meta;\n                json.__proto__ = FalcorJSON.prototype;\n                // Empower developers to instrument branch node creation by\n                // providing a custom function. If they do, delegate branch\n                if (branchSelector) {\n                    json = branchSelector(json);\n                }\n            }\n\n            // Set the reported branch or leaf into this branch.\n            json[nextKey] = nextJSON;\n        }\n        // Re-enter the inner loop and continue iterating the Range, or exit\n        // here if we encountered a Key.\n        while (keyIsRange && ++nextKey <= rangeEnd);\n\n        // If we've exhausted the Keyset (or never encountered one at all),\n        // exit the outer loop.\n        if (++keysetIndex === keysetLength) {\n            break iteratingKeyset;\n        }\n\n        // Otherwise get the next Key or Range from the Keyset and re-enter the\n        // outer loop from the top.\n        keyset = keysOrRanges[keysetIndex];\n    } while (true);\n\n    // `json` will be a branch if any cache hits, or undefined if all cache misses\n    return json;\n}\n/* eslint-enable */\n\n/***/ },\n/* 65 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar arr = new Array(2);\nvar clone = __webpack_require__(6);\nvar inlineValue = __webpack_require__(23);\nvar promote = __webpack_require__(12);\nvar isExpired = __webpack_require__(0);\nvar createHardlink = __webpack_require__(7);\nvar CircularReferenceError = __webpack_require__(46);\n\nmodule.exports = getReferenceTarget;\n\n/* eslint-disable no-undef */\n/* eslint-disable no-console */\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction getReferenceTarget(root, ref, modelRoot, seed, expireImmediate) {\n\n    promote(modelRoot, ref);\n\n    var context,\n        key,\n        type,\n        depth = 0,\n        node = root,\n        path = ref.value,\n        copy = path,\n        length = path.length;\n\n    do {\n        if (depth === 0 && undefined !== (context = ref[\"\u001eƒ_context\"])) {\n            node = context;\n            depth = length;\n        } else {\n            key = path[depth++];\n            if (undefined === (node = node[key])) {\n                break;\n            }\n        }\n\n        if (depth === length) {\n            type = node.$type;\n            // If the reference points to an expired\n            // value node, don't create a hard-link.\n            if (undefined !== type && isExpired(node, expireImmediate)) {\n                break;\n            }\n            // If a reference points to itself, throw an error.\n            else if (node === ref) {\n                    throw new CircularReferenceError(path);\n                }\n                // If the node we land on isn't the existing ref context,\n                // create a hard-link between the reference and the node\n                // it points to.\n                else if (node !== context) {\n                        createHardlink(ref, node);\n                    }\n\n            // If the reference points to another ref, follow the new ref\n            // by resetting the relevant state and continuing from the top.\n            if (type === \"ref\") {\n\n                promote(modelRoot, node);\n\n                seed && inlineValue(clone(node), path, length, seed);\n\n                depth = 0;\n                ref = node;\n                node = root;\n                path = copy = ref.value;\n                length = path.length;\n\n                continue;\n            }\n            break;\n        } else if (undefined !== node.$type) {\n            break;\n        }\n    } while (true);\n\n    if (depth < length && undefined !== node) {\n        length = depth;\n    }\n\n    depth = -1;\n    path = new Array(length);\n    while (++depth < length) {\n        path[depth] = copy[depth];\n    }\n\n    arr[0] = node;\n    arr[1] = path;\n\n    return arr;\n}\n/* eslint-enable */\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar typeofObject = 'object';\nvar clone = __webpack_require__(6);\nvar inlineValue = __webpack_require__(23);\n\nmodule.exports = onJSONGraphValue;\n\nfunction onJSONGraphValue(node, type, depth, seed, results, requestedPath, optimizedPath, optimizedLength, fromReference, boxValues, materialized) {\n\n    var value = node.value;\n\n    // boxValues always clones the node\n    if (boxValues || !(\n    /**\n     * JSON Graph should always clone:\n     * - refs\n     * - errors\n     * - atoms we didn't create\n     * - atoms we created to wrap Objects\n     **/\n    \"ref\" !== type && \"error\" !== type && node[\"\u001eƒ_wrapped_value\"] && typeofObject !== typeof value)) {\n        value = clone(node);\n    }\n\n    results.hasValue = true;\n    inlineValue(value, optimizedPath, optimizedLength, seed);\n    (seed.paths || (seed.paths = [])).push(requestedPath.slice(0, depth + !!fromReference) // depth + 1 if fromReference === true\n    );\n\n    return value;\n}\n\n/***/ },\n/* 67 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isArray = Array.isArray;\nvar clone = __webpack_require__(6);\nvar onValue = __webpack_require__(66);\nvar inlineValue = __webpack_require__(23);\nvar isExpired = __webpack_require__(0);\nvar onValueType = __webpack_require__(15);\nvar onMaterialize = __webpack_require__(38);\nvar originalOnMissing = __webpack_require__(24);\nvar getReferenceTarget = __webpack_require__(65);\nvar NullInPathError = __webpack_require__(3);\nvar InvalidKeySetError = __webpack_require__(11);\nvar materializedAtom = __webpack_require__(20);\n\nmodule.exports = walkPathAndBuildOutput;\n\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction walkPathAndBuildOutput(root, node, path, depth, seed, results, requestedPath, requestedLength, optimizedPath, optimizedLength, fromReference, modelRoot, expired, expireImmediate, boxValues, materialized, hasDataSource, treatErrorsAsValues) {\n\n    var type, refTarget;\n\n    // ============ Check for base cases ================\n\n    // If there's nowhere to go, we've reached a terminal node, or hit\n    // the end of the path, stop now. Either build missing paths or report the value.\n    if (node === undefined || (type = node.$type) || depth === requestedLength) {\n        return onValueType(node, type, seed, path, depth, seed, results, requestedPath, requestedLength, optimizedPath, optimizedLength, fromReference, modelRoot, expired, expireImmediate, undefined, boxValues, materialized, hasDataSource, treatErrorsAsValues, onValue, onMissing, onMaterialize);\n    }\n\n    var next,\n        nextKey,\n        keyset,\n        keyIsRange,\n        nextDepth = depth + 1,\n        rangeEnd,\n        keysOrRanges,\n        keysetIndex = -1,\n        keysetLength = 0,\n        nextOptimizedLength,\n        nextOptimizedPath,\n        optimizedLengthNext = optimizedLength + 1;\n\n    keyset = path[depth];\n\n    // If `null` appears before the end of the path, throw an error.\n    // If `null` is at the end of the path, but the reference doesn't\n    // point to a sentinel value, throw an error.\n    //\n    // Inserting `null` at the end of the path indicates the target of a ref\n    // should be returned, rather than the ref itself. When `null` is the last\n    // key, the path is lengthened by one, ensuring that if a ref is encountered\n    // just before the `null` key, the reference is followed before terminating.\n    if (null === keyset) {\n        if (nextDepth < requestedLength) {\n            throw new NullInPathError();\n        }\n        return undefined;\n    }\n\n    // Iterate over every key in the keyset. This loop is perhaps a bit clever,\n    // but we do it this way because this is a performance-sensitive code path.\n    // This loop simulates a recursive function if we encounter a Keyset that\n    // contains Keys or Ranges. This is accomplished by a nifty dance between an\n    // outer loop and an inner loop.\n    //\n    // The outer loop is responsible for identifying if the value at this depth\n    // is a Key, Range, or Keyset. If it encounters a Keyset, the `keysetIndex`,\n    // `keysetLength`, and `keysOrRanges` variables are assigned and the outer\n    // loop restarts. If it encounters a Key or Range, `nextKey`, `keyIsRange`,\n    // and `rangeEnd` are assigned values which signal whether the inner loop\n    // should iterate a Range or exit after the first run.\n    //\n    // The inner loop steps `nextKey` one level down in the cache. If a Range\n    // was encountered in the outer loop, the inner loop will iterate until the\n    // Range has been exhausted. If a Key was encountered, the inner loop exits\n    // after the first execution.\n    //\n    // After the inner loop exits, the outer loop iterates the `keysetIndex`\n    // until the Keyset is exhausted. `keysetIndex` and `keysetLength` are\n    // initialized to -1 and 0 respectively, so if a Keyset wasn't encountered\n    // at this depth in the path, then the outer loop exits after one execution.\n\n    iteratingKeyset: do {\n\n        // If the keyset is a primitive value, we've found our `nextKey`.\n        if ('object' !== typeof keyset) {\n            nextKey = keyset;\n            rangeEnd = undefined;\n            keyIsRange = false;\n        }\n        // If we encounter a Keyset, either iterate through the Keys and Ranges,\n        // or throw an error if we're already iterating a Keyset. Keysets cannot\n        // contain other Keysets.\n        else if (isArray(keyset)) {\n                // If we've already encountered an Array keyset, throw an error.\n                if (keysOrRanges !== undefined) {\n                    throw new InvalidKeySetError(path, keysOrRanges);\n                }\n                keysetIndex = 0;\n                keysOrRanges = keyset;\n                keysetLength = keyset.length;\n                // If an Array of keys or ranges is empty, terminate the graph walk\n                // and return the json constructed so far. An example of an empty\n                // Keyset is: ['lolomo', [], 'summary']. This should short circuit\n                // without building missing paths.\n                if (0 === keysetLength) {\n                    break iteratingKeyset;\n                }\n                keyset = keysOrRanges[keysetIndex];\n                // Assign `keyset` to the first value in the Keyset. Re-entering the\n                // outer loop mimics a singly-recursive function call.\n                continue iteratingKeyset;\n            }\n            // If the Keyset isn't a primitive or Array, then it must be a Range.\n            else {\n                    rangeEnd = keyset.to;\n                    nextKey = keyset.from || 0;\n                    if ('number' !== typeof rangeEnd) {\n                        rangeEnd = nextKey + (keyset.length || 0) - 1;\n                    }\n                    if (rangeEnd - nextKey < 0) {\n                        break iteratingKeyset;\n                    }\n                    keyIsRange = true;\n                }\n\n        // Now that we have the next key, step down one level in the cache.\n        do {\n            fromReference = false;\n            nextOptimizedPath = optimizedPath;\n            nextOptimizedLength = optimizedLengthNext;\n\n            next = node[nextKey];\n            requestedPath[depth] = nextKey;\n            optimizedPath[optimizedLength] = nextKey;\n\n            // If we encounter a ref, inline the reference target and continue\n            // evaluating the path.\n            if (next && nextDepth < requestedLength &&\n            // If the reference is expired, it will be invalidated and\n            // reported as missing in the next call to walkPath below.\n            next.$type === \"ref\" && !isExpired(next, expireImmediate)) {\n\n                // Write the cloned ref value into the jsonGraph at the\n                // optimized path. JSONGraph must always clone references.\n                seed && inlineValue(clone(next), optimizedPath, nextOptimizedLength, seed);\n\n                // Retrieve the reference target and next referenceContainer (if\n                // this reference points to other references) and continue\n                // following the path. If the reference resolves to a missing\n                // path or leaf node, it will be handled in the next call to\n                // walkPath.\n                refTarget = getReferenceTarget(root, next, modelRoot, seed, expireImmediate);\n\n                next = refTarget[0];\n                fromReference = true;\n                nextOptimizedPath = refTarget[1];\n                nextOptimizedLength = nextOptimizedPath.length;\n                refTarget[0] = refTarget[1] = undefined;\n            }\n\n            walkPathAndBuildOutput(root, next, path, nextDepth, seed, results, requestedPath, requestedLength, nextOptimizedPath, nextOptimizedLength, fromReference, modelRoot, expired, expireImmediate, boxValues, materialized, hasDataSource, treatErrorsAsValues);\n        }\n        // Re-enter the inner loop and continue iterating the Range, or exit\n        // here if we encountered a Key.\n        while (keyIsRange && ++nextKey <= rangeEnd);\n\n        // If we've exhausted the Keyset (or never encountered one at all),\n        // exit the outer loop.\n        if (++keysetIndex === keysetLength) {\n            break iteratingKeyset;\n        }\n\n        // Otherwise get the next Key or Range from the Keyset and re-enter the\n        // outer loop from the top.\n        keyset = keysOrRanges[keysetIndex];\n    } while (true);\n\n    return undefined;\n}\n/* eslint-enable */\n\nfunction onMissing(path, depth, results, requestedPath, requestedLength, fromReference, optimizedPath, optimizedLength, reportMissing, reportMaterialized, seed, branchSelector, boxValues, onMaterialize, modelRoot) {\n\n    var json, isLeaf;\n\n    if (seed && reportMaterialized) {\n\n        (seed.paths || (seed.paths = [])).push((isLeaf = 0 === requestedLength - depth) &&\n        // depth + 1 if fromReference === true\n        requestedPath.slice(0, depth + !!fromReference) || requestedPath.slice(0, depth).concat(path.slice(depth, requestedLength + !!fromReference)));\n\n        json = inlineValue(isLeaf && clone(materializedAtom) || undefined, optimizedPath, optimizedLength, seed, !isLeaf);\n    }\n\n    return originalOnMissing(path, depth, results, requestedPath, requestedLength, fromReference, optimizedPath, optimizedLength, reportMissing, !isLeaf && reportMaterialized, json, branchSelector, true, onMaterialize, modelRoot);\n}\n\n/***/ },\n/* 68 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar typeofNumber = 'number';\nvar typeofObject = 'object';\nvar clone = __webpack_require__(6);\nvar onValueType = __webpack_require__(15);\nvar FalcorJSON = __webpack_require__(2);\nvar NullInPathError = __webpack_require__(3);\nvar InvalidKeySetError = __webpack_require__(11);\nvar materializedAtom = __webpack_require__(20);\n\nmodule.exports = onMaterializeFlatBuffer;\n\n/* eslint-disable camelcase */\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction onMaterializeFlatBuffer(json, path, depth, length, branchSelector, boxValues, modelRoot, results, requestedPath, optimizedPath, optimizedLength, fromReference, reportMissing, onMissing) {\n\n    var type, refTarget;\n\n    // ============ Check for base cases ================\n\n    // If there's nowhere to go, we've reached a terminal node, or hit\n    // the end of the path, stop now. Either build missing paths or report the value.\n    if (undefined === path) {\n        onValueType(undefined, undefined, json, path, depth, undefined, results, requestedPath, depth, optimizedPath, optimizedLength, fromReference, modelRoot, undefined, false, branchSelector, boxValues, false, reportMissing, false, undefined, onMissing, undefined);\n        return boxValues ? clone(materializedAtom) : undefined;\n    }\n\n    var f_meta, f_old_keys, f_new_keys;\n\n    var nextKey,\n        keyset,\n        keyIsRange,\n        keys = path['$keys'],\n        nextDepth = depth + 1,\n        rangeEnd,\n        nextOptimizedLength = optimizedLength + 1;\n\n    if (!json || typeofObject !== typeof json) {\n        json = {};\n        json.__proto__ = FalcorJSON.prototype;\n        json[\"\u001eƒ_meta\"] = f_meta = {};\n        f_meta[\"version\"] = modelRoot.version;\n        f_meta[\"abs_path\"] = optimizedPath.slice(0, optimizedLength);\n        if (branchSelector) {\n            json = branchSelector(json);\n        }\n    } else if (!(f_meta = json[\"\u001eƒ_meta\"])) {\n        json[\"\u001eƒ_meta\"] = f_meta = {};\n        f_meta[\"version\"] = modelRoot.version;\n        f_meta[\"abs_path\"] = optimizedPath.slice(0, optimizedLength);\n    } else {\n        f_old_keys = f_meta[\"keys\"];\n        f_meta[\"version\"] = modelRoot.version;\n        f_meta[\"abs_path\"] = optimizedPath.slice(0, optimizedLength);\n    }\n\n    f_new_keys = Object.create(null);\n\n    var nextPath;\n    var keysIndex = -1;\n    var keysLength = keys.length;\n\n    iteratingKeyset: while (++keysIndex < keysLength) {\n\n        keyset = keys[keysIndex];\n        nextPath = path[keysIndex];\n\n        // If `null` appears before the end of the path, throw an error.\n        // If `null` is at the end of the path, but the reference doesn't\n        // point to a sentinel value, throw an error.\n        //\n        // Inserting `null` at the end of the path indicates the target of a ref\n        // should be returned, rather than the ref itself. When `null` is the last\n        // key, the path is lengthened by one, ensuring that if a ref is encountered\n        // just before the `null` key, the reference is followed before terminating.\n        if (null === keyset) {\n            if (nextPath !== undefined) {\n                throw new NullInPathError();\n            }\n            continue;\n        }\n        // If the keyset is a primitive value, we've found our `nextKey`.\n        else if (typeofObject !== typeof keyset) {\n                nextKey = keyset;\n                rangeEnd = undefined;\n                keyIsRange = false;\n            }\n            // If the Keyset isn't null or primitive, then it must be a Range.\n            else {\n                    rangeEnd = keyset.to;\n                    nextKey = keyset.from || 0;\n                    if (typeofNumber !== typeof rangeEnd) {\n                        rangeEnd = nextKey + (keyset.length || 0) - 1;\n                    }\n                    if (rangeEnd - nextKey < 0) {\n                        break iteratingKeyset;\n                    }\n                    keyIsRange = true;\n                }\n\n        // Now that we have the next key, step down one level in the cache.\n        do {\n\n            requestedPath[depth] = nextKey;\n            optimizedPath[optimizedLength] = nextKey;\n\n            f_new_keys[nextKey] = true;\n            if (f_old_keys && nextKey in f_old_keys) {\n                f_old_keys[nextKey] = false;\n            }\n\n            // insert the materialized branch\n            json[nextKey] = onMaterializeFlatBuffer(json[nextKey], nextPath, nextDepth, nextDepth, branchSelector, boxValues, modelRoot, results, requestedPath, optimizedPath, nextOptimizedLength, fromReference, reportMissing, onMissing);\n        }\n        // Re-enter the inner loop and continue iterating the Range, or exit\n        // here if we encountered a Key.\n        while (keyIsRange && ++nextKey <= rangeEnd);\n    }\n\n    f_meta['$code'] = '__missing__';\n    f_meta[\"keys\"] = f_new_keys;\n    if (f_old_keys) {\n        for (nextKey in f_old_keys) {\n            if (f_old_keys[nextKey]) {\n                delete json[nextKey];\n            }\n        }\n    }\n\n    // `json` will be a branch if any cache hits, or undefined if all cache misses\n    return json;\n}\n\n/***/ },\n/* 69 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isInternalKey = __webpack_require__(19);\n\n/**\n * decends and copies the cache.\n */\nmodule.exports = function getCache(cache) {\n    var out = {};\n    _copyCache(cache, out);\n\n    return out;\n};\n\nfunction cloneBoxedValue(boxedValue) {\n    var clonedValue = {};\n\n    var keys = Object.keys(boxedValue);\n    var key;\n    var i;\n    var l;\n\n    for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n\n        if (key === '$type' || !isInternalKey(key)) {\n            clonedValue[key] = boxedValue[key];\n        }\n    }\n\n    return clonedValue;\n}\n\nfunction _copyCache(node, out, fromKey) {\n    // copy and return\n\n    // only copy objects\n    if (!node || typeof node !== 'object') {\n        return;\n    }\n\n    Object.keys(node).filter(function (key) {\n        // Its not an internal key and the node has a value.  In the cache\n        // there are 3 possibilities for values.\n        // 1: A branch node.\n        // 2: A $type-value node.\n        // 3: undefined\n        // We will strip out 3\n        return (key === '$type' || !isInternalKey(key)) && node[key] !== undefined;\n    }).forEach(function (key) {\n        var cacheNext = node[key];\n        var outNext = out[key];\n\n        if (!outNext) {\n            outNext = out[key] = {};\n        }\n\n        // Paste the node into the out cache.\n        if (cacheNext.$type) {\n            var isObject = cacheNext.value && typeof cacheNext.value === 'object';\n            var isUserCreatedcacheNext = !cacheNext[\"\u001eƒ_wrapped_value\"];\n            var value;\n            if (isObject || isUserCreatedcacheNext) {\n                value = cloneBoxedValue(cacheNext);\n            } else {\n                value = cacheNext.value;\n            }\n\n            out[key] = value;\n            return;\n        }\n\n        _copyCache(cacheNext, outNext, key);\n    });\n}\n\n/***/ },\n/* 70 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar getBoundCacheNode = __webpack_require__(16);\n\nmodule.exports = function _getVersion(model, path) {\n    var node = getBoundCacheNode(model, path);\n    var version = node && node[\"\u001eƒ_version\"];\n    return version == null ? -1 : version;\n};\n\n/***/ },\n/* 71 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar groupCacheArguments = __webpack_require__(39);\n\nmodule.exports = {\n    json: invalidate,\n    jsonGraph: invalidate,\n    invalidatePathMaps: __webpack_require__(41),\n    invalidatePathValues: __webpack_require__(25)\n};\n\nfunction invalidate(model, args, seed, progressive, expireImmediate) {\n    if (invalidateArgumentGroups(model, groupCacheArguments(args), expireImmediate)) {\n        var rootChangeHandler = model._root.onChange;\n        rootChangeHandler && rootChangeHandler();\n    }\n    return {};\n}\n\nfunction invalidateArgumentGroups(model, xs, expireImmediate) {\n\n    var changed = false;\n    var groupIndex = -1;\n    var groupCount = xs.length;\n\n    // Takes each of the groups and normalizes their input into\n    // requested paths and optimized paths.\n    while (++groupIndex < groupCount) {\n\n        var group = xs[groupIndex];\n        var inputType = group.inputType;\n        var groupedArgs = group.arguments;\n\n        if (groupedArgs.length > 0) {\n            if (inputType === 'PathValues') {\n                groupedArgs = groupedArgs.map(pluckPaths);\n            }\n            var operation = module.exports['invalidate' + inputType];\n            if (operation(model, groupedArgs, expireImmediate)) {\n                changed = true;\n            }\n        }\n    }\n    return changed;\n}\n\nfunction pluckPaths(x) {\n    return x.path || x.paths;\n}\n\n/***/ },\n/* 72 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar wrapNode = __webpack_require__(45);\nvar isExpired = __webpack_require__(0);\nvar insertNode = __webpack_require__(40);\nvar expireNode = __webpack_require__(1);\nvar replaceNode = __webpack_require__(44);\nvar getSize = __webpack_require__(8);\nvar reconstructPath = __webpack_require__(43);\nvar getTimestamp = __webpack_require__(30);\nvar updateNodeAncestors = __webpack_require__(10);\n\nmodule.exports = function mergeJSONGraphNode(parent, node, message, key, requestedPath, optimizedPath, version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var sizeOffset;\n\n    var cType, mType, cIsObject, mIsObject, cTimestamp, mTimestamp;\n\n    // If the cache and message are the same, we can probably return early:\n    // - If they're both nullsy,\n    //   - If null then the node needs to be wrapped in an atom and inserted.\n    //     This happens from whole branch merging when a leaf is just a null value\n    //     instead of being wrapped in an atom.\n    //   - If undefined then return null (previous behavior).\n    // - If they're both branches, return the branch.\n    // - If they're both edges, continue below.\n    if (node === message) {\n\n        // The message and cache are both undefined, return undefined.\n        if (message === undefined) {\n            return message;\n        }\n        // There should not be undefined values. Those should always be\n        // wrapped in an $atom\n        else if (message === null) {\n                node = wrapNode(message, undefined, message);\n                parent = updateNodeAncestors(parent, -node.$size, lru, version);\n                node = insertNode(node, parent, key, undefined, optimizedPath);\n                return node;\n            }\n            // Is the cache node a branch? If so, return the cache branch.\n            else if ((cIsObject = !(!node || typeof node !== 'object')) && (cType = node.$type) === undefined) {\n                    // Has the branch been introduced to the cache yet? If not,\n                    // give it a parent, key, and absolute path.\n                    if (node[\"\u001eƒ_parent\"] === undefined) {\n                        insertNode(node, parent, key, version, optimizedPath);\n                    }\n                    return node;\n                }\n    } else if (cIsObject = !(!node || typeof node !== 'object')) {\n        cType = node.$type;\n    }\n\n    // If the cache isn't a reference, we might be able to return early.\n    if (cType !== \"ref\") {\n        mIsObject = !(!message || typeof message !== 'object');\n        if (mIsObject) {\n            mType = message.$type;\n        }\n        if (cIsObject && !cType) {\n            // If the cache is a branch and the message is empty or\n            // also a branch, continue with the cache branch.\n            if (message == null || mIsObject && !mType) {\n                return node;\n            }\n        }\n    }\n    // If the cache is a reference, we might not need to replace it.\n    else {\n            // If the cache is a reference, but the message is empty,\n            // leave the cache alone...\n            if (message == null) {\n                // ...unless the cache is an expired reference. In that case, expire\n                // the cache node and return undefined.\n                if (isExpired(node, expireImmediate)) {\n                    expireNode(node, expired, lru);\n                    return void 0;\n                }\n                return node;\n            }\n            mIsObject = !(!message || typeof message !== 'object');\n            if (mIsObject) {\n                mType = message.$type;\n                // If the cache and the message are both references,\n                // check if we need to replace the cache reference.\n                if (mType === \"ref\") {\n                    if (node === message) {\n                        // If the cache and message are the same reference,\n                        // we performed a whole-branch merge of one of the\n                        // grandparents. If we've previously graphed this\n                        // reference, break early. Otherwise, continue to\n                        // leaf insertion below.\n                        if (node[\"\u001eƒ_parent\"] != null) {\n                            return node;\n                        }\n                    } else {\n\n                        cTimestamp = node.$timestamp;\n                        mTimestamp = message.$timestamp;\n\n                        // - If either the cache or message reference is expired,\n                        //   replace the cache reference with the message.\n                        // - If neither of the references are expired, compare their\n                        //   timestamps. If either of them don't have a timestamp,\n                        //   or the message's timestamp is newer, replace the cache\n                        //   reference with the message reference.\n                        // - If the message reference is older than the cache\n                        //   reference, short-circuit.\n                        if (!isExpired(node, expireImmediate) && !isExpired(message, expireImmediate) && mTimestamp < cTimestamp) {\n                            return void 0;\n                        }\n                    }\n                }\n            }\n        }\n\n    // If the cache is a leaf but the message is a branch,\n    // merge the branch over the leaf.\n    if (cType && mIsObject && !mType) {\n        return insertNode(replaceNode(node, message, parent, key, lru, version), parent, key, undefined, optimizedPath);\n    }\n    // If the message is a sentinel or primitive, insert it into the cache.\n    else if (mType || !mIsObject) {\n\n            if (mType === \"error\" && errorSelector) {\n                message = errorSelector(reconstructPath(requestedPath, key), message);\n            }\n\n            // If the cache and the message are the same value, we branch-merged one\n            // of the message's ancestors. If this is the first time we've seen this\n            // leaf, give the message a $size and $type, attach its graph pointers,\n            // and update the cache sizes and versions.\n            if (mType && node === message) {\n                if (!node[\"\u001eƒ_parent\"]) {\n                    node = wrapNode(node, cType, node.value);\n                    parent = updateNodeAncestors(parent, -node.$size, lru, version);\n                    node = insertNode(node, parent, key, version, optimizedPath);\n                }\n            }\n            // If the cache and message are different, the cache value is expired,\n            // or the message is a primitive, replace the cache with the message value.\n            // If the message is a sentinel, clone and maintain its type.\n            // If the message is a primitive value, wrap it in an atom.\n            else {\n                    var isDistinct = true;\n                    // If both the cache and message are primitives, we branch-merged\n                    // one of the message's ancestors. Insert the value into the cache.\n                    if (!cType && !mType) {\n                        isDistinct = true;\n                    }\n                    // If the cache is a branch, but the message is a leaf, replace the\n                    // cache branch with the message leaf.\n                    else if (!cIsObject || !isExpired(node, expireImmediate)) {\n                            // Compare the current cache value with the new value. If either of\n                            // them don't have a timestamp, or the message's timestamp is newer,\n                            // replace the cache value with the message value. If a comparator\n                            // is specified, the comparator takes precedence over timestamps.\n                            if (comparator) {\n                                isDistinct = !(comparator.length < 3 ? comparator(node, message) : comparator(node, message, optimizedPath.slice(0, optimizedPath.index)));\n                            } else {\n                                // Comparing either Number or undefined to undefined always results in false.\n                                isDistinct = getTimestamp(message) < getTimestamp(node) === false;\n                            }\n                        }\n                    if (isDistinct) {\n                        sizeOffset = getSize(node) - getSize(message = wrapNode(message, mType, mType ? message.value : message));\n                        node = replaceNode(node, message, parent, key, lru, version);\n                        parent = updateNodeAncestors(parent, sizeOffset, lru, version);\n                        node = insertNode(node, parent, key, version, optimizedPath);\n                    }\n                }\n\n            // Promote the message edge in the LRU.\n            if (isExpired(node,\n            /* expireImmediate:\n             * force true so the node is marked as\n             * expired but keep using it for the merge.\n             */\n            true)) {\n                expireNode(node, expired, lru);\n            }\n        } else if (node == null) {\n            node = insertNode(message, parent, key, undefined, optimizedPath);\n        }\n\n    return node;\n};\n\n/***/ },\n/* 73 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar getJSON = __webpack_require__(21);\nvar getJSONGraph = __webpack_require__(22);\nvar arrayFlatMap = __webpack_require__(90);\nvar groupCacheArguments = __webpack_require__(39);\n\nmodule.exports = {\n    json: json,\n    jsonGraph: jsonGraph,\n    setPathMaps: __webpack_require__(18),\n    setPathValues: __webpack_require__(27),\n    setJSONGraphs: __webpack_require__(17)\n};\n\nfunction json(model, _args, data, progressive, expireImmediate) {\n\n    var set,\n        get,\n        jsong,\n        changed,\n        relative,\n        optimized,\n        missing,\n        fragments,\n        requested,\n        args = groupCacheArguments(_args);\n\n    set = setGroupsIntoCache(model, args, expireImmediate);\n\n    if ((relative = set.requested).length) {\n\n        if (!(changed = set.changed) || progressive) {\n            get = getJSON(model, relative, data, progressive, expireImmediate);\n        }\n\n        if (changed) {\n\n            jsong = getJSONGraph({\n                _root: model._root,\n                _boxed: model._boxed, _materialized: true,\n                _treatErrorsAsValues: model._treatErrorsAsValues\n            }, set.optimized, {}, progressive, expireImmediate);\n\n            fragments = jsong.data;\n            missing = fragments.paths;\n            requested = jsong.requested;\n\n            var rootChangeHandler = model._root.onChange;\n            rootChangeHandler && rootChangeHandler();\n        }\n    }\n\n    return {\n        args: args,\n        data: data,\n        missing: missing,\n        relative: relative,\n        fragments: fragments,\n        requested: requested,\n        error: get && get.error,\n        errors: get && get.errors,\n        hasValue: get && get.hasValue\n    };\n}\n\nfunction jsonGraph(model, _args, data, progressive, expireImmediate) {\n\n    var set,\n        jsong,\n        changed,\n        relative,\n        optimized,\n        missing,\n        fragments,\n        requested,\n        args = groupCacheArguments(_args);\n\n    set = setGroupsIntoCache(model, args, expireImmediate);\n\n    if ((relative = set.requested).length && (progressive || (changed = set.changed))) {\n\n        jsong = getJSONGraph({\n            _root: model._root,\n            _boxed: model._boxed, _materialized: true,\n            _treatErrorsAsValues: model._treatErrorsAsValues\n        }, set.optimized, data, progressive, expireImmediate);\n\n        fragments = jsong.data;\n        missing = fragments.paths;\n        requested = jsong.requested;\n\n        if (changed) {\n            var rootChangeHandler = model._root.onChange;\n            rootChangeHandler && rootChangeHandler();\n        }\n    }\n\n    return {\n        args: args,\n        data: data,\n        missing: missing,\n        relative: relative,\n        fragments: fragments,\n        requested: requested,\n        error: jsong && jsong.error,\n        hasValue: jsong && jsong.hasValue\n    };\n}\n\nfunction setGroupsIntoCache(model, xs, expireImmediate) {\n\n    var changed = false;\n    var groupIndex = -1;\n    var groupCount = xs.length;\n    var requestedPaths = [];\n    var optimizedPaths = [];\n    var modelRoot = model._root;\n    var errorSelector = modelRoot.errorSelector;\n\n    expireImmediate = expireImmediate && !Boolean(model._source);\n    var comparator = Boolean(model._source) ? null : modelRoot.comparator;\n\n    // Takes each of the groups and normalizes their input into\n    // requested paths and optimized paths.\n    while (++groupIndex < groupCount) {\n\n        var group = xs[groupIndex];\n        var inputType = group.inputType;\n        var groupedArgs = group.arguments;\n\n        if (groupedArgs.length > 0) {\n            var operation = module.exports['set' + inputType];\n            var results = operation(model, groupedArgs, errorSelector, comparator, expireImmediate);\n            changed = changed || results[2];\n            optimizedPaths.push.apply(optimizedPaths, results[1]);\n            if (inputType === 'PathValues') {\n                requestedPaths.push.apply(requestedPaths, groupedArgs.map(pluckPaths));\n            } else if (inputType === 'JSONGraphs') {\n                requestedPaths.push.apply(requestedPaths, arrayFlatMap(groupedArgs, pluckPaths));\n            } else {\n                requestedPaths.push.apply(requestedPaths, results[0]);\n            }\n        }\n    }\n\n    return {\n        changed: changed,\n        requested: requestedPaths,\n        optimized: optimizedPaths\n    };\n}\n\nfunction pluckPaths(x) {\n    return x.path || x.paths;\n}\n\n/***/ },\n/* 74 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = function transferBackReferences(fromNode, destNode) {\n    var fromNodeRefsLength = fromNode[\"\u001eƒ_refs_length\"] || 0,\n        destNodeRefsLength = destNode[\"\u001eƒ_refs_length\"] || 0,\n        i = -1;\n    while (++i < fromNodeRefsLength) {\n        var ref = fromNode[\"\u001eƒ_ref\" + i];\n        if (ref !== undefined) {\n            ref[\"\u001eƒ_context\"] = destNode;\n            destNode[\"\u001eƒ_ref\" + (destNodeRefsLength + i)] = ref;\n            fromNode[\"\u001eƒ_ref\" + i] = undefined;\n        }\n    }\n    destNode[\"\u001eƒ_refs_length\"] = fromNodeRefsLength + destNodeRefsLength;\n    fromNode[\"\u001eƒ_refs_length\"] = undefined;\n    return destNode;\n};\n\n/***/ },\n/* 75 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = function unlinkBackReferences(node) {\n    var i = -1,\n        n = node[\"\u001eƒ_refs_length\"] || 0;\n    while (++i < n) {\n        var ref = node[\"\u001eƒ_ref\" + i];\n        if (ref != null) {\n            ref[\"\u001eƒ_context\"] = ref[\"\u001eƒ_ref_index\"] = node[\"\u001eƒ_ref\" + i] = void 0;\n        }\n    }\n    node[\"\u001eƒ_refs_length\"] = void 0;\n    return node;\n};\n\n/***/ },\n/* 76 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = function unlinkForwardReference(reference) {\n    var destination = reference[\"\u001eƒ_context\"];\n    if (destination) {\n        var i = (reference[\"\u001eƒ_ref_index\"] || 0) - 1,\n            n = (destination[\"\u001eƒ_refs_length\"] || 0) - 1;\n        while (++i <= n) {\n            destination[\"\u001eƒ_ref\" + i] = destination[\"\u001eƒ_ref\" + (i + 1)];\n        }\n        destination[\"\u001eƒ_refs_length\"] = n;\n        reference[\"\u001eƒ_ref_index\"] = reference[\"\u001eƒ_context\"] = destination = void 0;\n    }\n    return reference;\n};\n\n/***/ },\n/* 77 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = hasValidParentReference;\n\nfunction hasValidParentReference() {\n    var reference = this._referenceContainer;\n\n    // Always true when this mode is false.\n    if (!this._allowFromWhenceYouCame) {\n        return true;\n    }\n\n    // If fromWhenceYouCame is true and the first set of keys did not have\n    // a reference, this case can happen.  They are always valid.\n    if (reference === true) {\n        return true;\n    }\n\n    // was invalid before even derefing.\n    if (reference === false) {\n        return false;\n    }\n\n    // Its been disconnected (set over or collected) from the graph.\n    if (reference && reference[\"\u001eƒ_parent\"] === undefined) {\n        return false;\n    }\n\n    // The reference has expired but has not been collected from the graph.\n    if (reference && reference[\"\u001eƒ_invalidated\"]) {\n        return false;\n    }\n\n    return true;\n}\n\n/***/ },\n/* 78 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar CONTAINER_DOES_NOT_EXIST = 'e';\nvar FalcorJSON = __webpack_require__(2);\nvar getCachePosition = __webpack_require__(9);\nvar InvalidDerefInputError = __webpack_require__(80);\n\nmodule.exports = function deref(json) {\n\n    var seed, f_meta;\n\n    if (!json || 'object' !== typeof json || !(f_meta = json[\"\u001eƒ_meta\"]) || 'object' !== typeof f_meta) {\n        return null;\n    }\n\n    var cacheRoot = this._root.cache;\n    var recycleJSON = this._recycleJSON;\n    var absolutePath = f_meta[\"abs_path\"];\n    var referenceContainer, currentRefPath, i, len;\n\n    if (!absolutePath) {\n        if (recycleJSON) {\n            seed = { json: json };\n            seed.__proto__ = FalcorJSON.prototype;\n        }\n        return this._clone({\n            _node: undefined,\n            _seed: seed\n        });\n    } else if (absolutePath.length === 0) {\n        if (recycleJSON) {\n            seed = { json: json };\n            seed.__proto__ = FalcorJSON.prototype;\n        }\n        return this._clone({\n            _node: cacheRoot,\n            _path: absolutePath,\n            _referenceContainer: true,\n            _seed: seed\n        });\n    }\n\n    var originalRefPath = f_meta[\"deref_to\"];\n    var originalAbsPath = f_meta[\"deref_from\"];\n\n    // We deref and then ensure that the reference container is attached to\n    // the model.\n    var cacheNode = getCachePosition(cacheRoot, absolutePath);\n    var validContainer = CONTAINER_DOES_NOT_EXIST;\n\n    if (originalAbsPath) {\n\n        validContainer = false;\n\n        i = -1;\n        len = originalAbsPath.length;\n        referenceContainer = cacheRoot;\n        while (++i < len) {\n            referenceContainer = referenceContainer[originalAbsPath[i]];\n            if (!referenceContainer || referenceContainer.$type) {\n                break;\n            }\n        }\n\n        // If the reference container is still a sentinel value then compare\n        // the reference value with refPath.  If they are the same, then the\n        // model is still valid.\n        if (originalRefPath && referenceContainer && referenceContainer.$type === \"ref\") {\n            validContainer = true;\n            len = originalRefPath.length;\n            currentRefPath = referenceContainer.value;\n            for (i = 0; i < len; ++i) {\n                if (currentRefPath[i] !== originalRefPath[i]) {\n                    cacheNode = undefined;\n                    validContainer = false;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Signal to the deref'd model that it has been disconnected from the\n    // graph or there is no _fromWhenceYouCame\n    if (!validContainer) {\n        referenceContainer = false;\n    }\n\n    // The container did not exist, therefore there is no reference\n    // container and fromWhenceYouCame should always return true.\n    else if (validContainer === CONTAINER_DOES_NOT_EXIST) {\n            referenceContainer = true;\n        }\n\n    if (recycleJSON) {\n        seed = { json: json };\n        seed.__proto__ = FalcorJSON.prototype;\n    }\n\n    return this._clone({\n        _seed: seed,\n        _node: cacheNode,\n        _path: absolutePath,\n        _referenceContainer: referenceContainer\n    });\n};\n\n/***/ },\n/* 79 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar createErrorClass = __webpack_require__(4);\nvar MESSAGE = 'It is not legal to use the JSON Graph ' + 'format from a bound Model. JSON Graph format' + ' can only be used from a root model.';\n\n/**\n * When a bound model attempts to retrieve JSONGraph it should throw an\n * error.\n *\n * @private\n */\nmodule.exports = createErrorClass('BoundJSONGraphModelError', function () {\n    this.message = MESSAGE;\n});\n\n/***/ },\n/* 80 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar createErrorClass = __webpack_require__(4);\nvar MESSAGE = 'Deref can only be used with a non-primitive object from get, set, or call.';\n\n/**\n * An invalid deref input is when deref is used with input that is not generated\n * from a get, set, or a call.\n *\n * @param {String} message\n * @private\n */\nmodule.exports = createErrorClass('InvalidDerefInputError', function () {\n  this.message = MESSAGE;\n});\n\n/***/ },\n/* 81 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar createErrorClass = __webpack_require__(4);\nvar MESSAGE = 'The boundPath of the model is not valid since a value or error was found before the path end.';\n\n/**\n * An InvalidModelError can only happen when a user binds, whether sync\n * or async to shorted value.  See the unit tests for examples.\n *\n * @param {String} message\n * @private\n */\nmodule.exports = createErrorClass('InvalidModelError', function (boundPath, shortedPath) {\n  this.message = MESSAGE;\n  this.boundPath = boundPath;\n  this.shortedPath = shortedPath;\n});\n\n/***/ },\n/* 82 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar createErrorClass = __webpack_require__(4);\n\n/**\n * A request can only be retried up to a specified limit.  Once that\n * limit is exceeded, then an error will be thrown.\n *\n * @private\n */\nmodule.exports = createErrorClass('MaxRetryExceededError', function (maxRetryCount, absolute, relative, optimized) {\n    this.message = '' + 'Exceeded the max retry count (' + maxRetryCount + ') for these paths: \\n' + (absolute && 'absolute: [\\n\\t' + printPaths(absolute) + '\\n]\\n' || '') + (relative && 'relative: [\\n\\t' + printPaths(relative) + '\\n]\\n' || '') + (optimized && 'optimized: [\\n\\t' + printPaths(optimized) + '\\n]\\n' || '');\n});\n\nfunction printPaths(paths) {\n    return paths.map(function (path) {\n        return JSON.stringify(path);\n    }).join(',\\n\\t');\n}\n\n/***/ },\n/* 83 */\n/***/ function(module, exports) {\n\nmodule.exports = String.fromCharCode(30) + 'ƒ_';\n\n/***/ },\n/* 84 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar updateNodeAncestors = __webpack_require__(10);\n\nmodule.exports = function collect(lru, expired, totalArg, max, ratioArg, version) {\n\n    var total = totalArg;\n    var ratio = ratioArg;\n\n    if (typeof ratio !== 'number') {\n        ratio = 0.75;\n    }\n\n    var node,\n        size,\n        targetSize = max * ratio;\n\n    while (node = expired.pop()) {\n        total -= size = node.$size || 0;\n        updateNodeAncestors(node, size, lru, version);\n    }\n\n    if (total >= max) {\n        var prev = lru[\"\u001eƒ_tail\"];\n        while (total >= targetSize && (node = prev)) {\n            prev = prev[\"\u001eƒ_prev\"];\n            total -= size = node.$size || 0;\n            updateNodeAncestors(node, size, lru, version);\n        }\n\n        lru[\"\u001eƒ_tail\"] = node;\n        if (node == null) {\n            lru[\"\u001eƒ_head\"] = undefined;\n        } else {\n            node[\"\u001eƒ_next\"] = undefined;\n        }\n    }\n};\n\n/***/ },\n/* 85 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar Source = __webpack_require__(49);\nvar Subscriber = __webpack_require__(13);\nvar lruCollect = __webpack_require__(84);\nvar FalcorJSON = __webpack_require__(2);\nvar collapse = __webpack_require__(55);\nvar InvalidSourceError = __webpack_require__(47);\nvar MaxRetryExceededError = __webpack_require__(82);\n\nmodule.exports = Call;\n\nfunction Call(type, model, _args) {\n    Source.call(this, type);\n    if (model && _args) {\n        this.type = type;\n        this.source = this;\n        this.model = model;\n        this._args = _args;\n    }\n}\n\nCall.prototype = Object.create(Source.prototype);\n\nCall.prototype.lift = function (operator, source) {\n    source = new Call(source || this);\n    source.type = this.type;\n    source.model = this.model;\n    source._args = this._args;\n    source.operator = operator;\n    operator.data = operator.data || this.operator.data;\n    operator.errors = operator.errors || this.operator.errors;\n    operator.operation = operator.operation || this.operator.operation;\n    operator.progressive = operator.progressive || this.operator.progressive;\n    operator.maxRetryCount = operator.maxRetryCount || this.operator.maxRetryCount;\n    return source;\n};\n\nCall.prototype.operator = function (subscriber) {\n    return this._subscribe(subscriber);\n};\n\nCall.prototype._subscribe = function (subscriber) {\n    subscriber.onNext({\n        type: this.type,\n        args: this._args,\n        model: this.model,\n        version: this.model._root.version\n    });\n    subscriber.onCompleted();\n    return subscriber;\n};\n\nCall.prototype._toJSON = function (data, errors) {\n    if (data === undefined) {\n        data = {};\n        data.__proto__ = FalcorJSON.prototype;\n    }\n    return this.lift(new CallOperator(data, errors || this.operator.errors, 'json', this.operator.progressive, this.operator.maxRetryCount), this.source);\n};\n\nCall.prototype._toJSONG = function (data, errors) {\n    if (data === undefined) {\n        data = {};\n        data.__proto__ = FalcorJSON.prototype;\n    }\n    return this.lift(new CallOperator(data, errors || this.operator.errors, 'jsonGraph', this.operator.progressive, this.operator.maxRetryCount), this.source);\n};\n\nCall.prototype.retry = function (maxRetryCount) {\n    return this.lift(new CallOperator(this.operator.data, this.operator.errors, this.operator.operation, this.operator.progresive, maxRetryCount), this.source);\n};\n\nCall.prototype.progressively = function () {\n    return this.lift(new CallOperator(this.operator.data, this.operator.errors, this.operator.operation, true, this.operator.maxRetryCount), this.source);\n};\n\nfunction CallOperator(data, errors, operation, progressive, maxRetryCount) {\n    this.data = data;\n    this.errors = errors;\n    this.operation = operation;\n    this.progressive = progressive;\n    this.maxRetryCount = maxRetryCount;\n}\n\nCallOperator.prototype.call = function (source, destination) {\n    return source.subscribe(new CallSubscriber(destination, this.data, this.errors, this.operation, this.progressive));\n};\n\nfunction CallSubscriber(destination, data, errors, operation, progressive, maxRetryCount) {\n    Subscriber.call(this, destination);\n    this.data = data;\n    this.retryCount = -1;\n    this.errors = errors;\n    this.hasValue = false;\n    this.completed = false;\n    this.operation = operation;\n    this.progressive = progressive;\n    this.maxRetryCount = maxRetryCount;\n}\n\nCallSubscriber.prototype = Object.create(Subscriber.prototype);\nCallSubscriber.prototype.operations = {\n    get: __webpack_require__(61),\n    set: __webpack_require__(73),\n    call: __webpack_require__(60),\n    invalidate: __webpack_require__(71)\n};\n\nCallSubscriber.prototype.next = CallSubscriber.prototype.onNext = function (seed) {\n\n    if (!this.started) {\n        this.args = seed.args;\n        this.type = seed.type;\n        this.model = seed.model;\n        this.version = seed.version;\n        this.maxRetryCount = this.maxRetryCount || this.model._root.maxRetryCount;\n        return;\n    } else if (!this.destination) {\n        return;\n    }\n\n    var missing, fragments;\n    var type = seed.type;\n    var args = seed.args || seed.paths;\n\n    var data = this.data;\n    var model = this.model;\n    var errors = this.errors;\n    var results = this.results;\n    var version = this.version;\n    var hasValue = this.hasValue;\n    var operation = this.operation;\n    var progressive = this.progressive;\n    var seedIsImmutable = progressive && data;\n\n    if (model._recycleJSON && this.type === 'get') {\n        seedIsImmutable = false;\n    }\n\n    // If we request paths as JSON in progressive mode, ensure each progressive\n    // valueNode is immutable. If not in progressive mode, we can write into the\n    // same JSON tree until the request is completed.\n    if (seedIsImmutable) {\n        data = {};\n        data.__proto__ = FalcorJSON.prototype;\n    }\n\n    if (args && args.length) {\n\n        results = this.operations[type][operation](model, args, data, progressive || !model._source, this.retryCount === -1);\n\n        // We must communicate critical errors from get, such as bound path is\n        // broken or this is a JSONGraph request with a bound path.\n        if (results.error) {\n            return tryOnError(this, results.error);\n        }\n\n        errors && results.errors && errors.push.apply(errors, results.errors);\n\n        if (fragments = results.fragments) {\n            args = results.args;\n            this.fragments = fragments;\n        }\n\n        this.relative = results.relative;\n        this.requested = results.requested;\n        this.missing = missing = results.missing;\n        this.hasValue = hasValue || (hasValue = results.hasValue);\n    }\n\n    // We are done when there are no missing paths or\n    // the model does not have a dataSource to fetch from.\n    this.completed = !missing || !model._source;\n\n    if (type !== 'set') {\n        this.args = args;\n        if (seedIsImmutable) {\n            this.data = mergeInto(data, this.data);\n        }\n    }\n\n    if (progressive && hasValue && data && (data.json || data.jsonGraph)) {\n        tryOnNext(data, operation, model._root, this.destination);\n    }\n};\n\nCallSubscriber.prototype.error = CallSubscriber.prototype.onError = function (error) {\n    if (error instanceof InvalidSourceError) {\n        return Subscriber.prototype.onError.call(this, error);\n    }\n    this.errored = true;\n    this.onCompleted(error);\n};\n\nCallSubscriber.prototype.complete = CallSubscriber.prototype.onCompleted = function (error) {\n\n    if (!this.destination) {\n        return;\n    }\n\n    var data, type, errors, errored;\n\n    if (!this.started && (this.started = true)) {\n        this.onNext(this);\n    } else if (errored = this.errored) {\n        this.onNext({ type: 'get', paths: this.relative });\n    }\n\n    if (errored || this.completed) {\n        if (!this.progressive && this.hasValue && ((data = this.data) && data.json || data.jsonGraph)) {\n            tryOnNext(data, this.operation, this.model._root, this.destination);\n        }\n        errors = this.errors;\n        if (errored || error || errors && errors.length) {\n            return tryOnError(this, errors.length && errors || error);\n        }\n\n        return Subscriber.prototype.onCompleted.call(this);\n    }\n\n    if (++this.retryCount >= this.maxRetryCount) {\n        return tryOnError(this, new MaxRetryExceededError(this.retryCount, this.requested, this.relative, this.missing));\n    }\n\n    this.request = this.model._root.requests[this.type](this.model, this.missing, this.relative, this.fragments).subscribe(this);\n};\n\nCallSubscriber.prototype.dispose = CallSubscriber.prototype.unsubscribe = function () {\n\n    var model = this.model;\n    var version = this.version;\n    var request = this.request;\n\n    this.args = null;\n    this.data = null;\n    this.model = null;\n    this.errors = null;\n    this.errored = false;\n    this.started = false;\n    this.hasValue = false;\n    this.completed = false;\n\n    Subscriber.prototype.dispose.call(this);\n\n    if (request) {\n        this.request = null;\n        request.dispose();\n    }\n\n    if (model) {\n\n        var modelRoot = model._root;\n        var cache = modelRoot.cache;\n        var shouldCollectCache = modelRoot.syncRefCount <= 0 && version !== modelRoot.version;\n\n        // Prune the cache via the LRU if this is the last request.\n        if (shouldCollectCache) {\n\n            if (cache) {\n                lruCollect(modelRoot, modelRoot.expired, cache.$size || 0, modelRoot.maxSize, modelRoot.collectRatio, modelRoot.version);\n            }\n\n            var rootOnChangesCompletedHandler = modelRoot.onChangesCompleted;\n\n            if (rootOnChangesCompletedHandler) {\n                rootOnChangesCompletedHandler.call(modelRoot.topLevelModel);\n            }\n        }\n    }\n};\n\nfunction tryOnNext(data, operation, modelRoot, destination) {\n    if (operation === 'jsonGraph' && data.paths) {\n        data.paths = collapse(data.paths);\n    }\n    try {\n        ++modelRoot.syncRefCount;\n        destination.onNext(data);\n    } catch (e) {\n        throw e;\n    } finally {\n        --modelRoot.syncRefCount;\n    }\n}\n\nfunction tryOnError(self, error) {\n    try {\n        throw error;\n    } catch (err) {\n        Subscriber.prototype.onError.call(self, err);\n    }\n}\n\nfunction mergeInto(dest, node) {\n\n    var destValue,\n        nodeValue,\n        key,\n        keys = Object.keys(node),\n        index = -1,\n        length = keys.length;\n\n    while (++index < length) {\n\n        key = keys[index];\n\n        if (key === \"\u001eƒ_meta\") {\n            dest[\"\u001eƒ_meta\"] = node[\"\u001eƒ_meta\"];\n        } else {\n\n            nodeValue = node[key];\n            destValue = dest[key];\n\n            if (destValue !== nodeValue) {\n                if (!nodeValue || typeof nodeValue !== 'object') {\n                    if (destValue === undefined) {\n                        dest[key] = nodeValue;\n                    }\n                } else if (destValue === undefined) {\n                    dest[key] = nodeValue;\n                } else {\n                    mergeInto(destValue, nodeValue);\n                }\n            }\n        }\n    }\n\n    return dest;\n}\n\n/***/ },\n/* 86 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar Source = __webpack_require__(49);\nvar Request = __webpack_require__(87);\nvar Subscriber = __webpack_require__(13);\nvar Subscription = __webpack_require__(14);\nvar ImmediateScheduler = __webpack_require__(50);\n\nmodule.exports = Queue;\n\nfunction Queue(modelRoot) {\n    Subscription.call(this, []);\n    this.modelRoot = modelRoot;\n}\n\nQueue.prototype = Object.create(Subscription.prototype);\n\nQueue.prototype.set = isolateSet;\nQueue.prototype.call = isolateCall;\nQueue.prototype.get = batchAndDedupeGet;\n\nfunction isolateSet(model, optimized, requested, env) {\n    var queue = this;\n    return new Source(function (destination) {\n\n        var request = new Request('set', queue, model._source, new ImmediateScheduler());\n        var subscriber = request.subscribe(new Subscriber(destination, request));\n\n        queue.add(request);\n        request.data = env.jsonGraph;\n        request.requested.push(requested);\n        request.optimized.push(optimized);\n\n        request.connect();\n\n        return subscriber;\n    });\n}\n\nfunction isolateCall(model, optimized, requested, callArgs) {\n    var queue = this;\n    return new Source(function (destination) {\n\n        var request = new Request('call', queue, model._source, new ImmediateScheduler());\n        var subscriber = request.subscribe(new Subscriber(destination, request));\n\n        queue.add(request);\n        request.data = callArgs;\n        request.boundPath = model._path;\n\n        request.connect();\n\n        return subscriber;\n    });\n}\n\nfunction batchAndDedupeGet(model, optimized, requested) {\n    return new Dedupe(this, model._source, model._scheduler, requested, optimized);\n}\n\nfunction Dedupe(queue, source, scheduler, requested, optimized) {\n    this.queue = queue;\n    this.dataSource = source;\n    this.scheduler = scheduler;\n    this.requested = requested;\n    this.optimized = optimized;\n}\n\nDedupe.prototype.subscribe = function (destination) {\n\n    var queue = this.queue;\n    var source = this.dataSource;\n    var requested = this.requested;\n    var optimized = this.optimized;\n    var scheduler = this.scheduler;\n\n    var requestsIndex = -1;\n    var requests = queue.subscriptions;\n    var requestsCount = requests.length;\n    var subscription = new Subscription([], destination);\n\n    while (++requestsIndex < requestsCount) {\n\n        var request = requests[requestsIndex];\n\n        if (request.type !== 'get') {\n            continue;\n        }\n\n        if (request = request.batch(requested, optimized, requested = [], optimized = [])) {\n            subscription.add(request.subscribe(new Subscriber(destination, request)));\n        }\n\n        if (!optimized.length) {\n            break;\n        }\n    }\n\n    if (optimized.length) {\n        request = requests[requestsIndex] = new Request('get', queue, source, scheduler).batch(requested, optimized);\n        subscription.add(request.subscribe(new Subscriber(destination, request)));\n        request.connect();\n    }\n\n    return subscription;\n};\n\n/***/ },\n/* 87 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isArray = Array.isArray;\nvar Subject = __webpack_require__(88);\nvar Subscriber = __webpack_require__(13);\nvar Subscription = __webpack_require__(14);\nvar InvalidSourceError = __webpack_require__(47);\n\nvar setJSONGraphs = __webpack_require__(17);\nvar setPathValues = __webpack_require__(27);\nvar invalidatePaths = __webpack_require__(25);\n\nvar toPaths = __webpack_require__(106);\nvar toCollapseMap = __webpack_require__(103);\nvar toCollapseTrees = __webpack_require__(104);\nvar hasIntersection = __webpack_require__(102);\n\nmodule.exports = Request;\n\nfunction Request(type, queue, source, scheduler) {\n    Subject.call(this, [], queue);\n    this.tree = {};\n    this.paths = [];\n    this.type = type;\n    this.data = null;\n    this.active = false;\n    this.responded = false;\n    this.requested = [];\n    this.optimized = [];\n    this.disposable = null;\n    this.dataSource = source;\n    this.scheduler = scheduler;\n}\n\nRequest.prototype = Object.create(Subject.prototype);\n\nRequest.prototype.next = Request.prototype.onNext = function (env) {\n\n    var queue = this.parent;\n\n    if (!queue) {\n        return;\n    }\n\n    if (this.responded === false) {\n        this.responded = true;\n        // Remove this request from the request queue as soon as we get\n        // at least one response back. This ensures we won't be the target\n        // of in-flight batch requests.\n        queue.remove(this);\n    }\n\n    var changed = false;\n    var jsonGraph = env.jsonGraph;\n    var boundPath = this.boundPath;\n    var modelRoot = queue.modelRoot;\n    var invalidated = env.invalidated;\n    var paths = env.paths || this.paths;\n    var requested = this.requested.slice(0);\n    var rootChangeHandler = modelRoot.onChange;\n\n    // Run invalidations first.\n    if (invalidated && invalidated.length) {\n        changed = invalidatePaths({ _root: modelRoot, _path: [] }, invalidated, false);\n    }\n\n    if (paths && paths.length && !(!jsonGraph || typeof jsonGraph !== 'object')) {\n        var results = setJSONGraphs({ _root: modelRoot }, [{ paths: paths, jsonGraph: jsonGraph }], modelRoot.errorSelector, modelRoot.comparator, false);\n        paths = results[0];\n        changed = changed || results[2];\n    }\n\n    if (changed && rootChangeHandler) {\n        rootChangeHandler();\n    }\n\n    this.observers.slice(0).forEach(function (observer, index) {\n        observer.onNext({\n            type: 'get', paths: requested[index] || filterPathsBoundTo(boundPath, paths)\n        });\n    });\n};\n\nRequest.prototype.error = Request.prototype.onError = function (error) {\n\n    var queue = this.parent;\n\n    if (!queue) {\n        return;\n    }\n\n    if (this.responded === false) {\n        this.responded = true;\n        // Remove this request from the request queue as soon as we get\n        // at least one response back. This ensures we won't be the target\n        // of in-flight batch requests.\n        queue.remove(this);\n    }\n\n    error = error || {};\n\n    // Converts errors to object we can insert into the cache.\n    error = !(error instanceof Error) ?\n    // if it's $type error, use it raw\n    error.$type === \"error\" && error ||\n    // Otherwise make it an error\n    { $type: \"error\", value: error } :\n    // If it's instanceof Error, pluck error.message\n    { $type: \"error\", value: { message: error.message } };\n\n    var modelRoot = queue.modelRoot;\n\n    var errorPathValues = toPaths(toCollapseTrees(this.requested.reduce(function (collapseMap, paths) {\n        return toCollapseMap(paths, collapseMap);\n    }, {}))).map(function (path) {\n        return { path: path, value: error };\n    });\n\n    if (errorPathValues.length) {\n        setPathValues({ _root: modelRoot, _path: [] }, errorPathValues, modelRoot.errorSelector, modelRoot.comparator, false);\n    }\n\n    Subject.prototype.onError.call(this, error);\n};\n\nRequest.prototype.complete = Request.prototype.onCompleted = function () {\n    if (this.responded === false) {\n        this.onNext({});\n    }\n    Subject.prototype.onCompleted.call(this);\n};\n\nRequest.prototype.remove = function (subscription) {\n    var index = this.subscriptions.indexOf(subscription);\n    if (~index) {\n        this.requested.splice(index, 1);\n        this.optimized.splice(index, 1);\n        this.observers.splice(index, 1);\n        this.subscriptions.splice(index, 1);\n    }\n    if (this.subscriptions.length === 0) {\n        this.dispose();\n    }\n    return this;\n};\n\nRequest.prototype.dispose = Request.prototype.unsubscribe = function () {\n    this.tree = {};\n    this.data = null;\n    this.paths = null;\n    this.active = false;\n    this.boundPath = null;\n    this.requested = [];\n    this.optimized = [];\n    var queue = this.parent;\n    if (queue) {\n        this.parent = null;\n        queue.remove(this);\n    }\n    var disposable = this.disposable;\n    if (disposable) {\n        this.disposable = null;\n        if (disposable.dispose) {\n            disposable.dispose();\n        } else if (disposable.unsubscribe) {\n            disposable.unsubscribe();\n        }\n    }\n    Subject.prototype.dispose.call(this);\n};\n\nRequest.prototype.connect = function () {\n    if (!this.active && !this.disposable) {\n        var scheduledDisposable = this.scheduler.schedule(flush.bind(this));\n        if (!this.disposable) {\n            this.disposable = scheduledDisposable;\n        }\n    }\n    return this;\n};\n\nRequest.prototype.batch = function (requested, optimized, requestedComplements, optimizedComplements) {\n    if (this.active) {\n        var requestedIntersection = [];\n        var optimizedIntersection = [];\n        if (findIntersections(this.tree, requested, optimized, requestedComplements, optimizedComplements, requestedIntersection, optimizedIntersection)) {\n            this.requested.push(requestedIntersection);\n            this.optimized.push(optimizedIntersection);\n            return this;\n        }\n        return null;\n    }\n    this.requested.push(requested);\n    this.optimized.push(optimized);\n    return this;\n};\n\nfunction flush() {\n\n    this.active = true;\n\n    var obs,\n        paths = this.paths = toPaths(this.tree = toCollapseTrees(this.optimized.reduce(function (collapseMap, paths) {\n        return toCollapseMap(paths, collapseMap);\n    }, {})));\n\n    try {\n        switch (this.type) {\n            case 'get':\n                obs = this.dataSource.get(paths);\n                break;\n            case 'set':\n                obs = this.dataSource.set({ paths: paths, jsonGraph: this.data });\n                break;\n            case 'call':\n                obs = this.dataSource.call.apply(this.dataSource, this.data);\n                break;\n        }\n        this.disposable = obs.subscribe(this);\n    } catch (e) {\n        this.disposable = {};\n        Subject.prototype.onError.call(this, new InvalidSourceError(e));\n    }\n}\n\nfunction findIntersections(tree, requested, optimized, requestedComplements, optimizedComplements, requestedIntersection, optimizedIntersection) {\n\n    var index = -1;\n    var complementIndex = -1;\n    var intersectionIndex = -1;\n    var optTotal = optimized.length;\n    var reqTotal = requested.length - 1;\n\n    while (++index < optTotal) {\n        var path = optimized[index];\n        var pathLen = path.length;\n        var subTree = tree[pathLen];\n        if (subTree && hasIntersection(subTree, path, 0, pathLen)) {\n            optimizedIntersection[++intersectionIndex] = path;\n            requestedIntersection[intersectionIndex] = requested[index < reqTotal ? index : reqTotal];\n        } else {\n            optimizedComplements[++complementIndex] = path;\n            requestedComplements[complementIndex] = requested[index < reqTotal ? index : reqTotal];\n        }\n    }\n\n    return ~intersectionIndex;\n}\n\nfunction filterPathsBoundTo(boundPath, paths) {\n\n    var boundLength;\n\n    if (!boundPath || (boundLength = boundPath.length) === 0) {\n        return paths;\n    }\n\n    var filtered = [],\n        filteredIndex = -1,\n        keyIndex;\n    var path,\n        pathsIndex = -1,\n        pathsCount = paths.length;\n\n    outer: while (++pathsIndex < pathsCount) {\n        path = paths[pathsIndex];\n        if (path.length > boundLength) {\n            keyIndex = 0;\n            do {\n                if (path[keyIndex] !== boundPath[keyIndex]) {\n                    continue outer;\n                }\n            } while (++keyIndex < boundLength);\n            filtered[++filteredIndex] = path.slice(boundLength);\n        }\n    }\n\n    return filtered;\n}\n\n/***/ },\n/* 88 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar Subscriber = __webpack_require__(13);\nvar Subscription = __webpack_require__(14);\n\nmodule.exports = Subject;\n\nfunction Subject(observers, parent) {\n    Subscriber.call(this, null, parent);\n    this.observers = observers || [];\n}\n\nSubject.prototype = Object.create(Subscriber.prototype);\n\n// Unused\n// Subject.prototype.onNext = function(value) {\n//     this.observers.slice(0).forEach(function(observer) {\n//         observer.onNext(value);\n//     });\n// }\n\nSubject.prototype.onError = function (error) {\n    var observers = this.observers.slice(0);\n    this.dispose();\n    observers.forEach(function (observer) {\n        observer.onError(error);\n    });\n};\n\nSubject.prototype.onCompleted = function () {\n    var observers = this.observers.slice(0);\n    this.dispose();\n    observers.forEach(function (observer) {\n        observer.onCompleted();\n    });\n};\n\nSubject.prototype.subscribe = function (subscriber) {\n    this.observers.push(subscriber);\n    this.subscriptions.push(subscriber = new Subscription([subscriber], this));\n    return subscriber;\n};\n\nSubject.prototype.dispose = Subject.prototype.unsubscribe = function () {\n    this.observers = [];\n};\n\n/***/ },\n/* 89 */\n/***/ function(module, exports) {\n\nfunction TimeoutScheduler(delay) {\n    this.delay = delay;\n}\n\nvar TimerDisposable = function TimerDisposable(id) {\n    this.id = id;\n    this.disposed = false;\n};\n\nTimeoutScheduler.prototype.schedule = function schedule(action) {\n    return new TimerDisposable(setTimeout(action, this.delay));\n};\n\nTimerDisposable.prototype.dispose = TimerDisposable.prototype.unsubscribe = function () {\n    if (!this.disposed) {\n        clearTimeout(this.id);\n        this.id = null;\n        this.disposed = true;\n    }\n};\n\nmodule.exports = TimeoutScheduler;\n\n/***/ },\n/* 90 */\n/***/ function(module, exports) {\n\nmodule.exports = function arrayFlatMap(array, selector) {\n    var index = -1;\n    var i = -1;\n    var n = array.length;\n    var array2 = [];\n    while (++i < n) {\n        var array3 = selector(array[i], i, array);\n        var j = -1;\n        var k = array3.length;\n        while (++j < k) {\n            array2[++index] = array3[j];\n        }\n    }\n    return array2;\n};\n\n/***/ },\n/* 91 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isArray = Array.isArray;\nvar isInternal = __webpack_require__(29);\n\nmodule.exports = clone;\n\nfunction clone(source) {\n    var dest = source;\n    if (!(!dest || typeof dest !== 'object')) {\n        dest = isArray(source) ? [] : {};\n        for (var key in source) {\n            if (isInternal(key)) {\n                continue;\n            }\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n/***/ },\n/* 92 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(5);\nmodule.exports = function getSize(node) {\n    return isObject(node) && node.$expires || undefined;\n};\n\n/***/ },\n/* 93 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(5);\n\nmodule.exports = function getType(node, anyType) {\n    var type = isObject(node) && node.$type || void 0;\n    if (anyType && type) {\n        return 'branch';\n    }\n    return type;\n};\n\n/***/ },\n/* 94 */\n/***/ function(module, exports, __webpack_require__) {\n\nvar isArray = Array.isArray;\nvar isObject = __webpack_require__(5);\n\nmodule.exports = function isPathValue(pathValue) {\n    return isObject(pathValue) && (isArray(pathValue.path) || typeof pathValue.path === 'string');\n};\n\n/***/ },\n/* 95 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(96);\n\n\n/***/ },\n/* 96 */\n/***/ function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global, module) {'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ponyfill = __webpack_require__(97);\n\nvar _ponyfill2 = _interopRequireDefault(_ponyfill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar root; /* global window */\n\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (true) {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = (0, _ponyfill2['default'])(root);\nexports['default'] = result;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(32), __webpack_require__(98)(module)))\n\n/***/ },\n/* 97 */\n/***/ function(module, exports) {\n\n\"use strict\";\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports['default'] = symbolObservablePonyfill;\nfunction symbolObservablePonyfill(root) {\n\tvar result;\n\tvar _Symbol = root.Symbol;\n\n\tif (typeof _Symbol === 'function') {\n\t\tif (_Symbol.observable) {\n\t\t\tresult = _Symbol.observable;\n\t\t} else {\n\t\t\tresult = _Symbol('observable');\n\t\t\t_Symbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n\n/***/ },\n/* 98 */\n/***/ function(module, exports) {\n\nmodule.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.l; }\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.i; }\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n/***/ },\n/* 99 */\n/***/ function(module, exports) {\n\nmodule.exports = require(\"@graphistry/falcor-path-utils/lib/computeFlatBufferHash\");\n\n/***/ },\n/* 100 */\n/***/ function(module, exports) {\n\nmodule.exports = require(\"@graphistry/falcor-path-utils/lib/flatBufferToPaths\");\n\n/***/ },\n/* 101 */\n/***/ function(module, exports) {\n\nmodule.exports = require(\"@graphistry/falcor-path-utils/lib/getHashCode\");\n\n/***/ },\n/* 102 */\n/***/ function(module, exports) {\n\nmodule.exports = require(\"@graphistry/falcor-path-utils/lib/hasIntersection\");\n\n/***/ },\n/* 103 */\n/***/ function(module, exports) {\n\nmodule.exports = require(\"@graphistry/falcor-path-utils/lib/toCollapseMap\");\n\n/***/ },\n/* 104 */\n/***/ function(module, exports) {\n\nmodule.exports = require(\"@graphistry/falcor-path-utils/lib/toCollapseTrees\");\n\n/***/ },\n/* 105 */\n/***/ function(module, exports) {\n\nmodule.exports = require(\"@graphistry/falcor-path-utils/lib/toFlatBuffer\");\n\n/***/ },\n/* 106 */\n/***/ function(module, exports) {\n\nmodule.exports = require(\"@graphistry/falcor-path-utils/lib/toPaths\");\n\n/***/ },\n/* 107 */\n/***/ function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(56);\n\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// falcor.node.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmory imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmory exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tObject.defineProperty(exports, name, {\n \t\t\tconfigurable: false,\n \t\t\tenumerable: true,\n \t\t\tget: getter\n \t\t});\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 107);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 392b72f976201610e978","var now = require('../support/now');\nvar $now = require('../values/expires-now');\nvar $never = require('../values/expires-never');\n\nmodule.exports = function isExpired(node, expireImmediate) {\n    var exp = node.$expires;\n    if (exp === undefined || exp === null || exp === $never) {\n        return false;\n    } else if (exp === $now) {\n        return expireImmediate;\n    }\n    return exp < now();\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/isExpired.js","var splice = require('./../lru/splice');\n\nmodule.exports = function expireNode(node, expired, lru) {\n    if (!node[f_invalidated]) {\n        node[f_invalidated] = true;\n        expired.push(node);\n        splice(lru, node);\n    }\n    return node;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/expireNode.js","function FalcorJSON(f_meta) {\n    if (!f_meta) {\n        this[f_meta_data] = {};\n    } else if (!(this[f_meta_data] = f_meta[f_meta_data])) {\n        this[f_meta_data] = f_meta;\n    }\n}\n\nObject.defineProperties(FalcorJSON.prototype, [\n        'concat', 'copyWithin', 'entries', 'every', 'fill', 'filter',\n        'find', 'findIndex', 'forEach', 'includes', 'indexOf', 'join',\n        'keys', 'lastIndexOf', 'map', 'pop', 'push', 'reduce', 'reduceRight',\n        'reverse', 'shift', 'slice', 'some', 'sort', 'splice', 'unshift', 'values'\n    ]\n    .reduce(function (descriptors, name) {\n        descriptors[name] = {\n            writable: true, enumerable: false,\n            value: bindArrayMethod(Array.prototype[name])\n        };\n        return descriptors;\n    }, {\n        toJSON: { enumerable: false, value: toJSON },\n        toProps: { enumerable: false, value: toProps },\n        toString: { enumerable: false, value: toString },\n        $__hash: {\n            enumerable: false,\n            get: function() {\n                var f_meta = this[f_meta_data];\n                return f_meta && f_meta['$code'] || '';\n            }\n        },\n        $__path: {\n            enumerable: false,\n            get: function() {\n                var f_meta = this[f_meta_data];\n                return f_meta && f_meta[f_meta_abs_path] || [];\n            }\n        },\n        $__version: {\n            enumerable: false,\n            get: function() {\n                var f_meta = this[f_meta_data];\n                return f_meta && f_meta[f_meta_version] || 0;\n            }\n        }\n    })\n);\n\nfunction bindArrayMethod(fn) {\n    return (bound.fn = fn) && bound;\n    function bound() {\n        return bound.fn.apply(this, arguments);\n    }\n}\n\nvar isArray = Array.isArray;\nvar typeofObject = 'object';\nvar typeofString = 'string';\n\nfunction getInst(inst) {\n    var typeofInst = typeof inst;\n    var argsLen = arguments.length;\n    if (argsLen === 0) {\n        inst = this;\n    } else if (typeofInst !== typeofString) {\n        if (!inst || typeofInst !== typeofObject) {\n            return inst;\n        }\n    } else if (argsLen !== 1) {\n        return inst;\n    } else {\n        inst = this;\n    }\n    return inst === global ? undefined : inst;\n}\n\nfunction toJSON() {\n    return serialize(getInst.apply(this, arguments), toJSON);\n}\n\nfunction toString(includeMetadata) {\n    return JSON.stringify(serialize(\n        getInst.call(this, this),\n        serialize, includeMetadata === true\n    ));\n}\n\nfunction toProps(inst) {\n\n    inst = getInst.apply(this, arguments);\n\n    var f_meta_inst, f_meta_json, version = 0;\n    var json = serialize(inst, toProps, true, true);\n\n    if (inst && (f_meta_inst = inst[f_meta_data])) {\n        version = f_meta_inst[f_meta_version];\n    }\n\n    if (!(!json || typeof json !== typeofObject)) {\n        if (f_meta_json = json[f_meta_data]) {\n            f_meta_json[f_meta_version] = version;\n        }\n    }\n\n    return json;\n}\n\nfunction serialize(inst, serializer, includeMetadata, createWithProto) {\n\n    if (!inst || typeof inst !== typeofObject) {\n        return inst;\n    }\n\n    var count, total, f_meta, keys, key, xs, ys;\n\n    if (isArray(inst)) {\n        xs = inst;\n    } else {\n\n        count = -1;\n        keys = Object.keys(inst);\n        total = keys.length;\n        xs = {};\n\n        if (createWithProto) {\n            xs.__proto__ = FalcorJSON.prototype;\n        }\n\n        if (includeMetadata && (f_meta = inst[f_meta_data])) {\n\n            var $code = f_meta['$code'];\n            var abs_path = f_meta[f_meta_abs_path];\n            var deref_to = f_meta[f_meta_deref_to];\n            var deref_from = f_meta[f_meta_deref_from];\n\n            f_meta = {};\n            $code && (f_meta['$code'] = $code);\n            abs_path && (f_meta[f_meta_abs_path] = abs_path);\n            deref_to && (f_meta[f_meta_deref_to] = deref_to);\n            deref_from && (f_meta[f_meta_deref_from] = deref_from);\n\n            xs[f_meta_data] = f_meta;\n\n            if (createWithProto) {\n                ys = {};\n                ys.__proto__ = xs;\n                xs = ys;\n            }\n        }\n\n        while (++count < total) {\n            if ((key = keys[count]) !== f_meta_data) {\n                xs[key] = serializer(inst[key], serializer, includeMetadata);\n            }\n        }\n    }\n\n    return xs;\n}\n\nmodule.exports = FalcorJSON;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/json/FalcorJSON.js","var createErrorClass = require('./createErrorClass');\nvar MESSAGE = '`null` is not allowed in branch key positions.';\n\n/**\n * Do not allow null in path.\n */\nmodule.exports = createErrorClass('NullInPathError', function() {\n    this.message = MESSAGE;\n});\n\n\n\n// WEBPACK FOOTER //\n// ./lib/errors/NullInPathError.js","module.exports = createErrorClass;\n\nfunction createErrorClass(name, init) {\n    function E(message) {\n        this.message = message;\n        init && init.apply(this, arguments);\n        if (!Error.captureStackTrace) {\n            this.stack = (new Error()).stack;\n        } else {\n            Error.captureStackTrace(this, this.constructor);\n        }\n    }\n    E.prototype = Object.create(Error.prototype);\n    E.prototype.name = name;\n    E.prototype.constructor = E;\n    E.is = function(x) { return x.name === name; };\n    return E;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/errors/createErrorClass.js","module.exports = isObject;\n\nfunction isObject(value) {\n    return value !== null && typeof value === 'object';\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/support/isObject.js","var isInternal = require('../internal/isInternal');\n\nmodule.exports = clone;\n\nfunction clone(node) {\n\n    var key, keys = Object.keys(node),\n        json = {}, index = -1, length = keys.length;\n\n    while (++index < length) {\n        key = keys[index];\n        if (isInternal(key)) {\n            continue;\n        }\n        json[key] = node[key];\n    }\n\n    return json;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/clone.js","module.exports = function createHardlink(from, to) {\n\n    // create a back reference\n    var backRefs = to[f_refs_length] || 0;\n    to[f_ref + backRefs] = from;\n    to[f_refs_length] = backRefs + 1;\n\n    // create a hard reference\n    from[f_ref_index] = backRefs;\n    from[f_context] = to;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/createHardlink.js","var isObject = require('./../support/isObject');\nmodule.exports = function getSize(node) {\n    return isObject(node) && node.$size || 0;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/support/getSize.js","/**\n * getCachePosition makes a fast walk to the bound value since all bound\n * paths are the most possible optimized path.\n *\n * @param {Model} model -\n * @param {Array} path -\n * @returns {Mixed} - undefined if there is nothing in this position.\n * @private\n */\nmodule.exports = getCachePosition;\n\nfunction getCachePosition(cache, path) {\n\n    var node = cache;\n    var type, depth = 0;\n    var maxDepth = path.length;\n\n    if (maxDepth > 0) {\n        do {\n            node = node[path[depth]];\n\n            while (node && (type = node.$type) === $ref) {\n                node = getCachePosition(cache, node.value);\n            }\n        } while (++depth < maxDepth && node && !type);\n    }\n\n    return node;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/getCachePosition.js","var removeNodeAndDescendants = require('./removeNodeAndDescendants');\nvar updateBackReferenceVersions = require('./updateBackReferenceVersions');\n\nmodule.exports = updateNodeAncestors;\n\nfunction updateNodeAncestors(node, offset, lru, version) {\n    var curr = node, next = curr[f_parent];\n    do {\n        if ((curr.$size = (curr.$size || 0) - offset) > 0) {\n            if (!(next = curr[f_parent])) {\n                curr[f_version] = version;\n            } else if (curr[f_version] !== version) {\n                updateBackReferenceVersions(curr, version);\n            }\n        } else if (next = curr[f_parent]) {\n            removeNodeAndDescendants(curr, next, curr[f_key], lru, version);\n        }\n    } while (curr = next);\n    return node;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/updateNodeAncestors.js","var createErrorClass = require('./createErrorClass');\n\n/**\n * InvalidKeySetError happens when a dataSource syncronously throws\n * an exception during a get/set/call operation.\n *\n * @param {Error} error - The error that was thrown.\n * @private\n */\nmodule.exports = createErrorClass('InvalidKeySetError', function(path, keysOrRanges) {\n    this.mesage = '' +\n        'The KeySet ' + JSON.stringify(keysOrRanges) +\n        ' in path ' + JSON.stringify(path) + ' contains a KeySet. ' +\n        'Keysets can only contain Keys or Ranges';\n});\n\n\n\n// WEBPACK FOOTER //\n// ./lib/errors/InvalidKeySetError.js","var EXPIRES_NEVER = require('./../values/expires-never');\n\n// [H] -> Next -> ... -> [T]\n// [T] -> Prev -> ... -> [H]\nmodule.exports = function lruPromote(root, object) {\n    // Never promote node.$expires === 1.  They cannot expire.\n    if (object.$expires === EXPIRES_NEVER) {\n        return;\n    }\n\n    var head = root[f_head];\n\n    // Nothing is in the cache.\n    if (!head) {\n        root[f_head] = root[f_tail] = object;\n        return;\n    }\n\n    if (head === object) {\n        return;\n    }\n\n    // The item always exist in the cache since to get anything in the\n    // cache it first must go through set.\n    var prev = object[f_prev];\n    var next = object[f_next];\n    if (next) {\n        next[f_prev] = prev;\n    }\n    if (prev) {\n        prev[f_next] = next;\n    }\n    object[f_prev] = undefined;\n\n    // Insert into head position\n    root[f_head] = object;\n    object[f_next] = head;\n    head[f_prev] = object;\n\n    // If the item we promoted was the tail, then set prev to tail.\n    if (object === root[f_tail]) {\n        root[f_tail] = prev;\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/lru/promote.js","var Subscription = require('./Subscription');\n\nmodule.exports = Subscriber;\n\nfunction Subscriber(destination, parent, onCompleted) {\n    if (typeof destination === 'function' ||\n             typeof parent === 'function' ||\n        typeof onCompleted === 'function') {\n        Subscription.call(this, []);\n        this.destination = {\n            error: parent,\n            onError: parent,\n            next: destination,\n            onNext: destination,\n            complete: onCompleted,\n            onCompleted: onCompleted\n        }\n    } else {\n        Subscription.call(this, [], parent);\n        this.parent = parent;\n        this.destination = destination;\n    }\n}\n\nSubscriber.prototype = Object.create(Subscription.prototype);\n\nSubscriber.prototype.next =\nSubscriber.prototype.onNext = function onNext(value) {\n    var dest = this.destination;\n    if (dest) {\n        if (dest.onNext) {\n            dest.onNext(value);\n        } else if (dest.next) {\n            dest.next(value);\n        }\n    }\n}\n\nSubscriber.prototype.error =\nSubscriber.prototype.onError = function onError(error) {\n    var signaled = false;\n    var dest = this.destination;\n    if (dest) {\n        if (dest.onError) {\n            signaled = true;\n            dest.onError(error);\n        } else if (dest.error) {\n            signaled = true;\n            dest.error(error);\n        }\n        this.dispose();\n    }\n    if (!signaled) {\n        throw error;\n    }\n}\n\nSubscriber.prototype.complete =\nSubscriber.prototype.onCompleted = function onCompleted() {\n    var dest = this.destination;\n    if (dest) {\n        if (dest.onCompleted) {\n            dest.onCompleted();\n        } else if (dest.complete) {\n            dest.complete();\n        }\n        this.dispose();\n    }\n}\n\nSubscriber.prototype.dispose =\nSubscriber.prototype.unsubscribe = function () {\n    this.destination = null;\n    Subscription.prototype.dispose.call(this);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/request/Subscriber.js","module.exports = Subscription;\n\nfunction Subscription(subscriptions, parent) {\n    this.parent = parent;\n    this.subscriptions = subscriptions || [];\n}\n\nSubscription.prototype.add = function(subscription) {\n    return this.subscriptions.push(subscription) && this || this;\n}\n\nSubscription.prototype.remove = function(subscription) {\n    var index = this.subscriptions.indexOf(subscription);\n    if (~index) {\n        this.subscriptions.splice(index, 1);\n    }\n    return this;\n}\n\nSubscription.prototype.dispose =\nSubscription.prototype.unsubscribe = function () {\n    var subscription, subscriptions = this.subscriptions;\n    while (subscriptions.length) {\n        (subscription = subscriptions.pop()) &&\n            subscription.dispose &&\n            subscription.dispose();\n    }\n    var parent = this.parent;\n    if (parent) {\n        this.parent = null;\n        parent.remove && parent.remove(this);\n    }\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./lib/request/Subscription.js","var isExpired = require('../isExpired');\nvar expireNode = require('../expireNode');\nvar lruPromote = require('../../lru/promote');\n\nmodule.exports = onValueType;\n\nfunction onValueType(node, type, json,\n                     path, depth, seed, results,\n                     requestedPath, requestedLength,\n                     optimizedPath, optimizedLength,\n                     fromReference, modelRoot, expired, expireImmediate,\n                     branchSelector, boxValues, materialized, reportMissing,\n                     treatErrorsAsValues, onValue, onMissing, onMaterialize) {\n\n    var reportMaterialized = reportMissing;\n\n    if (type) {\n        if (isExpired(node, expireImmediate)) {\n            if (!node[f_invalidated]) {\n                expireNode(node, expired, modelRoot);\n            }\n        } else {\n            lruPromote(modelRoot, node);\n            if (node.value === undefined) {\n                reportMissing = false;\n                reportMaterialized = materialized;\n            } else {\n                if (seed) {\n                    if (fromReference) {\n                        requestedPath[depth] = null;\n                    }\n                    return onValue(node, type, depth, seed, results,\n                                   requestedPath, optimizedPath, optimizedLength,\n                                   fromReference, boxValues, materialized, treatErrorsAsValues);\n                }\n                return undefined;\n            }\n        }\n    }\n\n    if (materialized) {\n        seed && (results.hasValue = true);\n    } else if (!reportMaterialized) {\n        return undefined;\n    }\n\n    return onMissing(path, depth, results,\n                     requestedPath, requestedLength, fromReference,\n                     optimizedPath, optimizedLength, reportMissing,\n                     materialized, json, branchSelector,\n                     boxValues, onMaterialize, modelRoot);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/onValueType.js","var getCachePosition = require('./getCachePosition');\n\nmodule.exports = getBoundCacheNode;\n\nfunction getBoundCacheNode(model, path) {\n    path = path || model._path;\n    var node = model._node;\n    if (!node || node[f_parent] === undefined || node[f_invalidated]) {\n        model._node = null;\n        if (path.length === 0) {\n            node = model._root.cache;\n        } else {\n            node = getCachePosition(model._root.cache, path);\n            if (path === model._path) {\n                model._node = node;\n            }\n        }\n    }\n    return node;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/getBoundCacheNode.js","var arr = new Array(5);\nvar isExpired = require('../isExpired');\nvar expireNode = require('../expireNode');\nvar createHardlink = require('../createHardlink');\nvar mergeJSONGraphNode = require('../mergeJSONGraphNode');\nvar NullInPathError = require('../../errors/NullInPathError');\nvar iterateKeySet = require('@graphistry/falcor-path-utils/lib/iterateKeySet');\n\n/**\n * Merges a list of {@link JSONGraphEnvelope}s into a {@link JSONGraph}.\n * @function\n * @param {Object} model - the Model for which to merge the {@link JSONGraphEnvelope}s.\n * @param {Array.<PathValue>} jsonGraphEnvelopes - the {@link JSONGraphEnvelope}s to merge.\n * @return {Array.<Array.<Path>>} - an Array of Arrays where each inner Array is a list of requested and optimized paths (respectively) for the successfully set values.\n */\n\nmodule.exports = function setJSONGraphs(model, jsonGraphEnvelopes, errorSelector, comparator, expireImmediate) {\n\n    var modelRoot = model._root;\n    var lru = modelRoot;\n    var expired = modelRoot.expired;\n    var version = modelRoot.version + 1;\n    var cache = modelRoot.cache;\n\n    var requestedPath = [];\n    var optimizedPath = [];\n    var requestedPaths = [];\n    var optimizedPaths = [];\n    var jsonGraphEnvelopeIndex = -1;\n    var jsonGraphEnvelopeCount = jsonGraphEnvelopes.length;\n\n    while (++jsonGraphEnvelopeIndex < jsonGraphEnvelopeCount) {\n\n        var jsonGraphEnvelope = jsonGraphEnvelopes[jsonGraphEnvelopeIndex];\n        var paths = jsonGraphEnvelope.paths;\n        var jsonGraph = jsonGraphEnvelope.jsonGraph;\n\n        var pathIndex = -1;\n        var pathCount = paths.length;\n\n        while (++pathIndex < pathCount) {\n\n            var path = paths[pathIndex];\n            optimizedPath.index = 0;\n\n            setJSONGraphPathSet(\n                path, 0,\n                cache, cache, cache,\n                jsonGraph, jsonGraph, jsonGraph,\n                requestedPaths, optimizedPaths, requestedPath, optimizedPath,\n                version, expired, lru, comparator, errorSelector, expireImmediate\n            );\n        }\n    }\n\n    arr[0] = undefined;\n    arr[1] = undefined;\n    arr[2] = undefined;\n    arr[3] = undefined;\n    arr[4] = undefined;\n\n    if (cache[f_version] === version) {\n        modelRoot.version = version;\n        return [requestedPaths, optimizedPaths, true];\n    }\n\n    return [requestedPaths, optimizedPaths, false];\n};\n\n/* eslint-disable no-constant-condition */\nfunction setJSONGraphPathSet(\n    path, depth, root, parent, node,\n    messageRoot, messageParent, message,\n    requestedPaths, optimizedPaths, requestedPath, optimizedPath,\n    version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var note = {};\n    var branch = depth < path.length - 1;\n    var keySet = path[depth];\n    var key = iterateKeySet(keySet, note);\n    var optimizedIndex = optimizedPath.index;\n\n    do {\n\n        requestedPath.depth = depth;\n\n        var results = setNode(\n            root, parent, node, messageRoot, messageParent, message,\n            key, branch, false, requestedPath, optimizedPath, version,\n            expired, lru, comparator, errorSelector, expireImmediate\n        );\n\n        requestedPath[depth] = key;\n        requestedPath.index = depth;\n\n        var nextNode = results[0];\n        var nextParent = results[1];\n        var nextOptimizedPath = results[4];\n        nextOptimizedPath[nextOptimizedPath.index++] = key;\n\n        if (nextNode) {\n            if (branch) {\n                setJSONGraphPathSet(\n                    path, depth + 1, root, nextParent, nextNode,\n                    messageRoot, results[3], results[2],\n                    requestedPaths, optimizedPaths, requestedPath, nextOptimizedPath,\n                    version, expired, lru, comparator, errorSelector, expireImmediate\n                );\n            } else {\n                requestedPaths.push(requestedPath.slice(0, requestedPath.index + 1));\n                optimizedPaths.push(nextOptimizedPath.slice(0, nextOptimizedPath.index));\n            }\n        }\n        key = iterateKeySet(keySet, note);\n        if (note.done) {\n            break;\n        }\n        optimizedPath.index = optimizedIndex;\n    } while (true);\n}\n/* eslint-enable */\n\nfunction setReference(\n    root, node, messageRoot, message, requestedPath, optimizedPath,\n    version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var parent;\n    var messageParent;\n    var reference = node.value;\n    optimizedPath = reference.slice(0);\n\n    if (isExpired(node, expireImmediate)) {\n        expireNode(node, expired, lru);\n        node = undefined;\n        parent = root;\n        messageParent = messageRoot;\n        optimizedPath.index = reference.length;\n    } else {\n\n        var index = 0;\n        var container = node;\n        var count = reference.length - 1;\n        parent = node = root;\n        messageParent = message = messageRoot;\n\n        do {\n            var key = reference[index];\n            var branch = index < count;\n            optimizedPath.index = index;\n\n            var results = setNode(\n                root, parent, node, messageRoot, messageParent, message,\n                key, branch, true, requestedPath, optimizedPath, version,\n                expired, lru, comparator, errorSelector, expireImmediate\n            );\n            node = results[0];\n            optimizedPath = results[4];\n            if (!node || typeof node !== 'object') {\n                optimizedPath.index = index;\n                return results;\n            }\n            parent = results[1];\n            message = results[2];\n            messageParent = results[3];\n        } while (index++ < count);\n\n        optimizedPath.index = index;\n\n        if (container[f_context] !== node) {\n            createHardlink(container, node);\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n    arr[2] = message;\n    arr[3] = messageParent;\n    arr[4] = optimizedPath;\n\n    return arr;\n}\n\nfunction setNode(\n    root, parent, node, messageRoot, messageParent, message,\n    key, branch, reference, requestedPath, optimizedPath, version,\n    expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var type = node.$type;\n\n    while (type === $ref) {\n\n        var results = setReference(\n            root, node, messageRoot, message, requestedPath, optimizedPath,\n            version, expired, lru, comparator, errorSelector, expireImmediate\n        );\n\n        node = results[0];\n\n        if (!node || typeof node !== 'object') {\n            return results;\n        }\n\n        parent = results[1];\n        message = results[2];\n        messageParent = results[3];\n        optimizedPath = results[4];\n        type = node.$type;\n    }\n\n    if (type === undefined) {\n        if (key == null) {\n            if (branch) {\n                throw new NullInPathError();\n            } else if (node) {\n                key = node[f_key];\n            }\n        } else {\n            parent = node;\n            messageParent = message;\n            node = parent[key];\n            message = messageParent && messageParent[key];\n        }\n\n        node = mergeJSONGraphNode(\n            parent, node, message, key, requestedPath, optimizedPath,\n            version, expired, lru, comparator, errorSelector, expireImmediate\n        );\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n    arr[2] = message;\n    arr[3] = messageParent;\n    arr[4] = optimizedPath;\n\n    return arr;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/set/setJSONGraphs.js","var arr = new Array(3);\nvar isArray = Array.isArray;\nvar isExpired = require('../isExpired');\nvar expireNode = require('../expireNode');\nvar createHardlink = require('../createHardlink');\nvar getCachePosition = require('../getCachePosition');\nvar isInternalKey = require('../../support/isInternalKey');\nvar NullInPathError = require('../../errors/NullInPathError');\nvar mergeValueOrInsertBranch = require('../mergeValueOrInsertBranch');\n\n/**\n * Sets a list of {@link PathMapEnvelope}s into a {@link JSONGraph}.\n * @function\n * @param {Object} model - the Model for which to insert the PathMaps.\n * @param {Array.<PathMapEnvelope>} pathMapEnvelopes - the a list of {@link PathMapEnvelope}s to set.\n * @return {Array.<Array.<Path>>} - an Array of Arrays where each inner Array is a list of requested and optimized paths (respectively) for the successfully set values.\n */\n\nmodule.exports = function setPathMaps(model, pathMapEnvelopes, errorSelector, comparator, expireImmediate) {\n\n    var modelRoot = model._root;\n    var expired = modelRoot.expired;\n    var version = modelRoot.version + 1;\n    var bound = model._path;\n    var cache = modelRoot.cache;\n    var node = getCachePosition(cache, bound);\n\n    if (!node) {\n        return [[], [], false];\n    }\n\n    var parent = node[f_parent] || cache;\n\n    var requestedPath = [];\n    var requestedPaths = [];\n    var optimizedPaths = [];\n    var optimizedIndex = bound.length;\n    var pathMapIndex = -1;\n    var pathMapCount = pathMapEnvelopes.length;\n\n    while (++pathMapIndex < pathMapCount) {\n\n        var pathMapEnvelope = pathMapEnvelopes[pathMapIndex];\n        var optimizedPath = bound.slice(0);\n        optimizedPath.index = optimizedIndex;\n\n        setPathMap(\n            pathMapEnvelope.json, 0, cache, parent, node,\n            requestedPaths, optimizedPaths, requestedPath, optimizedPath,\n            version, expired, modelRoot, comparator, errorSelector, expireImmediate\n        );\n    }\n\n    arr[0] = undefined;\n    arr[1] = undefined;\n    arr[2] = undefined;\n\n    if (cache[f_version] === version) {\n        modelRoot.version = version;\n        return [requestedPaths, optimizedPaths, true];\n    }\n\n    return [requestedPaths, optimizedPaths, false];\n};\n\n/* eslint-disable no-constant-condition */\nfunction setPathMap(\n    pathMap, depth, root, parent, node,\n    requestedPaths, optimizedPaths, requestedPath, optimizedPath,\n    version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var keys = getKeys(pathMap);\n\n    if (keys && keys.length) {\n\n        var keyIndex = 0;\n        var keyCount = keys.length;\n        var optimizedIndex = optimizedPath.index;\n\n        do {\n            var key = keys[keyIndex];\n            var child = pathMap[key];\n            var branch = !(!child || typeof child !== 'object') && !child.$type;\n\n            requestedPath.depth = depth;\n\n            var results = setNode(\n                root, parent, node, key, child,\n                branch, false, requestedPath, optimizedPath, version,\n                expired, lru, comparator, errorSelector, expireImmediate\n            );\n\n            requestedPath[depth] = key;\n            requestedPath.index = depth;\n\n            var nextNode = results[0];\n            var nextParent = results[1];\n            var nextOptimizedPath = results[2];\n            nextOptimizedPath[nextOptimizedPath.index++] = key;\n\n            if (nextNode) {\n                if (branch) {\n                    setPathMap(\n                        child, depth + 1,\n                        root, nextParent, nextNode,\n                        requestedPaths, optimizedPaths, requestedPath, nextOptimizedPath,\n                        version, expired, lru, comparator, errorSelector, expireImmediate\n                    );\n                } else {\n                    requestedPaths.push(requestedPath.slice(0, requestedPath.index + 1));\n                    optimizedPaths.push(nextOptimizedPath.slice(0, nextOptimizedPath.index));\n                }\n            }\n            if (++keyIndex >= keyCount) {\n                break;\n            }\n            optimizedPath.index = optimizedIndex;\n        } while (true);\n    }\n}\n/* eslint-enable */\n\nfunction setReference(\n    value, root, node, requestedPath, optimizedPath, version,\n    expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var parent;\n    var reference = node.value;\n    optimizedPath = reference.slice(0);\n\n    if (isExpired(node, expireImmediate)) {\n        expireNode(node, expired, lru);\n        node = undefined;\n        parent = root;\n        optimizedPath.index = reference.length;\n    } else {\n        var container = node;\n        parent = root;\n\n        node = node[f_context];\n\n        if (node != null) {\n            parent = node[f_parent] || root;\n            optimizedPath.index = reference.length;\n        } else {\n\n            var index = 0;\n            var count = reference.length - 1;\n            optimizedPath.index = index;\n\n            parent = node = root;\n\n            do {\n                var key = reference[index];\n                var branch = index < count;\n                var results = setNode(\n                    root, parent, node, key, value,\n                    branch, true, requestedPath, optimizedPath, version,\n                    expired, lru, comparator, errorSelector, expireImmediate\n                );\n                node = results[0];\n                optimizedPath = results[2];\n                if (!node || typeof node !== 'object') {\n                    optimizedPath.index = index;\n                    return results;\n                }\n                parent = results[1];\n            } while (index++ < count);\n\n            optimizedPath.index = index;\n\n            if (container[f_context] !== node) {\n                createHardlink(container, node);\n            }\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n    arr[2] = optimizedPath;\n\n    return arr;\n}\n\nfunction setNode(\n    root, parent, node, key, value,\n    branch, reference, requestedPath, optimizedPath, version,\n    expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var type = node.$type;\n\n    while (type === $ref) {\n\n        var results = setReference(\n            value, root, node, requestedPath, optimizedPath, version,\n            expired, lru, comparator, errorSelector, expireImmediate);\n\n        node = results[0];\n\n        if (!node || typeof node !== 'object') {\n            return results;\n        }\n\n        parent = results[1];\n        optimizedPath = results[2];\n        type = node && node.$type;\n    }\n\n    if (!branch || type === undefined) {\n        if (key == null) {\n            if (branch) {\n                throw new NullInPathError();\n            } else if (node) {\n                key = node[f_key];\n            }\n        } else {\n            parent = node;\n            node = parent[key];\n        }\n\n        node = mergeValueOrInsertBranch(\n            parent, node, key, value,\n            branch, reference, requestedPath, optimizedPath, version,\n            expired, lru, comparator, errorSelector, expireImmediate\n        );\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n    arr[2] = optimizedPath;\n\n    return arr;\n}\n\nfunction getKeys(pathMap) {\n\n    if (!(!pathMap || typeof pathMap !== 'object') && !pathMap.$type) {\n        var keys = [];\n        var itr = 0;\n        if (isArray(pathMap)) {\n            keys[itr++] = 'length';\n        }\n        for (var key in pathMap) {\n            if (isInternalKey(key)) {\n                continue;\n            }\n            keys[itr++] = key;\n        }\n        return keys;\n    }\n\n    return undefined;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/set/setPathMaps.js","/**\n * Determined if the key passed in is an internal key.\n *\n * @param {String} x The key\n * @private\n * @returns {Boolean}\n */\n\nmodule.exports = isInternalKey;\n\nvar isInternal = require('../internal/isInternal');\n\nfunction isInternalKey(key) {\n    return key && key[0] === '$' || isInternal(key);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/support/isInternalKey.js","module.exports = require(\"@graphistry/falcor-path-utils/lib/support/materializedAtom\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@graphistry/falcor-path-utils/lib/support/materializedAtom\"\n// module id = 20\n// module chunks = 0","module.exports = require('./getJSON');\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/json/index.js","module.exports = require('./getJSONGraph');\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/jsonGraph/index.js","module.exports = inlineJSONGraphValue;\n\n/* eslint-disable no-constant-condition */\nfunction inlineJSONGraphValue(node, path, length, seed, branch) {\n\n    var key, depth = 0, prev,\n        curr = seed.jsonGraph;\n\n    if (!curr) {\n        seed.jsonGraph = curr = {};\n    }\n\n    do {\n        prev = curr;\n        key = path[depth++];\n        if (depth >= length) {\n            curr = prev[key] = branch !== true ? node : prev[key] || {};\n            break;\n        }\n        curr = prev[key] || (prev[key] = {});\n    } while (true);\n\n    return curr;\n}\n/* eslint-enable */\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/jsonGraph/inlineValue.js","var isArray = Array.isArray;\n\nmodule.exports = onMissing;\n\n/* eslint-disable no-constant-condition */\nfunction onMissing(path, depth, results,\n                   requestedPath, requestedLength, fromReference,\n                   optimizedPath, optimizedLength, reportMissing,\n                   reportMaterialized, json, branchSelector,\n                   boxValues, onMaterialize, modelRoot) {\n\n    if (!reportMissing && !reportMaterialized) {\n        return;\n    }\n\n    var keyset,\n        restPathIndex = -1,\n        restPathCount = requestedLength - depth,\n        restPath = restPathCount && new Array(restPathCount) || undefined;\n\n    while (++restPathIndex < restPathCount) {\n        keyset = path[restPathIndex + depth];\n        if (isEmptyKeySet(keyset)) {\n            return;\n        }\n        restPath[restPathIndex] = keyset;\n    }\n\n    var index, count, mPath;\n    var lastKeyIsNull = keyset === null;\n    var isRequestedPath = reportMissing;\n    var missDepth, missTotal, missingPath, missingPaths;\n\n    if (!reportMissing) {\n        missDepth = optimizedLength;\n        missingPath = optimizedPath;\n        missTotal = optimizedLength + restPathCount - Number(lastKeyIsNull);\n    } else {\n        missDepth = depth;\n        missTotal = requestedLength;\n        missingPath = requestedPath;\n        missingPaths = results.requested || (results.requested = []);\n    }\n\n    do {\n        if (restPathCount < requestedLength || !isRequestedPath) {\n            index = -1;\n            count = missDepth;\n            mPath = new Array(missTotal);\n            while (++index < count) {\n                mPath[index] = missingPath[index];\n            }\n            restPathIndex = -1;\n            while (index < missTotal) {\n                mPath[index++] = restPath[++restPathIndex];\n            }\n        }\n\n        // break after inserting both requested and optimized missing paths\n        if (isRequestedPath = !isRequestedPath) {\n            if (reportMissing) {\n                missingPaths[missingPaths.length] = mPath;\n            }\n            break;\n        }\n\n        missingPaths[missingPaths.length] = mPath || restPath;\n\n        missDepth = optimizedLength;\n        missingPath = optimizedPath;\n        missingPaths = results.missing || (results.missing = []);\n        missTotal = optimizedLength + restPathCount - Number(lastKeyIsNull);\n    } while (true);\n\n    if (reportMaterialized) {\n        return onMaterialize(json, mPath, missDepth, missTotal, branchSelector, boxValues, modelRoot);\n    }\n}\n/* eslint-enable */\n\nfunction isEmptyKeySet(keyset) {\n\n    // false if the keyset is a primitive\n    if ('object' !== typeof keyset) {\n        return false;\n    } else if (keyset === null) {\n        return false;\n    }\n\n    if (isArray(keyset)) {\n        // return true if the keyset is an empty array\n        return keyset.length === 0;\n    }\n\n    var rangeEnd = keyset.to,\n        from = keyset.from || 0;\n    if ('number' !== typeof rangeEnd) {\n        rangeEnd = from + (keyset.length || 0);\n    }\n\n    // false if trying to request incorrect or empty ranges\n    // e.g. { from: 10, to: 0 } or { from: 5, length: 0 }\n    return from >= rangeEnd;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/onMissing.js","var arr = new Array(2);\nvar isExpired = require('../isExpired');\nvar expireNode = require('../expireNode');\nvar lruPromote = require('../../lru/promote');\nvar getSize = require('../../support/getSize');\nvar createHardlink = require('../createHardlink');\nvar getBoundCacheNode = require('../getBoundCacheNode');\nvar updateNodeAncestors = require('../updateNodeAncestors');\nvar iterateKeySet = require('@graphistry/falcor-path-utils/lib/iterateKeySet');\n\n/**\n * Invalidates a list of Paths in a JSON Graph.\n * @function\n * @param {Object} model - the Model for which to insert the PathValues.\n * @param {Array.<PathValue>} paths - the PathValues to set.\n */\n\nmodule.exports = invalidatePathSets;\n\nfunction invalidatePathSets(model, paths, expireImmediate) {\n\n    var modelRoot = model._root;\n    var lru = modelRoot;\n    var expired = modelRoot.expired;\n    var version = modelRoot.version + 1;\n    var cache = modelRoot.cache;\n    var node = getBoundCacheNode(model);\n\n    if (!node) {\n        return false;\n    }\n\n    var pathIndex = -1;\n    var pathCount = paths.length;\n    var parent = node[f_parent] || cache;\n\n    while (++pathIndex < pathCount) {\n\n        var path = paths[pathIndex];\n\n        invalidatePathSet(\n            path, 0, cache, parent, node,\n            version, expired, lru, expireImmediate\n        );\n    }\n\n    arr[0] = undefined;\n    arr[1] = undefined;\n\n    if (cache[f_version] === version) {\n        modelRoot.version = version;\n        return true;\n    }\n\n    return false;\n}\n\nfunction invalidatePathSet(\n    path, depth, root, parent, node,\n    version, expired, lru, expireImmediate) {\n\n    var note = {};\n    var branch = depth < path.length - 1;\n    var keySet = path[depth];\n    var key = iterateKeySet(keySet, note);\n\n    do {\n        arr = invalidateNode(\n            root, parent, node,\n            key, branch, false, version,\n            expired, lru, expireImmediate\n        );\n        var nextNode = arr[0];\n        var nextParent = arr[1];\n        if (nextNode) {\n            if (branch) {\n                invalidatePathSet(\n                    path, depth + 1,\n                    root, nextParent, nextNode,\n                    version, expired, lru, expireImmediate\n                );\n            } else {\n                updateNodeAncestors(nextNode, getSize(nextNode), lru, version);\n            }\n        }\n        key = iterateKeySet(keySet, note);\n    } while (!note.done);\n}\n\nfunction invalidateReference(root, node, version, expired, lru, expireImmediate) {\n\n    if (isExpired(node, expireImmediate)) {\n        expireNode(node, expired, lru);\n        arr[0] = undefined;\n        arr[1] = root;\n        return arr;\n    }\n\n    lruPromote(lru, node);\n\n    var container = node;\n    var reference = node.value;\n    var parent = root;\n\n    node = node[f_context];\n\n    if (node != null) {\n        parent = node[f_parent] || root;\n    } else {\n\n        var index = 0;\n        var count = reference.length - 1;\n\n        parent = node = root;\n\n        do {\n            var key = reference[index];\n            var branch = index < count;\n            arr = invalidateNode(\n                root, parent, node,\n                key, branch, true, version,\n                expired, lru, expireImmediate\n            );\n            node = arr[0];\n            if (!node && typeof node !== 'object') {\n                return arr;\n            }\n            parent = arr[1];\n        } while (index++ < count);\n\n        if (container[f_context] !== node) {\n            createHardlink(container, node);\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n\n    return arr;\n}\n\nfunction invalidateNode(\n    root, parent, node,\n    key, branch, reference, version,\n    expired, lru, expireImmediate) {\n\n    var type = node.$type;\n\n    while (type === $ref) {\n\n        arr = invalidateReference(root, node, version, expired, lru, expireImmediate);\n\n        node = arr[0];\n\n        if (!node && typeof node !== 'object') {\n            return arr;\n        }\n\n        parent = arr[1];\n        type = node.$type;\n    }\n\n    if (type === undefined) {\n        if (key == null) {\n            if (branch) {\n                throw new Error('`null` is not allowed in branch key positions.');\n            } else if (node) {\n                key = node[f_key];\n            }\n        } else {\n            parent = node;\n            node = parent[key];\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n\n    return arr;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/invalidate/invalidatePathSets.js","var lruSplice = require('../lru/splice');\nvar isInternalKey = require('../support/isInternalKey');\nvar unlinkBackReferences = require('./unlinkBackReferences');\nvar unlinkForwardReference = require('./unlinkForwardReference');\nvar updateBackReferenceVersions = require('./updateBackReferenceVersions');\n\nmodule.exports = removeNodeAndDescendants;\n\nfunction removeNodeAndDescendants(node, parent, key, lru, version) {\n    if (!(!node || typeof node !== 'object')) {\n        var type = node.$type;\n        if (type === undefined) {\n            for (var key2 in node) {\n                if (!isInternalKey(key2)) {\n                    removeNodeAndDescendants(node[key2], node, key2, lru, version);\n                }\n            }\n        } else {\n            if (type === $ref) {\n                unlinkForwardReference(node);\n            }\n            lruSplice(lru, node);\n        }\n        unlinkBackReferences(updateBackReferenceVersions(node, version));\n        parent[key] = node[f_parent] = undefined;\n        return true;\n    }\n    return false;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/removeNodeAndDescendants.js","var arr = new Array(3);\nvar isExpired = require('../isExpired');\nvar expireNode = require('../expireNode');\nvar createHardlink = require('../createHardlink');\nvar getCachePosition = require('../getCachePosition');\nvar NullInPathError = require('../../errors/NullInPathError');\nvar iterateKeySet = require('@graphistry/falcor-path-utils/lib/iterateKeySet');\nvar mergeValueOrInsertBranch = require('../mergeValueOrInsertBranch');\n\n/**\n * Sets a list of {@link PathValue}s into a {@link JSONGraph}.\n * @function\n * @param {Object} model - the Model for which to insert the {@link PathValue}s.\n * @param {Array.<PathValue>} pathValues - the list of {@link PathValue}s to set.\n * @return {Array.<Array.<Path>>} - an Array of Arrays where each inner Array is a list of requested and optimized paths (respectively) for the successfully set values.\n */\n\nmodule.exports = function setPathValues(model, pathValues, errorSelector, comparator, expireImmediate) {\n\n    var modelRoot = model._root;\n    var expired = modelRoot.expired;\n    var version = modelRoot.version + 1;\n    var bound = model._path;\n    var cache = modelRoot.cache;\n    var node = getCachePosition(cache, bound);\n\n    if (!node) {\n        return [[], [], false];\n    }\n\n    var parent = node[f_parent] || cache;\n\n    var requestedPath = [];\n    var requestedPaths = [];\n    var optimizedPaths = [];\n    var optimizedIndex = bound.length;\n    var pathValueIndex = -1;\n    var pathValueCount = pathValues.length;\n\n    while (++pathValueIndex < pathValueCount) {\n\n        var pathValue = pathValues[pathValueIndex];\n        var path = pathValue.path;\n        var value = pathValue.value;\n        var optimizedPath = bound.slice(0);\n        optimizedPath.index = optimizedIndex;\n\n        setPathSet(\n            value, path, 0, cache, parent, node,\n            requestedPaths, optimizedPaths, requestedPath, optimizedPath,\n            version, expired, modelRoot, comparator, errorSelector, expireImmediate\n        );\n    }\n\n    arr[0] = undefined;\n    arr[1] = undefined;\n    arr[2] = undefined;\n\n    if (cache[f_version] === version) {\n        modelRoot.version = version;\n        return [requestedPaths, optimizedPaths, true];\n    }\n\n    return [requestedPaths, optimizedPaths, false];\n};\n\n/* eslint-disable no-constant-condition */\nfunction setPathSet(\n    value, path, depth, root, parent, node,\n    requestedPaths, optimizedPaths, requestedPath, optimizedPath,\n    version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var note = {};\n    var branch = depth < path.length - 1;\n    var keySet = path[depth];\n    var key = iterateKeySet(keySet, note);\n    var optimizedIndex = optimizedPath.index;\n\n    do {\n\n        requestedPath.depth = depth;\n        requestedPath[depth] = key;\n        requestedPath.index = depth;\n\n        var results = setNode(\n            root, parent, node, key, value,\n            branch, false, requestedPath, optimizedPath, version,\n            expired, lru, comparator, errorSelector, expireImmediate\n        );\n\n        requestedPath[depth] = key;\n        requestedPath.index = depth;\n\n        var nextNode = results[0];\n        var nextParent = results[1];\n        var nextOptimizedPath = results[2];\n        nextOptimizedPath[nextOptimizedPath.index++] = key;\n\n        if (nextNode) {\n            if (branch) {\n                setPathSet(\n                    value, path, depth + 1,\n                    root, nextParent, nextNode,\n                    requestedPaths, optimizedPaths, requestedPath, nextOptimizedPath,\n                    version, expired, lru, comparator, errorSelector, expireImmediate\n                );\n            } else {\n                requestedPaths.push(requestedPath.slice(0, requestedPath.index + 1));\n                optimizedPaths.push(nextOptimizedPath.slice(0, nextOptimizedPath.index));\n            }\n        }\n        key = iterateKeySet(keySet, note);\n        if (note.done) {\n            break;\n        }\n        optimizedPath.index = optimizedIndex;\n    } while (true);\n}\n/* eslint-enable */\n\nfunction setReference(\n    value, root, node, requestedPath, optimizedPath, version,\n    expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var parent;\n    var reference = node.value;\n    optimizedPath = reference.slice(0);\n\n    if (isExpired(node, expireImmediate)) {\n        expireNode(node, expired, lru);\n        node = undefined;\n        parent = root;\n        optimizedPath.index = reference.length;\n    } else {\n\n        var container = node;\n        parent = root;\n\n        node = node[f_context];\n\n        if (node != null) {\n            parent = node[f_parent] || root;\n            optimizedPath.index = reference.length;\n        } else {\n\n            var index = 0;\n            var count = reference.length - 1;\n\n            parent = node = root;\n\n            do {\n                var key = reference[index];\n                var branch = index < count;\n                optimizedPath.index = index;\n\n                var results = setNode(\n                    root, parent, node, key, value,\n                    branch, true, requestedPath, optimizedPath, version,\n                    expired, lru, comparator, errorSelector, expireImmediate\n                );\n                node = results[0];\n                optimizedPath = results[2];\n                if (!node || typeof node !== 'object') {\n                    optimizedPath.index = index;\n                    return results;\n                }\n                parent = results[1];\n            } while (index++ < count);\n\n            optimizedPath.index = index;\n\n            if (container[f_context] !== node) {\n                createHardlink(container, node);\n            }\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n    arr[2] = optimizedPath;\n\n    return arr;\n}\n\nfunction setNode(\n    root, parent, node, key, value,\n    branch, reference, requestedPath, optimizedPath, version,\n    expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var type = node.$type;\n\n    while (type === $ref) {\n\n        var results = setReference(\n            value, root, node, requestedPath, optimizedPath, version,\n            expired, lru, comparator, errorSelector, expireImmediate\n        );\n\n        node = results[0];\n\n        if (!node || typeof node !== 'object') {\n            return results;\n        }\n\n        parent = results[1];\n        optimizedPath = results[2];\n        type = node.$type;\n    }\n\n    if (!branch || type === undefined) {\n        if (key == null) {\n            if (branch) {\n                throw new NullInPathError();\n            } else if (node) {\n                key = node[f_key];\n            }\n        } else {\n            parent = node;\n            node = parent[key];\n        }\n\n        node = mergeValueOrInsertBranch(\n            parent, node, key, value,\n            branch, reference, requestedPath, optimizedPath, version,\n            expired, lru, comparator, errorSelector, expireImmediate\n        );\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n    arr[2] = optimizedPath;\n\n    return arr;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/set/setPathValues.js","module.exports = updateBackReferenceVersions;\n\nfunction updateBackReferenceVersions(nodeArg, version) {\n    var node = nodeArg, stack = [], count = 0, ref, i, n;\n    do {\n        i = -1;\n        ref = node[f_parent];\n        node[f_version] = version;\n        n = node[f_refs_length] || 0;\n        do {\n            if (ref && ref[f_version] !== version) {\n                stack[count++] = ref;\n            }\n            if (++i < n) {\n                ref = node[f_ref + i];\n                continue;\n            }\n            break;\n        } while (true);\n    } while (node = stack[--count]);\n    return nodeArg;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/updateBackReferenceVersions.js","/**\n * Determined if the key passed in is an f_ internal key.\n *\n * @param {String} x The key\n * @private\n * @returns {Boolean}\n */\n\nvar f_ = require('./f_');\nvar regexp = new RegExp('^' + f_, 'i', 'g');\n\nmodule.exports = regexp.test.bind(regexp);\n\n\n\n// WEBPACK FOOTER //\n// ./lib/internal/isInternal.js","var isObject = require('./../support/isObject');\nmodule.exports = function getTimestamp(node) {\n    return isObject(node) && node.$timestamp || undefined;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/support/getTimestamp.js","module.exports = 0;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/values/expires-now.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() { return this; })();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 32\n// module chunks = 0","module.exports = require(\"@graphistry/falcor-path-utils/lib/iterateKeySet\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@graphistry/falcor-path-utils/lib/iterateKeySet\"\n// module id = 33\n// module chunks = 0","var isArray = Array.isArray;\nvar walkPathAndBuildOutput = require('./walkPath');\nvar walkFlatBufferAndBuildOutput = require('./walkFlatBuffer');\nvar getBoundCacheNode = require('../../getBoundCacheNode');\nvar InvalidModelError = require('../../../errors/InvalidModelError');\nvar toFlatBuffer = require('@graphistry/falcor-path-utils/lib/toFlatBuffer');\nvar computeFlatBufferHash = require('@graphistry/falcor-path-utils/lib/computeFlatBufferHash');\n\nmodule.exports = getJSON;\n\nfunction getJSON(model, paths, seed, progressive, expireImmediate) {\n\n    var node,\n        referenceContainer,\n        boundPath = model._path,\n        modelRoot = model._root,\n        cache = modelRoot.cache,\n        requestedPath, requestedLength,\n        optimizedPath, optimizedLength =\n            boundPath && boundPath.length || 0;\n\n    // If the model is bound, get the cache position.\n    if (optimizedLength) {\n        node = getBoundCacheNode(model);\n        // If there was a short, then we 'throw an error' to the outside\n        // calling function which will onError the observer.\n        if (node && node.$type) {\n            return { error: new InvalidModelError(boundPath, boundPath) };\n        }\n        // We need to get the new cache position and copy the bound path.\n        optimizedPath = [];\n        for (var i = 0; i < optimizedLength; ++i) {\n            optimizedPath[i] = boundPath[i];\n        }\n        referenceContainer = model._referenceContainer;\n    } else {\n        node = cache;\n        optimizedPath = [];\n    }\n\n    requestedPath = [];\n\n    var isFlatBuffer = false,\n        json = seed && seed.json,\n        results = { data: seed },\n        boxValues = model._boxed,\n        expired = modelRoot.expired,\n        recycleJSON = model._recycleJSON,\n        hasDataSource = Boolean(model._source),\n        branchSelector = modelRoot.branchSelector,\n        materialized = seed && model._materialized,\n        treatErrorsAsValues = model._treatErrorsAsValues,\n        allowFromWhenceYouCame = model._allowFromWhenceYouCame;\n\n    var arr, path, pathsIndex = 0, pathsCount = paths.length;\n\n    if (pathsCount > 0) {\n        if (recycleJSON) {\n            isFlatBuffer = true;\n            if (pathsCount > 1 || isArray(paths[0])) {\n                paths = [computeFlatBufferHash(toFlatBuffer(paths, {}))];\n            }\n            arr = walkFlatBufferAndBuildOutput(cache, node, json, paths[0], 0, seed, results,\n                                               requestedPath, optimizedPath, optimizedLength,\n                                               /* fromReference = */ false, referenceContainer,\n                                               modelRoot, expired, expireImmediate, branchSelector,\n                                               boxValues, materialized, hasDataSource,\n                                               treatErrorsAsValues, allowFromWhenceYouCame);\n            json = arr[0];\n            arr[0] = undefined;\n            arr[1] = undefined;\n        } else {\n            do {\n                path = paths[pathsIndex];\n                requestedLength = path.length;\n                json = walkPathAndBuildOutput(cache, node, json, path,\n                                           /* depth = */ 0, seed, results,\n                                              requestedPath, requestedLength,\n                                              optimizedPath, optimizedLength,\n                                              /* fromReference = */ false, referenceContainer,\n                                              modelRoot, expired, expireImmediate, branchSelector,\n                                              boxValues, materialized, hasDataSource,\n                                              treatErrorsAsValues, allowFromWhenceYouCame);\n            } while (++pathsIndex < pathsCount)\n        }\n    }\n\n    var requested = results.requested;\n\n    results.args = isFlatBuffer && paths || requested;\n\n    if (requested && requested.length) {\n        results.relative = results.args;\n        if (optimizedLength) {\n            var boundRequested = [];\n            for (var i = 0, len = requested.length; i < len; ++i) {\n                boundRequested[i] = boundPath.concat(requested[i]);\n            }\n            results.requested = boundRequested;\n        }\n    }\n\n    if (results.hasValue) {\n        seed.json = json;\n    }\n\n    return results;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/json/getJSON.js","var arr = new Array(3);\nvar promote = require('../../../lru/promote');\nvar isExpired = require('../../isExpired');\nvar createHardlink = require('../../createHardlink');\nvar CircularReferenceError = require('../../../errors/CircularReferenceError');\n\nmodule.exports = getReferenceTarget;\n\n/* eslint-disable no-undef */\n/* eslint-disable no-console */\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction getReferenceTarget(root, ref, modelRoot, expireImmediate) {\n\n    promote(modelRoot, ref);\n\n    var context,\n        key, type, depth = 0,\n        node = root, path = ref.value,\n        copy = path, length = path.length;\n\n    do {\n        if (depth === 0 && undefined !== (context = ref[f_context])) {\n            node = context;\n            depth = length;\n        } else {\n            key = path[depth++];\n            if (undefined === (node = node[key])) {\n                break;\n            }\n        }\n\n        if (depth === length) {\n            type = node.$type;\n            // If the reference points to an expired\n            // value node, don't create a hard-link.\n            if (undefined !== type && isExpired(node, expireImmediate)) {\n                break;\n            }\n            // If a reference points to itself, throw an error.\n            else if (node === ref) {\n                throw new CircularReferenceError(path);\n            }\n            // If the node we land on isn't the existing ref context,\n            // create a hard-link between the reference and the node\n            // it points to.\n            else if (node !== context) {\n                createHardlink(ref, node);\n            }\n\n            // If the reference points to another ref, follow the new ref\n            // by resetting the relevant state and continuing from the top.\n            if (type === $ref) {\n\n                promote(modelRoot, node);\n\n                depth = 0;\n                ref = node;\n                node = root;\n                path = copy = ref.value;\n                length = path.length;\n\n                continue;\n            }\n            break;\n        } else if (undefined !== node.$type) {\n            break;\n        }\n    } while (true);\n\n    if (depth < length && undefined !== node) {\n        length = depth;\n    }\n\n    depth = -1;\n    path = new Array(length);\n    while (++depth < length) {\n        path[depth] = copy[depth];\n    }\n\n    arr[0] = node;\n    arr[1] = path;\n    arr[2] = ref;\n\n    return arr;\n}\n/* eslint-enable */\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/json/getReferenceTarget.js","var clone = require('../../clone');\nvar onError = require('./onError');\n\nmodule.exports = onJSONValue;\n\nfunction onJSONValue(node, type, depth, seed, results,\n                     requestedPath, optimizedPath, optimizedLength,\n                     fromReference, boxValues, materialized,\n                     treatErrorsAsValues) {\n\n    if ($error === type && !treatErrorsAsValues) {\n        return onError(node, depth, results, requestedPath,\n                       fromReference, boxValues);\n    }\n\n    results.hasValue = true;\n\n    // boxValues always clones the node\n    return !boxValues ? node.value : clone(node);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/json/onValue.js","var walkPathAndBuildOutput = require('./walkPath');\nvar BoundJSONGraphModelError = require('../../../errors/BoundJSONGraphModelError');\n\nmodule.exports = getJSONGraph;\n\nfunction getJSONGraph(model, paths, seed, progressive, expireImmediate) {\n\n    var node, cache,\n        boundPath = model._path,\n        modelRoot = model._root,\n        requestedPath, requestedLength,\n        optimizedPath, optimizedLength =\n            boundPath && boundPath.length || 0;\n\n    // If the model is bound, then get that cache position.\n    if (optimizedLength) {\n        // JSONGraph output cannot ever be bound or else it will\n        // throw an error.\n        return { error: new BoundJSONGraphModelError() };\n    } else {\n        optimizedPath = [];\n        cache = node = modelRoot.cache;\n    }\n\n    requestedPath = [];\n\n    var boxValues = model._boxed,\n        expired = modelRoot.expired,\n        materialized = model._materialized,\n        hasDataSource = Boolean(model._source),\n        treatErrorsAsValues = model._treatErrorsAsValues,\n\n        results = { data: seed },\n        pathsIndex = -1, pathsCount = paths.length;\n\n    while (++pathsIndex < pathsCount) {\n        var path = paths[pathsIndex];\n        requestedLength = path.length;\n        walkPathAndBuildOutput(cache, node, path,\n                            /* depth = */ 0, seed, results,\n                               requestedPath, requestedLength,\n                               optimizedPath, optimizedLength,\n              /* fromReference = */ false, modelRoot, expired, expireImmediate,\n                               boxValues, materialized, hasDataSource, treatErrorsAsValues);\n    }\n\n    results.args =\n    results.relative = results.requested;\n\n    return results;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/jsonGraph/getJSONGraph.js","var isArray = Array.isArray;\nvar typeofNumber = 'number';\nvar typeofObject = 'object';\nvar clone = require('../clone');\nvar FalcorJSON = require('./json/FalcorJSON');\nvar NullInPathError = require('../../errors/NullInPathError');\nvar InvalidKeySetError = require('../../errors/InvalidKeySetError');\nvar materializedAtom = require('@graphistry/falcor-path-utils/lib/support/materializedAtom');\n\nmodule.exports = onMaterialize;\n\n/* eslint-disable camelcase */\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction onMaterialize(json, path, depth, length,\n                       branchSelector, boxValues, modelRoot) {\n\n    var type, refTarget;\n\n    // ============ Check for base cases ================\n\n    // If there's nowhere to go, we've reached a terminal node, or hit\n    // the end of the path, stop now. Either build missing paths or report the value.\n    if (depth === length) {\n        return boxValues ? clone(materializedAtom) : undefined;\n    }\n\n    var f_meta;\n\n    var nextKey,\n        keyset, keyIsRange,\n        nextDepth = depth + 1,\n        rangeEnd, keysOrRanges,\n        keysetIndex = -1, keysetLength = 0;\n\n    keyset = path[depth];\n\n    if (!json || typeofObject !== typeof json) {\n        json = {};\n        json.__proto__ = FalcorJSON.prototype;\n        json[f_meta_data] = f_meta = {};\n        f_meta[f_meta_version] = modelRoot.version;\n        f_meta[f_meta_abs_path] = path.slice(0, depth);\n        if (branchSelector) {\n            json = branchSelector(json);\n        }\n    } else if (!(f_meta = json[f_meta_data])) {\n        json[f_meta_data] = f_meta = {};\n        f_meta[f_meta_version] = modelRoot.version;\n        f_meta[f_meta_abs_path] = path.slice(0, depth);\n    } else {\n        f_meta[f_meta_version] = modelRoot.version;\n        f_meta[f_meta_abs_path] = path.slice(0, depth);\n    }\n\n    // Iterate over every key in the keyset. This loop is perhaps a bit clever,\n    // but we do it this way because this is a performance-sensitive code path.\n    // This loop simulates a recursive function if we encounter a Keyset that\n    // contains Keys or Ranges. This is accomplished by a nifty dance between an\n    // outer loop and an inner loop.\n    //\n    // The outer loop is responsible for identifying if the value at this depth\n    // is a Key, Range, or Keyset. If it encounters a Keyset, the `keysetIndex`,\n    // `keysetLength`, and `keysOrRanges` variables are assigned and the outer\n    // loop restarts. If it encounters a Key or Range, `nextKey`, `keyIsRange`,\n    // and `rangeEnd` are assigned values which signal whether the inner loop\n    // should iterate a Range or exit after the first run.\n    //\n    // The inner loop steps `nextKey` one level down in the cache. If a Range\n    // was encountered in the outer loop, the inner loop will iterate until the\n    // Range has been exhausted. If a Key was encountered, the inner loop exits\n    // after the first execution.\n    //\n    // After the inner loop exits, the outer loop iterates the `keysetIndex`\n    // until the Keyset is exhausted. `keysetIndex` and `keysetLength` are\n    // initialized to -1 and 0 respectively, so if a Keyset wasn't encountered\n    // at this depth in the path, then the outer loop exits after one execution.\n\n    iteratingKeyset: do {\n\n        // If the keyset is a primitive value, we've found our `nextKey`.\n        if (typeofObject !== typeof keyset) {\n            nextKey = keyset;\n            rangeEnd = undefined;\n            keyIsRange = false;\n        }\n        // If we encounter a Keyset, either iterate through the Keys and Ranges,\n        // or throw an error if we're already iterating a Keyset. Keysets cannot\n        // contain other Keysets.\n        else if (isArray(keyset)) {\n            // If we've already encountered an Array keyset, throw an error.\n            if (keysOrRanges !== undefined) {\n                throw new InvalidKeySetError(path, keysOrRanges);\n            }\n            keysetIndex = 0;\n            keysOrRanges = keyset;\n            keysetLength = keyset.length;\n            // If an Array of keys or ranges is empty, terminate the graph walk\n            // and return the json constructed so far. An example of an empty\n            // Keyset is: ['lolomo', [], 'summary']. This should short circuit\n            // without building missing paths.\n            if (0 === keysetLength) {\n                break iteratingKeyset;\n            }\n            // Assign `keyset` to the first value in the Keyset. Re-entering the\n            // outer loop mimics a singly-recursive function call.\n            keyset = keysOrRanges[keysetIndex];\n            continue iteratingKeyset;\n        }\n        // If the Keyset isn't a primitive or Array, then it must be a Range.\n        else {\n            rangeEnd = keyset.to;\n            nextKey = keyset.from || 0;\n            if (typeofNumber !== typeof rangeEnd) {\n                rangeEnd = nextKey + (keyset.length || 0) - 1;\n            }\n            if ((rangeEnd - nextKey) < 0) {\n                break iteratingKeyset;\n            }\n            keyIsRange = true;\n        }\n\n        // Now that we have the next key, step down one level in the cache.\n        do {\n            // insert the materialized branch\n            json[nextKey] = onMaterialize(\n                json[nextKey], path,\n                nextDepth, length,\n                branchSelector,\n                boxValues,\n                modelRoot\n            );\n        }\n        // Re-enter the inner loop and continue iterating the Range, or exit\n        // here if we encountered a Key.\n        while (keyIsRange && ++nextKey <= rangeEnd);\n\n        // If we've exhausted the Keyset (or never encountered one at all),\n        // exit the outer loop.\n        if (++keysetIndex === keysetLength) {\n            break iteratingKeyset;\n        }\n\n        // Otherwise get the next Key or Range from the Keyset and re-enter the\n        // outer loop from the top.\n        keyset = keysOrRanges[keysetIndex];\n    } while (true);\n\n    // `json` will be a branch if any cache hits, or undefined if all cache misses\n    return json;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/onMaterialize.js","var isArray = Array.isArray;\nvar isPathValue = require('../support/isPathValue');\nvar isJSONEnvelope = require('../support/isJSONEnvelope');\nvar isJSONGraphEnvelope = require('../support/isJSONGraphEnvelope');\n\nmodule.exports = groupCacheArguments;\n\nfunction groupCacheArguments(args) {\n\n    var groups = [];\n    var argIndex = -1;\n    var argCount = args.length;\n    var group, groupType, arg, argType;\n\n    while (++argIndex < argCount) {\n        arg = args[argIndex];\n        if (isArray(arg)) {\n            arg = { path: arg };\n            argType = 'PathValues';\n        } else if (isPathValue(arg)) {\n            argType = 'PathValues';\n        } else if (isJSONGraphEnvelope(arg)) {\n            argType = 'JSONGraphs';\n        } else if (isJSONEnvelope(arg)) {\n            argType = 'PathMaps';\n        }\n\n        if (groupType !== argType) {\n            groupType = argType;\n            groups.push(group = {\n                arguments: [],\n                inputType: argType\n            });\n        }\n\n        group.arguments.push(arg);\n    }\n\n    return groups;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/groupCacheArguments.js","module.exports = function insertNode(node, parent, key, version, optimizedPath) {\n    node[f_key] = key;\n    node[f_parent] = parent;\n\n    if (version !== undefined) {\n        node[f_version] = version;\n    }\n    if (!node[f_abs_path]) {\n        node[f_abs_path] = optimizedPath.slice(0, optimizedPath.index).concat(key);\n    }\n\n    parent[key] = node;\n\n    return node;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/insertNode.js","var arr = new Array(2);\nvar isExpired = require('../isExpired');\nvar expireNode = require('../expireNode');\nvar lruPromote = require('../../lru/promote');\nvar getSize = require('../../support/getSize');\nvar createHardlink = require('../createHardlink');\nvar getBoundCacheNode = require('../getBoundCacheNode');\nvar isInternalKey = require('../../support/isInternalKey');\nvar updateNodeAncestors = require('../updateNodeAncestors');\n\n/**\n * Sets a list of PathMaps into a JSON Graph.\n * @function\n * @param {Object} model - the Model for which to insert the PathMaps.\n * @param {Array.<PathMapEnvelope>} pathMapEnvelopes - the a list of @PathMapEnvelopes to set.\n */\n\nmodule.exports = invalidatePathMaps;\n\nfunction invalidatePathMaps(model, pathMapEnvelopes, expireImmediate) {\n\n    var modelRoot = model._root;\n    var lru = modelRoot;\n    var expired = modelRoot.expired;\n    var version = modelRoot.version + 1;\n    var comparator = modelRoot._comparator;\n    var cache = modelRoot.cache;\n    var node = getBoundCacheNode(model);\n\n    if (!node) {\n        return false;\n    }\n\n    var pathMapIndex = -1;\n    var parent = node[f_parent] || cache;\n    var pathMapCount = pathMapEnvelopes.length;\n\n    while (++pathMapIndex < pathMapCount) {\n\n        var pathMapEnvelope = pathMapEnvelopes[pathMapIndex];\n\n        invalidatePathMap(\n            pathMapEnvelope.json, 0, cache, parent, node,\n            version, expired, lru, comparator, expireImmediate\n        );\n    }\n\n    arr[0] = undefined;\n    arr[1] = undefined;\n\n    if (cache[f_version] === version) {\n        modelRoot.version = version;\n        return true;\n    }\n\n    return false;\n}\n\nfunction invalidatePathMap(\n    pathMap, depth, root, parent, node, version,\n    expired, lru, comparator, expireImmediate) {\n\n    if (!pathMap || typeof pathMap !== 'object' || pathMap.$type) {\n        return;\n    }\n\n    for (var key in pathMap) {\n        if (!isInternalKey(key)) {\n            var child = pathMap[key];\n            var branch = !(!child || typeof child !== 'object') && !child.$type;\n            arr = invalidateNode(\n                root, parent, node,\n                key, child, branch, false, version, expired,\n                lru, comparator, expireImmediate\n            );\n            var nextNode = arr[0];\n            var nextParent = arr[1];\n            if (nextNode) {\n                if (branch) {\n                    invalidatePathMap(\n                        child, depth + 1,\n                        root, nextParent, nextNode,\n                        version, expired, lru, comparator, expireImmediate\n                    );\n                } else {\n                    updateNodeAncestors(nextNode, getSize(nextNode), lru, version);\n                }\n            }\n        }\n    }\n}\n\nfunction invalidateReference(\n    value, root, node, version,\n    expired, lru, comparator, expireImmediate) {\n\n    if (isExpired(node, expireImmediate)) {\n        expireNode(node, expired, lru);\n        arr[0] = undefined;\n        arr[1] = root;\n        return arr;\n    }\n\n    lruPromote(lru, node);\n\n    var container = node;\n    var reference = node.value;\n    var parent = root;\n\n    node = node[f_context];\n\n    if (node != null) {\n        parent = node[f_parent] || root;\n    } else {\n\n        var index = 0;\n        var count = reference.length - 1;\n\n        parent = node = root;\n\n        do {\n            var key = reference[index];\n            var branch = index < count;\n            arr = invalidateNode(\n                root, parent, node,\n                key, value, branch, true, version,\n                expired, lru, comparator, expireImmediate\n            );\n            node = arr[0];\n            if (!node && typeof node !== 'object') {\n                return arr;\n            }\n            parent = arr[1];\n        } while (index++ < count);\n\n        if (container[f_context] !== node) {\n            createHardlink(container, node);\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n\n    return arr;\n}\n\nfunction invalidateNode(\n    root, parent, node,\n    key, value, branch, reference, version,\n    expired, lru, comparator, expireImmediate) {\n\n    var type = node.$type;\n\n    while (type === $ref) {\n\n        arr = invalidateReference(\n            value, root, node, version, expired,\n            lru, comparator, expireImmediate\n        );\n\n        node = arr[0];\n\n        if (!node && typeof node !== 'object') {\n            return arr;\n        }\n\n        parent = arr[1];\n        type = node.$type;\n    }\n\n    if (type === undefined) {\n        if (key == null) {\n            if (branch) {\n                throw new Error('`null` is not allowed in branch key positions.');\n            } else if (node) {\n                key = node[f_key];\n            }\n        } else {\n            parent = node;\n            node = parent[key];\n        }\n    }\n\n    arr[0] = node;\n    arr[1] = parent;\n\n    return arr;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/invalidate/invalidatePathMaps.js","var $now = require('../values/expires-now');\nvar getType = require('../support/getType');\nvar getSize = require('../support/getSize');\nvar getTimestamp = require('../support/getTimestamp');\n\nvar wrapNode = require('./wrapNode');\nvar isExpired = require('./isExpired');\nvar expireNode = require('./expireNode');\nvar insertNode = require('./insertNode');\nvar replaceNode = require('./replaceNode');\nvar reconstructPath = require('./reconstructPath');\nvar updateNodeAncestors = require('./updateNodeAncestors');\nvar removeNodeAndDescendants = require('./removeNodeAndDescendants');\n\nmodule.exports = function mergeValueOrInsertBranch(\n    parent, node, key, value,\n    branch, reference, requestedPath, optimizedPath, version,\n    expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var cType = getType(node, reference);\n\n    if (branch || reference) {\n        if (cType && isExpired(node,\n            /* expireImmediate:\n             * force true so the node is marked as\n             * expired but keep using it for the merge if it expires immediately\n             */\n            true)) {\n            expireNode(node, expired, lru);\n            cType = node.$expires === $now ? cType : 'expired';\n        }\n        if ((cType && cType !== $ref) || (!node || typeof node !== 'object')) {\n            node = replaceNode(node, {}, parent, key, lru, version);\n            node = insertNode(node, parent, key, version, optimizedPath);\n        }\n    } else {\n        var message = value;\n        var isDistinct = true;\n        var mType = getType(message);\n\n        // If both the cache and message are primitives,\n        // insert the message into the cache.\n        if (!cType && !mType) {\n            isDistinct = true;\n        }\n        // Compare the current cache value with the new value. If either of\n        // them don't have a timestamp, or the message's timestamp is newer,\n        // replace the cache value with the message value. If a comparator\n        // is specified, the comparator takes precedence over timestamps.\n        else if (comparator) {\n            isDistinct = !(comparator.length < 3 ?\n                comparator(node, message) : comparator(node, message,\n                    optimizedPath.slice(0, optimizedPath.index))\n            );\n        } else {\n            // Comparing either Number or undefined to undefined always results in false.\n            isDistinct = getTimestamp(message) < getTimestamp(node) === false;\n        }\n\n        if (isDistinct) {\n\n            if (errorSelector && mType === $error) {\n                message = errorSelector(reconstructPath(requestedPath, key), message);\n            }\n\n            var sizeOffset = getSize(node) - getSize(message =\n                wrapNode(message, mType, mType ? message.value : message));\n\n            node = replaceNode(node, message, parent, key, lru, version);\n            parent = updateNodeAncestors(parent, sizeOffset, lru, version);\n            node = insertNode(node, parent, key, version, optimizedPath);\n        }\n    }\n\n    return node;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/mergeValueOrInsertBranch.js","/**\n * Reconstructs the path for the current key, from currentPath (requestedPath)\n * state maintained during set/merge walk operations.\n *\n * During the walk, since the requestedPath array is updated after we attempt to\n * merge/insert nodes during a walk (it reflects the inserted node's parent branch)\n * we need to reconstitute a path from it.\n *\n * @param  {Array} currentPath The current requestedPath state, during the walk\n * @param  {String} key        The current key value, during the walk\n * @return {Array} A new array, with the path which represents the node we're about\n * to insert\n */\nmodule.exports = function reconstructPath(currentPath, key) {\n\n    var path = currentPath.slice(0, currentPath.depth);\n    path[path.length] = key;\n\n    return path;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/reconstructPath.js","var transferBackReferences = require('./transferBackReferences');\nvar removeNodeAndDescendants = require('./removeNodeAndDescendants');\nvar updateBackReferenceVersions = require('./updateBackReferenceVersions');\n\nmodule.exports = function replaceNode(node, replacement, parent, key, lru, version) {\n    if (node === replacement) {\n        return node;\n    } else if (!(!node || typeof node !== 'object')) {\n        transferBackReferences(node, replacement);\n        removeNodeAndDescendants(node, parent, key, lru);\n        updateBackReferenceVersions(replacement, version);\n    }\n\n    parent[key] = replacement;\n    return replacement;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/replaceNode.js","var isArray = Array.isArray;\nvar now = require('../support/now');\nvar clone = require('./../support/clone');\nvar getSize = require('./../support/getSize');\nvar getExpires = require('../support/getExpires');\nvar expiresNow = require('../values/expires-now');\n\nvar atomSize = 50;\n\nmodule.exports = function wrapNode(nodeArg, typeArg, value) {\n\n    var size = 0;\n    var node = nodeArg;\n    var type = typeArg;\n\n    if (type) {\n        var modelCreated = node[f_wrapped_value];\n        node = clone(node);\n        size = getSize(node);\n        node.$type = type;\n        node[f_prev] = undefined;\n        node[f_next] = undefined;\n        node[f_wrapped_value] = modelCreated || false;\n    } else {\n        node = { $type: $atom, value: value };\n        node[f_prev] = undefined;\n        node[f_next] = undefined;\n        node[f_wrapped_value] = true;\n    }\n\n    if (value == null) {\n        size = atomSize + 1;\n    } else if (size == null || size <= 0) {\n        switch (typeof value) {\n            case 'object':\n                if (isArray(value)) {\n                    size = atomSize + value.length;\n                } else {\n                    size = atomSize + 1;\n                }\n                break;\n            case 'string':\n                size = atomSize + value.length;\n                break;\n            default:\n                size = atomSize + 1;\n                break;\n        }\n    }\n\n    var expires = getExpires(node);\n\n    if (typeof expires === 'number' && expires < expiresNow) {\n        node.$expires = now() + (expires * -1);\n    }\n\n    node.$size = size;\n\n    return node;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/wrapNode.js","var createErrorClass = require('./createErrorClass');\n\nmodule.exports = createErrorClass('CircularReferenceError', function(referencePath) {\n    this.message = 'Encountered circular reference ' + JSON.stringify(referencePath);\n});\n\n\n\n// WEBPACK FOOTER //\n// ./lib/errors/CircularReferenceError.js","var createErrorClass = require('./createErrorClass');\nvar MESSAGE = 'An exception was thrown when making a request';\n\n/**\n * InvalidSourceError happens when a dataSource syncronously throws\n * an exception during a get/set/call operation.\n *\n * @param {Error} error - The error that was thrown.\n * @private\n */\nmodule.exports = createErrorClass('InvalidSourceError', function(error) {\n    this.message = MESSAGE + ':\\n\\t' + error;\n});\n\n\n\n// WEBPACK FOOTER //\n// ./lib/errors/InvalidSourceError.js","module.exports = function lruSplice(root, object) {\n\n    // Its in the cache.  Splice out.\n    var prev = object[f_prev];\n    var next = object[f_next];\n    if (next) {\n        next[f_prev] = prev;\n    }\n    if (prev) {\n        prev[f_next] = next;\n    }\n    object[f_prev] = object[f_next] = undefined;\n\n    if (object === root[f_head]) {\n        root[f_head] = next;\n    }\n    if (object === root[f_tail]) {\n        root[f_tail] = prev;\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/lru/splice.js","var Subscriber = require('./Subscriber');\nvar Subscription = require('./Subscription');\nvar $$observable = require('symbol-observable').default;\n\nmodule.exports = Source;\n\nfunction Source(subscribe) {\n    if (!subscribe) {\n        return;\n    }\n    switch (typeof subscribe) {\n        case 'object':\n            this.source = subscribe;\n            break;\n        case 'function':\n            this.source = { subscribe: subscribe };\n            break;\n    }\n}\n\nSource.prototype[$$observable] = function() {\n    return this;\n}\n\nSource.prototype.operator = function(destination) {\n    return this.subscribe(destination);\n}\n\n// Unused\n// Source.prototype.lift = function(operator, source) {\n//     source = new Source(source || this);\n//     source.operator = operator;\n//     source._promise = this._promise;\n//     return source;\n// }\n\nSource.prototype.subscribe = function(destination, x, y) {\n    return new Subscription([\n        this.operator.call(\n            this.source, !(destination instanceof Subscriber) ?\n                new Subscriber(destination, x, y) : destination)\n    ]);\n}\n\nSource.prototype.then = function then(onNext, onError) {\n    /* global Promise */\n    var source = this;\n    if (!this._promise) {\n        this._promise = new global['Promise'](function(resolve, reject) {\n            var values = [], rejected = false;\n            source.subscribe({\n                next: function(value) { values[values.length] = value; },\n                error: function(errors) { (rejected = true) && reject(errors); },\n                complete: function() {\n                    !rejected &&\n                    resolve(values.length <= 1 ? values[0] : values);\n                }\n            });\n        });\n    }\n    return this._promise.then(onNext, onError);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/request/Source.js","var empty = {\n    dispose: function() {},\n    unsubscribe: function() {}\n};\n\nfunction ImmediateScheduler() {}\n\nImmediateScheduler.prototype.schedule = function schedule(action) {\n    action();\n    return empty;\n};\n\nmodule.exports = ImmediateScheduler;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/schedulers/ImmediateScheduler.js","var isObject = require('./../support/isObject');\n\nmodule.exports = function isJSONEnvelope(envelope) {\n    return isObject(envelope) && ('json' in envelope);\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/support/isJSONEnvelope.js","var isArray = Array.isArray;\nvar isObject = require('./../support/isObject');\n\nmodule.exports = function isJSONGraphEnvelope(envelope) {\n    return isObject(envelope) && isArray(envelope.paths) && (\n        isObject(envelope.jsonGraph) ||\n        isObject(envelope.jsong) ||\n        isObject(envelope.json) ||\n        isObject(envelope.values) ||\n        isObject(envelope.value)\n    );\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/support/isJSONGraphEnvelope.js","module.exports = Date.now;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/support/now.js","module.exports = 1;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/values/expires-never.js","module.exports = require(\"@graphistry/falcor-path-utils/lib/collapse\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@graphistry/falcor-path-utils/lib/collapse\"\n// module id = 55\n// module chunks = 0","var Model = require('./Model');\nvar FalcorJSON = require('./cache/get/json/FalcorJSON');\n\nfunction falcor(opts) {\n    if (!(this instanceof Model)) {\n        return new Model(opts);\n    }\n    Model.call(this, opts);\n}\n\nfalcor.prototype = Object.create(Model.prototype);\n\nfalcor['Model'] = Model;\nfalcor['FalcorJSON'] = FalcorJSON;\nfalcor['toProps'] = FalcorJSON.prototype.toProps;\n\nmodule.exports = falcor;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/index.js","var Call = require('./request/Call');\nvar ModelRoot = require('./ModelRoot');\nvar FalcorJSON = require('./cache/get/json/FalcorJSON');\nvar ModelDataSourceAdapter = require('./ModelDataSourceAdapter');\nvar TimeoutScheduler = require('./schedulers/TimeoutScheduler');\nvar ImmediateScheduler = require('./schedulers/ImmediateScheduler');\nvar collapse = require('@graphistry/falcor-path-utils/lib/collapse');\n\nvar getSize = require('./support/getSize');\nvar isObject = require('./support/isObject');\nvar isJSONEnvelope = require('./support/isJSONEnvelope');\nvar getCachePosition = require('./cache/getCachePosition');\nvar isJSONGraphEnvelope = require('./support/isJSONGraphEnvelope');\n\nvar setCache = require('./cache/set/setPathMaps');\nvar setJSONGraphs = require('./cache/set/setJSONGraphs');\n\nvar getJSON = require('./cache/get/json');\nvar getCache = require('./cache/getCache');\nvar getJSONGraph = require('./cache/get/jsonGraph');\n\nmodule.exports = Model;\n\n/**\n * This callback is invoked when the Model's cache is changed.\n * @callback Model~onChange\n */\n\n /**\n * This function is invoked on every JSONGraph Error retrieved from the DataSource. This function allows Error objects to be transformed before being stored in the Model's cache.\n * @callback Model~errorSelector\n * @param {Object} jsonGraphError - the JSONGraph Error object to transform before it is stored in the Model's cache.\n * @returns {Object} the JSONGraph Error object to store in the Model cache.\n */\n\n /**\n * This function is invoked every time a value in the Model cache is about to be replaced with a new value. If the function returns true, the existing value is replaced with a new value and the version flag on all of the value's ancestors in the tree are incremented.\n * @callback Model~comparator\n * @param {Object} existingValue - the current value in the Model cache.\n * @param {Object} newValue - the value about to be set into the Model cache.\n * @returns {Boolean} the Boolean value indicating whether the new value and the existing value are equal.\n */\n\n/**\n * A Model object is used to execute commands against a {@link JSONGraph} object. {@link Model}s can work with a local JSONGraph cache, or it can work with a remote {@link JSONGraph} object through a {@link DataSource}.\n * @constructor\n * @param {?Object} options - a set of options to customize behavior\n * @param {?DataSource} options.source - a data source to retrieve and manage the {@link JSONGraph}\n * @param {?JSONGraph} options.cache - initial state of the {@link JSONGraph}\n * @param {?number} options.maxSize - the maximum size of the cache. This value roughly correlates to item count (where itemCount = maxSize / 50). Each item by default is given a metadata `$size` of 50 (or its length when it's an array or string). You can get better control of falcor's memory usage by tweaking `$size`\n * @param {?number} options.collectRatio - the ratio of the maximum size to collect when the maxSize is exceeded\n * @param {?Model~errorSelector} options.errorSelector - a function used to translate errors before they are returned\n * @param {?Model~onChange} options.onChange - a function called whenever the Model's cache is changed\n * @param {?Model~comparator} options.comparator - a function called whenever a value in the Model's cache is about to be replaced with a new value.\n */\nfunction Model(opts) {\n\n    var options = opts || {};\n\n    this._node = options._node;\n    this._path = options._path || [];\n    this._source = options.source || options._source;\n    this._root = options._root || new ModelRoot(options, this);\n    this._recycleJSON = options.recycleJSON === true || options._recycleJSON;\n    this._scheduler = options.scheduler || options._scheduler || new ImmediateScheduler();\n\n    if (options._seed) {\n        this._recycleJSON = true;\n        this._seed = options._seed;\n        this._treatErrorsAsValues = true;\n    } else if (this._recycleJSON) {\n        this._treatErrorsAsValues = true;\n        this._seed = {};\n        this._seed.__proto__ = FalcorJSON.prototype;\n    }\n\n    this._boxed = options.boxed === true || options._boxed || false;\n    this._materialized = options.materialized === true || options._materialized || false;\n    this._treatErrorsAsValues = options.treatErrorsAsValues === true || options._treatErrorsAsValues || false;\n    this._allowFromWhenceYouCame = options.allowFromWhenceYouCame === true || options._allowFromWhenceYouCame || false;\n\n    if (options.cache) {\n        this.setCache(options.cache);\n    }\n}\n\nModel.prototype.constructor = Model;\n\n/**\n * The get method retrieves several {@link Path}s or {@link PathSet}s from a {@link Model}. The get method loads each value into a JSON object and returns in a ModelResponse.\n * @function\n * @param {...PathSet} path - the path(s) to retrieve\n * @return {ModelResponse.<JSONEnvelope>} - the requested data as JSON\n */\nModel.prototype.get = function get(...args) {\n    var seed = this._seed;\n    if (!seed) {\n        seed = {};\n        seed.__proto__ = FalcorJSON.prototype;\n    }\n    return new Call('get', this, args)._toJSON(seed, []);\n}\n\n/**\n * Sets the value at one or more places in the JSONGraph model. The set method accepts one or more {@link PathValue}s, each of which is a combination of a location in the document and the value to place there.  In addition to accepting  {@link PathValue}s, the set method also returns the values after the set operation is complete.\n * @function\n * @return {ModelResponse.<JSONEnvelope>} - an {@link Observable} stream containing the values in the JSONGraph model after the set was attempted\n */\nModel.prototype.set = function set(...args) {\n    var seed = {};\n    seed.__proto__ = FalcorJSON.prototype;\n    return new Call('set', this, args)._toJSON(seed, []);\n}\n\n/**\n * The preload method retrieves several {@link Path}s or {@link PathSet}s from a {@link Model} and loads them into the Model cache.\n * @function\n * @param {...PathSet} path - the path(s) to retrieve\n * @return {ModelResponse.<JSONEnvelope>} - a ModelResponse that completes when the data has been loaded into the cache.\n */\nModel.prototype.preload = function preload(...args) {\n    return new Call('get', this, args)._toJSON(null, []);\n}\n\n/**\n * Invokes a function in the JSON Graph.\n * @function\n * @param {Path} functionPath - the path to the function to invoke\n * @param {Array.<Object>} args - the arguments to pass to the function\n * @param {Array.<PathSet>} refPaths - the paths to retrieve from the JSON Graph References in the message returned from the function\n * @param {Array.<PathSet>} thisPaths - the paths to retrieve from function's this object after successful function execution\n * @return {ModelResponse.<JSONEnvelope> - a JSONEnvelope contains the values returned from the function\n */\n\nModel.prototype.call = function call(...args) {\n    var seed = {};\n    seed.__proto__ = FalcorJSON.prototype;\n    return new Call('call', this, args)._toJSON(seed, []);\n}\n\n/**\n * The invalidate method synchronously removes several {@link Path}s or {@link PathSet}s from a {@link Model} cache.\n * @function\n * @param {...PathSet} path - the  paths to remove from the {@link Model}'s cache.\n */\nModel.prototype.invalidate = function invalidate(...args) {\n    return new Call('invalidate', this, args)._toJSON(null, null).then();\n}\n\n/**\n * Returns a new {@link Model} bound to a location within the {@link\n * JSONGraph}. The bound location is never a {@link Reference}: any {@link\n * Reference}s encountered while resolving the bound {@link Path} are always\n * replaced with the {@link Reference}s target value. For subsequent operations\n * on the {@link Model}, all paths will be evaluated relative to the bound\n * path. Deref allows you to:\n * - Expose only a fragment of the {@link JSONGraph} to components, rather than\n *   the entire graph\n * - Hide the location of a {@link JSONGraph} fragment from components\n * - Optimize for executing multiple operations and path looksup at/below the\n *   same location in the {@link JSONGraph}\n * @method\n * @param {Object} responseObject - an object previously retrieved from the\n * Model\n * @return {Model} - the dereferenced {@link Model}\n * @example\nvar Model = falcor.Model;\nvar model = new Model({\n  cache: {\n    users: [\n      Model.ref(['usersById', 32])\n    ],\n    usersById: {\n      32: {\n        name: 'Steve',\n        surname: 'McGuire'\n      }\n    }\n  }\n});\n\nmodel.\n    get(['users', 0, 'name']).\n    subscribe(function(jsonEnv) {\n        var userModel = model.deref(jsonEnv.json.users[0]);\n        console.log(model.getPath());\n        console.log(userModel.getPath());\n   });\n});\n\n// prints the following:\n// []\n// ['usersById', 32] - because userModel refers to target of reference at ['users', 0]\n */\nModel.prototype.deref = require('./deref');\n\n/**\n * A dereferenced model can become invalid when the reference from which it was\n * built has been removed/collected/expired/etc etc.  To fix the issue, a from\n * the parent request should be made (no parent, then from the root) for a valid\n * path and re-dereference performed to update what the model is bound too.\n *\n * @method\n * @private\n * @return {Boolean} - If the currently deref'd model is still considered a\n * valid deref.\n */\nModel.prototype._hasValidParentReference = require('./deref/hasValidParentReference');\n\n/**\n * Get data for a single {@link Path}.\n * @param {Path} path - the path to retrieve\n * @return {Observable.<*>} - the value for the path\n * @example\n var model = new falcor.Model({source: new falcor.HttpDataSource('/model.json') });\n\n model.\n     getValue('user.name').\n     subscribe(function(name) {\n         console.log(name);\n     });\n\n // The code above prints 'Jim' to the console.\n */\nModel.prototype.getValue = function getValue(path) {\n    return new Call('get', this, [path])\n        ._toJSON({}, [])\n        .lift(function(subscriber) {\n            return this.subscribe({\n                onNext: function(data) {\n                    var depth = -1;\n                    var x = data.json;\n                    var length = path.length;\n                    while (x && !x.$type && ++depth < length) {\n                        x = x[path[depth]];\n                    }\n                    subscriber.onNext(x);\n                },\n                onError: subscriber.onError.bind(subscriber),\n                onCompleted: subscriber.onCompleted.bind(subscriber)\n            })\n        });\n}\n\n/**\n * Set value for a single {@link Path}.\n * @param {Path} path - the path to set\n * @param {Object} value - the value to set\n * @return {Observable.<*>} - the value for the path\n * @example\n var model = new falcor.Model({source: new falcor.HttpDataSource('/model.json') });\n\n model.\n     setValue('user.name', 'Jim').\n     subscribe(function(name) {\n         console.log(name);\n     });\n\n // The code above prints 'Jim' to the console.\n */\nModel.prototype.setValue = function setValue(path, value) {\n    path = arguments.length === 1 ? path.path : path;\n    value = arguments.length === 1 ? path : {path:path,value:value};\n    return new Call('set', this, [value])\n        ._toJSON({}, [])\n        .lift(function(subscriber) {\n            return this.subscribe({\n                onNext: function(data) {\n                    var depth = -1;\n                    var x = data.json;\n                    var length = path.length;\n                    while (x && !x.$type && ++depth < length) {\n                        x = x[path[depth]];\n                    }\n                    subscriber.onNext(x);\n                },\n                onError: subscriber.onError.bind(subscriber),\n                onCompleted: subscriber.onCompleted.bind(subscriber)\n            })\n        });\n}\n\n/**\n * Set the local cache to a {@link JSONGraph} fragment. This method can be a useful way of mocking a remote document, or restoring the local cache from a previously stored state.\n * @param {JSONGraph} jsonGraph - the {@link JSONGraph} fragment to use as the local cache\n */\nModel.prototype.setCache = function modelSetCache(cacheOrJSONGraphEnvelope) {\n\n    var modelRoot = this._root;\n    var cache = modelRoot.cache;\n\n    if (cacheOrJSONGraphEnvelope !== cache) {\n\n        var options = {\n            _path: [],\n            _boxed: false,\n            _root: modelRoot,\n            _materialized: false,\n            _treatErrorsAsValues: false\n        };\n\n        modelRoot.cache = this._node = {};\n\n        if (typeof cache !== 'undefined') {\n            modelRoot.expired = [];\n            modelRoot[f_head] = undefined;\n            modelRoot[f_tail] = undefined;\n            if (this._recycleJSON) {\n                this._seed = {};\n                this._seed.__proto__ = FalcorJSON.prototype;\n            }\n        }\n\n        var results, rootOnChangeHandler;\n        if (isJSONGraphEnvelope(cacheOrJSONGraphEnvelope)) {\n            results = setJSONGraphs(options, [cacheOrJSONGraphEnvelope]);\n        } else if (isJSONEnvelope(cacheOrJSONGraphEnvelope)) {\n            results = setCache(options, [cacheOrJSONGraphEnvelope]);\n        } else if (isObject(cacheOrJSONGraphEnvelope)) {\n            results = setCache(options, [{ json: cacheOrJSONGraphEnvelope }]);\n        }\n\n        if (results) {\n            // performs promotion without producing output.\n            if (results[0].length) {\n                getJSON(options, results[0], null, false, false);\n            }\n            if (results[2] && (rootOnChangeHandler = modelRoot.onChange)) {\n                rootOnChangeHandler();\n            }\n        }\n    } else if (typeof cache === 'undefined') {\n        this._root.cache = {};\n    }\n    return this;\n};\n\n/**\n * Get the local {@link JSONGraph} cache. This method can be a useful to store the state of the cache.\n * @param {...Array.<PathSet>} [pathSets] - The path(s) to retrieve. If no paths are specified, the entire {@link JSONGraph} is returned.\n * @return {JSONGraph} all of the {@link JSONGraph} data in the {@link Model} cache.\n * @example\n // Storing the boxshot of the first 10 titles in the first 10 genreLists to local storage.\n localStorage.setItem('cache', JSON.stringify(model.getCache('genreLists[0...10][0...10].boxshot')));\n */\nModel.prototype.getCache = function _getCache() {\n\n    var paths = Array.prototype.slice.call(arguments, 0);\n\n    if (paths.length === 0) {\n        return getCache(this._root.cache);\n    }\n\n    var seed = {};\n    seed.__proto__ = FalcorJSON.prototype;\n\n    var env = getJSONGraph({\n        _path: [],\n        _root: this._root,\n        _boxed: this._boxed,\n        _materialized: this._materialized,\n        _treatErrorsAsValues: this._treatErrorsAsValues\n    }, paths, seed).data;\n\n    env.paths = collapse(paths);\n\n    return env;\n};\n\n/**\n * Retrieves a number which is incremented every single time a value is changed underneath the Model or the object at an optionally-provided Path beneath the Model.\n * @param {Path?} path - a path at which to retrieve the version number\n * @return {Number} a version number which changes whenever a value is changed underneath the Model or provided Path\n */\nModel.prototype.getVersion = function getVersion(path) {\n    path = path || [];\n    if (Array.isArray(path) === false) {\n        throw new Error('Model#getVersion must be called with an Array path.');\n    }\n    if (this._path.length) {\n        path = this._path.concat(path);\n    }\n    return this._getVersion(this, path);\n};\n\n/* eslint-disable guard-for-in */\nModel.prototype._clone = function cloneModel(opts) {\n    var clone = new Model(this);\n    if (opts) {\n        for (var key in opts) {\n            var value = opts[key];\n            if (value === 'delete') {\n                delete clone[key];\n            } else if (key === '_path') {\n                clone[key] = value;\n                if (false === opts.hasOwnProperty('_node')) {\n                    delete clone['_node'];\n                }\n            } else {\n                clone[key] = value;\n            }\n        }\n    }\n    if (clone._path.length > 0) {\n        clone.setCache = void 0;\n    }\n    return clone;\n};\n/* eslint-enable */\n\n/**\n * Returns a clone of the {@link Model} that enables batching. Within the configured time period, paths for get operations are collected and sent to the {@link DataSource} in a batch. Batching can be more efficient if the {@link DataSource} access the network, potentially reducing the number of HTTP requests to the server.\n * @param {?Scheduler|number} schedulerOrDelay - Either a {@link Scheduler} that determines when to send a batch to the {@link DataSource}, or the number in milliseconds to collect a batch before sending to the {@link DataSource}. If this parameter is omitted, then batch collection ends at the end of the next tick.\n * @return {Model} a Model which schedules a batch of get requests to the DataSource.\n */\nModel.prototype.batch = function batch(schedulerOrDelay) {\n\n    var scheduler;\n\n    if (typeof schedulerOrDelay === 'number') {\n        scheduler = new TimeoutScheduler(Math.round(Math.abs(schedulerOrDelay)));\n    } else if (!schedulerOrDelay) {\n        scheduler = new TimeoutScheduler(1);\n    } else if (typeof schedulerOrDelay.schedule === 'function') {\n        scheduler = schedulerOrDelay;\n    } else if (typeof schedulerOrDelay === 'function') {\n        scheduler = { scheudle: schedulerOrDelay };\n    }\n\n    return this._clone({ _scheduler: scheduler });\n};\n\n/**\n * Returns a clone of the {@link Model} that disables batching. This is the default mode. Each get operation will be executed on the {@link DataSource} separately.\n * @name unbatch\n * @memberof Model.prototype\n * @function\n * @return {Model} a {@link Model} that batches requests of the same type and sends them to the data source together\n */\nModel.prototype.unbatch = function unbatch() {\n    return this._clone({ _scheduler: new ImmediateScheduler() });\n};\n\n/**\n * Returns a clone of the {@link Model} that treats errors as values. Errors will be reported in the same callback used to report data. Errors will appear as objects in responses, rather than being sent to the {@link Observable~onErrorCallback} callback of the {@link ModelResponse}.\n * @return {Model}\n */\nModel.prototype.treatErrorsAsValues = function treatErrorsAsValues() {\n    return this._clone({ _treatErrorsAsValues: true });\n};\n\n/**\n * Adapts a Model to the {@link DataSource} interface.\n * @return {DataSource}\n * @example\nvar model =\n    new falcor.Model({\n        cache: {\n            user: {\n                name: 'Steve',\n                surname: 'McGuire'\n            }\n        }\n    }),\n    proxyModel = new falcor.Model({ source: model.asDataSource() });\n\n// Prints 'Steve'\nproxyModel.getValue('user.name').\n    then(function(name) {\n        console.log(name);\n    });\n */\nModel.prototype.asDataSource = function asDataSource() {\n    return new ModelDataSourceAdapter(this);\n};\n\nModel.prototype._materialize = function materialize() {\n    return this._clone({\n        _materialized: true\n    });\n};\n\nModel.prototype._dematerialize = function dematerialize() {\n    return this._clone({\n        _materialized: 'delete'\n    });\n};\n\n/**\n * Returns a clone of the {@link Model} that boxes values returning the wrapper ({@link Atom}, {@link Reference}, or {@link Error}), rather than the value inside it. This allows any metadata attached to the wrapper to be inspected.\n * @return {Model}\n */\nModel.prototype.boxValues = function boxValues() {\n    return this._clone({\n        _boxed: true\n    });\n};\n\n/**\n * Returns a clone of the {@link Model} that unboxes values, returning the value inside of the wrapper ({@link Atom}, {@link Reference}, or {@link Error}), rather than the wrapper itself. This is the default mode.\n * @return {Model}\n */\nModel.prototype.unboxValues = function unboxValues() {\n    return this._clone({\n        _boxed: 'delete'\n    });\n};\n\n/**\n * Returns a clone of the {@link Model} that only uses the local {@link JSONGraph} and never uses a {@link DataSource} to retrieve missing paths.\n * @return {Model}\n */\nModel.prototype.withoutDataSource = function withoutDataSource() {\n    return this._clone({\n        _source: 'delete'\n    });\n};\n\n/* implement inspect method for node's inspect utility */\nModel.prototype.inspect = function inspect() {\n    return '{ v: ' + this.getVersion() + ' p: [' + this._path.join(', ') + '] }';\n}\n\nModel.prototype.toJSON = function toJSON() {\n    return {\n        $type: 'ref',\n        value: this.getPath()\n    };\n};\n\n/**\n * Returns the {@link Path} to the object within the JSON Graph that this Model references.\n * @return {Path}\n * @example\nvar Model = falcor.Model;\nvar model = new Model({\n  cache: {\n    users: [\n      Model.ref(['usersById', 32])\n    ],\n    usersById: {\n      32: {\n        name: 'Steve',\n        surname: 'McGuire'\n      }\n    }\n  }\n});\n\nmodel.\n    get(['users', 0, 'name']).\n    subscribe(function(jsonEnv) {\n        var userModel = model.deref(jsonEnv.json.users[0]);\n        console.log(model.getPath());\n        console.log(userModel.getPath());\n   });\n});\n\n// prints the following:\n// []\n// ['usersById', 32] - because userModel refers to target of reference at ['users', 0]\n */\nModel.prototype.getPath = function getPath() {\n    return this._path.slice(0);\n};\n\n/**\n * This one is actually private.  I would not use this without talking to\n * jhusain, sdesai, or michaelbpaulson (github).\n * @private\n */\nModel.prototype._fromWhenceYouCame = function fromWhenceYouCame(allow) {\n    return this._clone({\n        _allowFromWhenceYouCame: allow === undefined ? true : allow\n    });\n};\n\nModel.prototype._optimizePath = function _optimizePath(path) {\n    var node = getCachePosition(this._root.cache, path);\n    var abs_path = node && node[f_abs_path] || [];\n    return abs_path.slice(0);\n};\n\nModel.prototype._getVersion = require('./cache/getVersion');\nModel.prototype._getPathValuesAsPathMap = getJSON;\nModel.prototype._getPathValuesAsJSONG = getJSONGraph;\n\nModel.prototype._setPathValues = require('./cache/set/setPathValues');\nModel.prototype._setPathMaps = require('./cache/set/setPathMaps');\nModel.prototype._setJSONGs = require('./cache/set/setJSONGraphs');\nModel.prototype._setCache = require('./cache/set/setPathMaps');\n\nModel.prototype._invalidatePathValues = require('./cache/invalidate/invalidatePathSets');\nModel.prototype._invalidatePathMaps = require('./cache/invalidate/invalidatePathMaps');\n\n\n\n// WEBPACK FOOTER //\n// ./lib/Model.js","function ModelDataSourceAdapter(model) {\n    this._model = model\n        // .boxValues()\n        ._materialize().treatErrorsAsValues();\n}\n\nModelDataSourceAdapter.prototype.get = function get(pathSets) {\n    return this._model.get.apply(this._model, pathSets)._toJSONG();\n};\n\nModelDataSourceAdapter.prototype.set = function set(jsongResponse) {\n    return this._model.set(jsongResponse)._toJSONG();\n};\n\nModelDataSourceAdapter.prototype.call = function call(path, args, suffixes, paths) {\n    return this._model.call.apply(this._model, [\n        path, args, suffixes\n    ].concat(paths))._toJSONG();\n};\n\nmodule.exports = ModelDataSourceAdapter;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/ModelDataSourceAdapter.js","var functionTypeof = 'function';\nvar Requests = require('./request/Queue');\nvar getTimestamp = require('./support/getTimestamp');\n\nfunction ModelRoot(o, model) {\n\n    var options = o || {};\n\n    this.cache = {};\n    this.version = -1;\n    this.syncRefCount = 0;\n    this.maxRetryCount = 10;\n    this.topLevelModel = model;\n    this.requests = new Requests(this);\n    this.expired = options.expired || [];\n\n    this.collectRatio = 0.75;\n    this.maxSize = Math.pow(2, 53) - 1;\n\n    if (typeof options.collectRatio === 'number') {\n        this.collectRatio = options.collectRatio;\n    }\n\n    if (typeof options.maxSize === 'number') {\n        this.maxSize = options.maxSize;\n    }\n\n    if (typeof options.comparator === functionTypeof) {\n        this.comparator = options.comparator;\n    }\n\n    if (typeof options.branchSelector === functionTypeof) {\n        this.branchSelector = options.branchSelector;\n    }\n\n    if (typeof options.errorSelector === functionTypeof) {\n        this.errorSelector = options.errorSelector;\n    }\n\n    if (typeof options.branchSelector === functionTypeof) {\n        this.branchSelector = options.branchSelector;\n    }\n\n    if (typeof options.onChange === functionTypeof) {\n        this.onChange = options.onChange;\n    }\n\n    if (typeof options.onChangesCompleted === functionTypeof) {\n        this.onChangesCompleted = options.onChangesCompleted;\n    }\n}\n\nfunction defaultCompare(node, message) {\n    var cType = node && node.$type;\n    var mType = message && message.$type;\n    if (cType) {\n        // If the cache has a type, but the message is a primitive,\n        // the message might be the primitive response from the datasource.\n        // If so, return true, so we don't update the back-reference versions.\n        if (!mType) {\n            return node.value === message;\n        }\n        // If the message is older than the cache node, then isDistinct = false\n        else if (getTimestamp(message) < getTimestamp(node) === true) {\n            return true; // isDistinct = false\n        }\n        // Otherwise they are the same if all the following fields are the same.\n        return !(\n            cType !== mType ||\n            node.value !== message.value ||\n            node.$expires !== message.$expires\n        );\n    }\n    // If cache doesn't have a type but the message\n    // does, they must be different.\n    else if (mType) {\n        return false;\n    }\n    return node === message;\n}\n\nModelRoot.comparator = ModelRoot.prototype.comparator = defaultCompare;\n\nmodule.exports = ModelRoot;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/ModelRoot.js","var getJSON = require('../get/json');\nvar getJSONGraph = require('../get/jsonGraph');\n\nmodule.exports = { json: json, jsonGraph: jsonGraph };\n\nfunction json(model, _args, data, progressive) {\n    var hasValue = false;\n    if (!_args) {\n        return { missing: false, hasValue: false };\n    }\n    var args = [].concat(_args[1] || []);\n    var suffixes = [].concat(_args[2] || []);\n    var thisPaths = [].concat(_args[3] || []);\n    var path = (model._path || []).concat(_args[0] || []);\n    if (progressive && thisPaths && thisPaths.length) {\n        hasValue =  getJSON(model, thisPaths, data, progressive, true).hasValue;\n    }\n    return {\n        data: data,\n        missing: true,\n        hasValue: hasValue,\n        fragments: [\n            path, args, suffixes, thisPaths\n        ]\n    };\n}\n\nfunction jsonGraph(model, _args, data, progressive) {\n    var hasValue = false;\n    if (!_args) {\n        return { missing: false, hasValue: false };\n    }\n    var args = [].concat(_args[1] || []);\n    var suffixes = [].concat(_args[2] || []);\n    var thisPaths = [].concat(_args[3] || []);\n    var path = (model._path || []).concat(_args[0] || []);\n    if (progressive && thisPaths && thisPaths.length) {\n        hasValue = getJSONGraph({\n            _root: model._root,\n            _boxed: model._boxed,\n            _materialized: model._materialized,\n            _treatErrorsAsValues: model._treatErrorsAsValues\n        }, thisPaths, data, true, true).hasValue;\n    }\n    return {\n        data: data,\n        missing: true,\n        hasValue: hasValue,\n        fragments: [\n            path, args, suffixes, thisPaths\n        ]\n    };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/call/index.js","module.exports = {\n    json: require('./json/getJSON'),\n    jsonGraph: require('./jsonGraph/getJSONGraph')\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/index.js","var clone = require('../../clone');\n\nmodule.exports = onError;\n\nfunction onError(node, depth, results,\n                 requestedPath, fromReference, boxValues) {\n\n    var index = -1;\n    var length = depth + !!fromReference; // depth + 1 if fromReference === true\n    var errorPath = new Array(length);\n    var errorValue = !boxValues ? node.value : clone(node);\n\n    while (++index < length) {\n        errorPath[index] = requestedPath[index];\n    }\n\n    (results.errors || (results.errors = [])).push({\n        path: errorPath,\n        value: errorValue\n    });\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/json/onError.js","var arr = new Array(2);\nvar typeofNumber = 'number';\nvar typeofObject = 'object';\nvar onValue = require('./onValue');\nvar FalcorJSON = require('./FalcorJSON');\nvar isExpired = require('../../isExpired');\nvar onValueType = require('../onValueType');\nvar originalOnMissing = require('../onMissing');\nvar getReferenceTarget = require('./getReferenceTarget');\nvar onMaterialize = require('../onMaterializeFlatBuffer');\nvar NullInPathError = require('../../../errors/NullInPathError');\nvar InvalidKeySetError = require('../../../errors/InvalidKeySetError');\nvar getHashCode = require('@graphistry/falcor-path-utils/lib/getHashCode');\nvar flatBufferToPaths = require('@graphistry/falcor-path-utils/lib/flatBufferToPaths');\n\nmodule.exports = walkPathAndBuildOutput;\n\n/* eslint-disable camelcase */\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction walkPathAndBuildOutput(root, node, json, path,\n                                depth, seed, results, requestedPath,\n                                optimizedPath, optimizedLength,\n                                fromReference, referenceContainer,\n                                modelRoot, expired, expireImmediate,\n                                branchSelector, boxValues, materialized,\n                                hasDataSource, treatErrorsAsValues,\n                                allowFromWhenceYouCame) {\n\n    var type, refTarget;\n\n    // ============ Check for base cases ================\n\n    // If there's nowhere to go, we've reached a terminal node, or hit\n    // the end of the path, stop now. Either build missing paths or report the value.\n    if (undefined === node ||\n        undefined !== (type = node.$type) ||\n        undefined === path) {\n        arr[1] = hasDataSource && node === undefined;\n        arr[0] = onValueType(node, type, json,\n                             path, depth, seed, results,\n                             requestedPath, depth,\n                             optimizedPath, optimizedLength,\n                             fromReference, modelRoot, expired, expireImmediate,\n                             branchSelector, boxValues, materialized, hasDataSource,\n                             treatErrorsAsValues, onValue, onMissing, onMaterialize);\n        return arr;\n    }\n\n    var f_meta, f_old_keys, f_new_keys, f_code = '';\n\n    var next, nextKey,\n        keyset, keyIsRange,\n        keys = path['$keys'],\n        nodeAbsPath, jsonAbsPath,\n        nextDepth = depth + 1, rangeEnd,\n        nextJSON, nextReferenceContainer,\n        nextOptimizedLength, nextOptimizedPath,\n        optimizedLengthNext = optimizedLength + 1,\n        refContainerAbsPath, refContainerRefPath;\n\n    if (allowFromWhenceYouCame && referenceContainer) {\n        refContainerRefPath = referenceContainer.value;\n        refContainerAbsPath = referenceContainer[f_abs_path];\n    }\n\n    if (!json || typeofObject !== typeof json) {\n        json = undefined;\n    } else if (f_meta = json[f_meta_data]) {\n\n        nodeAbsPath = node[f_abs_path];\n        jsonAbsPath = f_meta[f_meta_abs_path];\n\n        if (!branchSelector && !(json instanceof FalcorJSON)) {\n            json.__proto__ = {};\n            json.__proto__[f_meta_data] = f_meta;\n            json.__proto__.__proto__ = FalcorJSON.prototype;\n        }\n\n        if (nodeAbsPath !== jsonAbsPath) {\n            f_meta['$code'] = '__loading__';\n            f_meta[f_meta_abs_path] = nodeAbsPath;\n            f_meta[f_meta_version] = node[f_version];\n            f_meta[f_meta_deref_to] = refContainerRefPath;\n            f_meta[f_meta_deref_from] = refContainerAbsPath;\n            if (f_old_keys = f_meta[f_meta_keys]) {\n                f_meta[f_meta_keys] = Object.create(null);\n                for (nextKey in f_old_keys) {\n                    if (f_old_keys[nextKey]) {\n                        delete json[nextKey];\n                    }\n                }\n            }\n            arr[0] = json;\n            arr[1] = true;\n            return arr;\n        } else if (!(\n            f_meta[f_meta_version]  !== node[f_version]  ||\n            f_meta['$code']         !== path['$code'])) {\n            results.hasValue = true;\n            arr[0] = json;\n            arr[1] = false;\n            return arr;\n        }\n\n        f_old_keys = f_meta[f_meta_keys];\n        f_meta[f_meta_abs_path] = nodeAbsPath;\n        f_meta[f_meta_version] = node[f_version];\n        f_meta[f_meta_deref_to] = refContainerRefPath;\n        f_meta[f_meta_deref_from] = refContainerAbsPath;\n    }\n\n    f_new_keys = Object.create(null);\n\n    var keysIndex = -1;\n    var keysLength = keys.length;\n    var nextPath, nextPathKey,\n        hasMissingPath = false;\n\n    iteratingKeyset:\n    while (++keysIndex < keysLength) {\n\n        keyset = keys[keysIndex];\n        nextPath = path[keysIndex];\n\n        // If `null` appears before the end of the path, throw an error.\n        // If `null` is at the end of the path, but the reference doesn't\n        // point to a sentinel value, throw an error.\n        //\n        // Inserting `null` at the end of the path indicates the target of a ref\n        // should be returned, rather than the ref itself. When `null` is the last\n        // key, the path is lengthened by one, ensuring that if a ref is encountered\n        // just before the `null` key, the reference is followed before terminating.\n        if (null === keyset) {\n            if (nextPath !== undefined) {\n                throw new NullInPathError();\n            }\n            f_code = '' + getHashCode('' + f_code + 'null');\n            continue;\n        }\n        // If the keyset is a primitive value, we've found our `nextKey`.\n        else if (typeofObject !== typeof keyset) {\n            nextKey = keyset;\n            rangeEnd = undefined;\n            keyIsRange = false;\n            nextPathKey = nextKey;\n        }\n        // If the Keyset isn't null or primitive, then it must be a Range.\n        else {\n            rangeEnd = keyset.to;\n            nextKey = keyset.from || 0;\n            if (typeofNumber !== typeof rangeEnd) {\n                rangeEnd = nextKey + (keyset.length || 0) - 1;\n            }\n            if ((rangeEnd - nextKey) < 0) {\n                break iteratingKeyset;\n            }\n            keyIsRange = true;\n            nextPathKey = '[' + nextKey + '..' + rangeEnd + ']';\n        }\n\n        // Now that we have the next key, step down one level in the cache.\n        do {\n            fromReference = false;\n            nextJSON = json && json[nextKey];\n            nextOptimizedPath = optimizedPath;\n            nextOptimizedLength = optimizedLengthNext;\n            nextReferenceContainer = referenceContainer;\n\n            next = node[nextKey];\n            requestedPath[depth] = nextKey;\n            optimizedPath[optimizedLength] = nextKey;\n\n            if (nextPath === undefined) {\n\n                arr = walkPathAndBuildOutput(\n                    root, next, nextJSON, nextPath, nextDepth, seed,\n                    results, requestedPath, nextOptimizedPath,\n                    nextOptimizedLength, fromReference, nextReferenceContainer,\n                    modelRoot, expired, expireImmediate, branchSelector, boxValues,\n                    materialized, hasDataSource, treatErrorsAsValues, allowFromWhenceYouCame\n                );\n\n                if (!hasMissingPath && arr[1] === true) {\n                    hasMissingPath = true;\n                }\n\n                if ((nextJSON = arr[0]) === undefined && !materialized) {\n                    if (json && json.hasOwnProperty(nextKey)) {\n                        delete json[nextKey];\n                    }\n                    continue;\n                }\n            }\n            else {\n                // If we encounter a ref, inline the reference target and continue\n                // evaluating the path.\n                if (next &&\n                    // If the reference is expired, it will be invalidated and\n                    // reported as missing in the next call to walkPath below.\n                    next.$type === $ref && !isExpired(next, expireImmediate)) {\n\n                    // Retrieve the reference target and next referenceContainer (if\n                    // this reference points to other references) and continue\n                    // following the path. If the reference resolves to a missing\n                    // path or leaf node, it will be handled in the next call to\n                    // walkPath.\n                    refTarget = getReferenceTarget(root, next, modelRoot, expireImmediate);\n\n                    next = refTarget[0];\n                    fromReference = true;\n                    nextOptimizedPath = refTarget[1];\n                    nextReferenceContainer = refTarget[2];\n                    nextOptimizedLength = nextOptimizedPath.length;\n                    refTarget[0] = refTarget[1] = refTarget[2] = undefined;\n                }\n\n                // Continue following the path\n\n                // Inspect the return value from the step and determine whether to\n                // create or write into the JSON branch at this level.\n                //\n                // 1. If the next node was a leaf value, nextJSON is the value.\n                // 2. If the next node was a missing path, nextJSON is undefined.\n                // 3. If the next node was a branch, then nextJSON will either be an\n                //    Object or undefined. If nextJSON is undefined, all paths under\n                //    this step resolved to missing paths. If it's an Object, then\n                //    at least one path resolved to a successful leaf value.\n                //\n                // This check defers creating branches until we see at least one\n                // cache hit. Otherwise, don't waste the cycles creating a branch\n                // if everything underneath is a cache miss.\n\n                arr = walkPathAndBuildOutput(\n                    root, next, nextJSON, nextPath, nextDepth, seed,\n                    results, requestedPath, nextOptimizedPath,\n                    nextOptimizedLength, fromReference, nextReferenceContainer,\n                    modelRoot, expired, expireImmediate, branchSelector, boxValues,\n                    materialized, hasDataSource, treatErrorsAsValues, allowFromWhenceYouCame\n                );\n\n                if (!hasMissingPath && arr[1] === true) {\n                    hasMissingPath = true;\n                }\n\n                if ((nextJSON = arr[0]) === undefined) {\n                    if (json && json.hasOwnProperty(nextKey)) {\n                        delete json[nextKey];\n                    }\n                    continue;\n                }\n            }\n\n            // The json value will initially be undefined. If we're here,\n            // then at least one leaf value was encountered, so create a\n            // branch to contain it.\n            if (f_meta === undefined) {\n                f_meta = {};\n                f_meta[f_meta_version] = node[f_version];\n                f_meta[f_meta_abs_path] = node[f_abs_path];\n                f_meta[f_meta_deref_to] = refContainerRefPath;\n                f_meta[f_meta_deref_from] = refContainerAbsPath;\n                json = {};\n                json[f_meta_data] = f_meta;\n                json.__proto__ = FalcorJSON.prototype;\n                // Empower developers to instrument branch node creation by\n                // providing a custom function. If they do, delegate branch\n                // node creation to them.\n                if (branchSelector) {\n                    json = branchSelector(json);\n                } else {\n                    var tmp = json;\n                    json = {};\n                    json.__proto__ = tmp;\n                    tmp = undefined;\n                }\n            }\n\n            f_new_keys[nextKey] = true;\n            if (f_old_keys && (nextKey in f_old_keys)) {\n                f_old_keys[nextKey] = false;\n            }\n\n            // Set the reported branch or leaf into this branch.\n            json[nextKey] = nextJSON;\n        }\n        // Re-enter the inner loop and continue iterating the Range, or exit\n        // here if we encountered a Key.\n        while (keyIsRange && ++nextKey <= rangeEnd);\n\n        if (!hasMissingPath) {\n            f_code = '' + getHashCode('' + f_code + nextPathKey +\n                                     (  nextPath && nextPath['$code'] || ''));\n        }\n    }\n\n    if (hasMissingPath) {\n        f_code = '__loading__';\n    }\n\n    if (f_meta) {\n        f_meta['$code'] = f_code;\n        f_meta[f_meta_keys] = f_new_keys;\n        if (f_old_keys) {\n            for (nextKey in f_old_keys) {\n                if (f_old_keys[nextKey]) {\n                    delete json[nextKey];\n                }\n            }\n        }\n    }\n\n    // `json` will be a branch if any cache hits, or undefined if all cache misses\n\n    arr[0] = json;\n    arr[1] = hasMissingPath;\n\n    return arr;\n}\n/* eslint-enable */\n\nfunction onMissing(path, depth, results,\n                   requestedPath, requestedLength, fromReference,\n                   optimizedPath, optimizedLength, reportMissing,\n                   reportMaterialized, json, branchSelector,\n                   boxValues, onMaterialize, modelRoot) {\n\n    if (reportMaterialized) {\n        return onMaterialize(json, path, depth, depth, branchSelector,\n                             boxValues, modelRoot, results, requestedPath, optimizedPath,\n                             optimizedLength, fromReference, reportMissing, onMissing);\n    }\n\n    var paths = path ? flatBufferToPaths(path) : [[]];\n    var rPath = requestedPath.slice(0, requestedLength);\n\n    return paths.forEach(function(restPath) {\n        requestedLength = depth + restPath.length;\n        return originalOnMissing(rPath.concat(restPath), depth, results,\n                                 requestedPath, requestedLength, fromReference,\n                                 optimizedPath, optimizedLength, reportMissing,\n                                 false, json, branchSelector,\n                                 boxValues, onMaterialize, modelRoot);\n    });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/json/walkFlatBuffer.js","var isArray = Array.isArray;\nvar typeofNumber = 'number';\nvar typeofObject = 'object';\nvar onValue = require('./onValue');\nvar onMissing = require('../onMissing');\nvar FalcorJSON = require('./FalcorJSON');\nvar onValueType = require('../onValueType');\nvar isExpired = require('../../isExpired');\nvar onMaterialize = require('../onMaterialize');\nvar getReferenceTarget = require('./getReferenceTarget');\nvar NullInPathError = require('../../../errors/NullInPathError');\nvar InvalidKeySetError = require('../../../errors/InvalidKeySetError');\nvar materializedAtom = require('@graphistry/falcor-path-utils/lib/support/materializedAtom');\n\nmodule.exports = walkPathAndBuildOutput;\n\n/* eslint-disable camelcase */\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction walkPathAndBuildOutput(root, node, json, path,\n                                depth, seed, results,\n                                requestedPath, requestedLength,\n                                optimizedPath, optimizedLength,\n                                fromReference, referenceContainer,\n                                modelRoot, expired, expireImmediate,\n                                branchSelector, boxValues, materialized,\n                                hasDataSource, treatErrorsAsValues,\n                                allowFromWhenceYouCame) {\n\n    var type, refTarget;\n\n    // ============ Check for base cases ================\n\n    // If there's nowhere to go, we've reached a terminal node, or hit\n    // the end of the path, stop now. Either build missing paths or report the value.\n    if (node === undefined || (\n        type = node.$type) || (\n        depth === requestedLength)) {\n        return onValueType(node, type, json,\n                           path, depth, seed, results,\n                           requestedPath, requestedLength,\n                           optimizedPath, optimizedLength,\n                           fromReference, modelRoot, expired, expireImmediate,\n                           branchSelector, boxValues, materialized, hasDataSource,\n                           treatErrorsAsValues, onValue, onMissing, onMaterialize);\n    }\n\n    var f_meta;\n\n    var next, nextKey,\n        keyset, keyIsRange,\n        nextDepth = depth + 1,\n        rangeEnd, keysOrRanges,\n        nextJSON, nextReferenceContainer,\n        keysetIndex = -1, keysetLength = 0,\n        nextOptimizedLength, nextOptimizedPath,\n        optimizedLengthNext = optimizedLength + 1,\n        refContainerAbsPath, refContainerRefPath;\n\n    keyset = path[depth];\n\n    // If `null` appears before the end of the path, throw an error.\n    // If `null` is at the end of the path, but the reference doesn't\n    // point to a sentinel value, throw an error.\n    //\n    // Inserting `null` at the end of the path indicates the target of a ref\n    // should be returned, rather than the ref itself. When `null` is the last\n    // key, the path is lengthened by one, ensuring that if a ref is encountered\n    // just before the `null` key, the reference is followed before terminating.\n    if (null === keyset) {\n        if (nextDepth < requestedLength) {\n            throw new NullInPathError();\n        }\n        return json;\n    }\n\n    if (allowFromWhenceYouCame && referenceContainer) {\n        refContainerRefPath = referenceContainer.value;\n        refContainerAbsPath = referenceContainer[f_abs_path];\n    }\n\n    if (!json || typeofObject !== typeof json) {\n        json = undefined;\n    } else if (f_meta = json[f_meta_data]) {\n        f_meta[f_meta_version] = node[f_version];\n        f_meta[f_meta_abs_path] = node[f_abs_path];\n        f_meta[f_meta_deref_to] = refContainerRefPath;\n        f_meta[f_meta_deref_from] = refContainerAbsPath;\n    }\n\n    // Iterate over every key in the keyset. This loop is perhaps a bit clever,\n    // but we do it this way because this is a performance-sensitive code path.\n    // This loop simulates a recursive function if we encounter a Keyset that\n    // contains Keys or Ranges. This is accomplished by a nifty dance between an\n    // outer loop and an inner loop.\n    //\n    // The outer loop is responsible for identifying if the value at this depth\n    // is a Key, Range, or Keyset. If it encounters a Keyset, the `keysetIndex`,\n    // `keysetLength`, and `keysOrRanges` variables are assigned and the outer\n    // loop restarts. If it encounters a Key or Range, `nextKey`, `keyIsRange`,\n    // and `rangeEnd` are assigned values which signal whether the inner loop\n    // should iterate a Range or exit after the first run.\n    //\n    // The inner loop steps `nextKey` one level down in the cache. If a Range\n    // was encountered in the outer loop, the inner loop will iterate until the\n    // Range has been exhausted. If a Key was encountered, the inner loop exits\n    // after the first execution.\n    //\n    // After the inner loop exits, the outer loop iterates the `keysetIndex`\n    // until the Keyset is exhausted. `keysetIndex` and `keysetLength` are\n    // initialized to -1 and 0 respectively, so if a Keyset wasn't encountered\n    // at this depth in the path, then the outer loop exits after one execution.\n\n    iteratingKeyset: do {\n\n        // If the keyset is a primitive value, we've found our `nextKey`.\n        if (typeofObject !== typeof keyset) {\n            nextKey = keyset;\n            rangeEnd = undefined;\n            keyIsRange = false;\n        }\n        // If we encounter a Keyset, either iterate through the Keys and Ranges,\n        // or throw an error if we're already iterating a Keyset. Keysets cannot\n        // contain other Keysets.\n        else if (isArray(keyset)) {\n            // If we've already encountered an Array keyset, throw an error.\n            if (keysOrRanges !== undefined) {\n                throw new InvalidKeySetError(path, keysOrRanges);\n            }\n            keysetIndex = 0;\n            keysOrRanges = keyset;\n            keysetLength = keyset.length;\n            // If an Array of keys or ranges is empty, terminate the graph walk\n            // and return the json constructed so far. An example of an empty\n            // Keyset is: ['lolomo', [], 'summary']. This should short circuit\n            // without building missing paths.\n            if (0 === keysetLength) {\n                break iteratingKeyset;\n            }\n            // Assign `keyset` to the first value in the Keyset. Re-entering the\n            // outer loop mimics a singly-recursive function call.\n            keyset = keysOrRanges[keysetIndex];\n            continue iteratingKeyset;\n        }\n        // If the Keyset isn't a primitive or Array, then it must be a Range.\n        else {\n            rangeEnd = keyset.to;\n            nextKey = keyset.from || 0;\n            if (typeofNumber !== typeof rangeEnd) {\n                rangeEnd = nextKey + (keyset.length || 0) - 1;\n            }\n            if ((rangeEnd - nextKey) < 0) {\n                break iteratingKeyset;\n            }\n            keyIsRange = true;\n        }\n\n        // Now that we have the next key, step down one level in the cache.\n        do {\n            fromReference = false;\n            nextJSON = json && json[nextKey];\n            nextOptimizedPath = optimizedPath;\n            nextOptimizedLength = optimizedLengthNext;\n            nextReferenceContainer = referenceContainer;\n\n            next = node[nextKey];\n            requestedPath[depth] = nextKey;\n            optimizedPath[optimizedLength] = nextKey;\n\n            if (nextDepth === requestedLength) {\n                nextJSON = walkPathAndBuildOutput(\n                    root, next, nextJSON, path, nextDepth, seed,\n                    results, requestedPath, requestedLength, nextOptimizedPath,\n                    nextOptimizedLength, fromReference, nextReferenceContainer,\n                    modelRoot, expired, expireImmediate, branchSelector, boxValues,\n                    materialized, hasDataSource, treatErrorsAsValues, allowFromWhenceYouCame\n                );\n                if (nextJSON === undefined && !materialized) {\n                    continue;\n                }\n            }\n            else {\n                // If we encounter a ref, inline the reference target and continue\n                // evaluating the path.\n                if (next &&\n                    // If the reference is expired, it will be invalidated and\n                    // reported as missing in the next call to walkPath below.\n                    next.$type === $ref && !isExpired(next, expireImmediate)) {\n\n                    // Retrieve the reference target and next referenceContainer (if\n                    // this reference points to other references) and continue\n                    // following the path. If the reference resolves to a missing\n                    // path or leaf node, it will be handled in the next call to\n                    // walkPath.\n                    refTarget = getReferenceTarget(root, next, modelRoot, expireImmediate);\n\n                    next = refTarget[0];\n                    fromReference = true;\n                    nextOptimizedPath = refTarget[1];\n                    nextReferenceContainer = refTarget[2];\n                    nextOptimizedLength = nextOptimizedPath.length;\n                    refTarget[0] = refTarget[1] = refTarget[2] = undefined;\n                }\n\n                // Continue following the path\n\n                // Inspect the return value from the step and determine whether to\n                // create or write into the JSON branch at this level.\n                //\n                // 1. If the next node was a leaf value, nextJSON is the value.\n                // 2. If the next node was a missing path, nextJSON is undefined.\n                // 3. If the next node was a branch, then nextJSON will either be an\n                //    Object or undefined. If nextJSON is undefined, all paths under\n                //    this step resolved to missing paths. If it's an Object, then\n                //    at least one path resolved to a successful leaf value.\n                //\n                // This check defers creating branches until we see at least one\n                // cache hit. Otherwise, don't waste the cycles creating a branch\n                // if everything underneath is a cache miss.\n\n                if (undefined === (nextJSON = walkPathAndBuildOutput(\n                        root, next, nextJSON, path, nextDepth, seed,\n                        results, requestedPath, requestedLength, nextOptimizedPath,\n                        nextOptimizedLength, fromReference, nextReferenceContainer,\n                        modelRoot, expired, expireImmediate, branchSelector, boxValues,\n                        materialized, hasDataSource, treatErrorsAsValues, allowFromWhenceYouCame\n                    ))) {\n                    continue;\n                }\n            }\n\n            // The json value will initially be undefined. If we're here,\n            // then at least one leaf value was encountered, so create a\n            // branch to contain it.\n            if (f_meta === undefined) {\n                f_meta = {};\n                f_meta[f_meta_version] = node[f_version];\n                f_meta[f_meta_abs_path] = node[f_abs_path];\n                f_meta[f_meta_deref_to] = refContainerRefPath;\n                f_meta[f_meta_deref_from] = refContainerAbsPath;\n                json = {};\n                json[f_meta_data] = f_meta;\n                json.__proto__ = FalcorJSON.prototype;\n                // Empower developers to instrument branch node creation by\n                // providing a custom function. If they do, delegate branch\n                if (branchSelector) {\n                    json = branchSelector(json);\n                }\n            }\n\n            // Set the reported branch or leaf into this branch.\n            json[nextKey] = nextJSON;\n        }\n        // Re-enter the inner loop and continue iterating the Range, or exit\n        // here if we encountered a Key.\n        while (keyIsRange && ++nextKey <= rangeEnd);\n\n        // If we've exhausted the Keyset (or never encountered one at all),\n        // exit the outer loop.\n        if (++keysetIndex === keysetLength) {\n            break iteratingKeyset;\n        }\n\n        // Otherwise get the next Key or Range from the Keyset and re-enter the\n        // outer loop from the top.\n        keyset = keysOrRanges[keysetIndex];\n    } while (true);\n\n    // `json` will be a branch if any cache hits, or undefined if all cache misses\n    return json;\n}\n/* eslint-enable */\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/json/walkPath.js","var arr = new Array(2);\nvar clone = require('../../clone');\nvar inlineValue = require('./inlineValue');\nvar promote = require('../../../lru/promote');\nvar isExpired = require('../../isExpired');\nvar createHardlink = require('../../createHardlink');\nvar CircularReferenceError = require('../../../errors/CircularReferenceError');\n\nmodule.exports = getReferenceTarget;\n\n/* eslint-disable no-undef */\n/* eslint-disable no-console */\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction getReferenceTarget(root, ref, modelRoot, seed, expireImmediate) {\n\n    promote(modelRoot, ref);\n\n    var context,\n        key, type, depth = 0,\n        node = root, path = ref.value,\n        copy = path, length = path.length;\n\n    do {\n        if (depth === 0 && undefined !== (context = ref[f_context])) {\n            node = context;\n            depth = length;\n        } else {\n            key = path[depth++];\n            if (undefined === (node = node[key])) {\n                break;\n            }\n        }\n\n        if (depth === length) {\n            type = node.$type;\n            // If the reference points to an expired\n            // value node, don't create a hard-link.\n            if (undefined !== type && isExpired(node, expireImmediate)) {\n                break;\n            }\n            // If a reference points to itself, throw an error.\n            else if (node === ref) {\n                throw new CircularReferenceError(path);\n            }\n            // If the node we land on isn't the existing ref context,\n            // create a hard-link between the reference and the node\n            // it points to.\n            else if (node !== context) {\n                createHardlink(ref, node);\n            }\n\n            // If the reference points to another ref, follow the new ref\n            // by resetting the relevant state and continuing from the top.\n            if (type === $ref) {\n\n                promote(modelRoot, node);\n\n                seed && inlineValue(clone(node), path, length, seed);\n\n                depth = 0;\n                ref = node;\n                node = root;\n                path = copy = ref.value;\n                length = path.length;\n\n                continue;\n            }\n            break;\n        } else if (undefined !== node.$type) {\n            break;\n        }\n    } while (true);\n\n    if (depth < length && undefined !== node) {\n        length = depth;\n    }\n\n    depth = -1;\n    path = new Array(length);\n    while (++depth < length) {\n        path[depth] = copy[depth];\n    }\n\n    arr[0] = node;\n    arr[1] = path;\n\n    return arr;\n}\n/* eslint-enable */\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/jsonGraph/getReferenceTarget.js","var typeofObject = 'object';\nvar clone = require('../../clone');\nvar inlineValue = require('./inlineValue');\n\nmodule.exports = onJSONGraphValue;\n\nfunction onJSONGraphValue(node, type, depth, seed, results,\n                          requestedPath, optimizedPath, optimizedLength,\n                          fromReference, boxValues, materialized) {\n\n    var value = node.value;\n\n    // boxValues always clones the node\n    if (boxValues || !(\n        /**\n         * JSON Graph should always clone:\n         * - refs\n         * - errors\n         * - atoms we didn't create\n         * - atoms we created to wrap Objects\n         **/\n        $ref !== type &&\n        $error !== type &&\n        node[f_wrapped_value] &&\n        typeofObject !== typeof value)) {\n        value = clone(node);\n    }\n\n    results.hasValue = true;\n    inlineValue(value, optimizedPath, optimizedLength, seed);\n    (seed.paths || (seed.paths = [])).push(\n        requestedPath.slice(0, depth + !!fromReference) // depth + 1 if fromReference === true\n    );\n\n    return value;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/jsonGraph/onValue.js","var isArray = Array.isArray;\nvar clone = require('../../clone');\nvar onValue = require('./onValue');\nvar inlineValue = require('./inlineValue');\nvar isExpired = require('../../isExpired');\nvar onValueType = require('../onValueType');\nvar onMaterialize = require('../onMaterialize');\nvar originalOnMissing = require('../onMissing');\nvar getReferenceTarget = require('./getReferenceTarget');\nvar NullInPathError = require('../../../errors/NullInPathError');\nvar InvalidKeySetError = require('../../../errors/InvalidKeySetError');\nvar materializedAtom = require('@graphistry/falcor-path-utils/lib/support/materializedAtom');\n\nmodule.exports = walkPathAndBuildOutput;\n\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction walkPathAndBuildOutput(root, node, path,\n                                depth, seed, results,\n                                requestedPath, requestedLength,\n                                optimizedPath, optimizedLength,\n                                fromReference, modelRoot, expired, expireImmediate,\n                                boxValues, materialized, hasDataSource, treatErrorsAsValues) {\n\n    var type, refTarget;\n\n    // ============ Check for base cases ================\n\n    // If there's nowhere to go, we've reached a terminal node, or hit\n    // the end of the path, stop now. Either build missing paths or report the value.\n    if (node === undefined || (\n        type = node.$type) || (\n        depth === requestedLength)) {\n        return onValueType(node, type, seed,\n                           path, depth, seed, results,\n                           requestedPath, requestedLength,\n                           optimizedPath, optimizedLength,\n                           fromReference, modelRoot, expired, expireImmediate,\n                           undefined, boxValues, materialized, hasDataSource,\n                           treatErrorsAsValues, onValue, onMissing, onMaterialize);\n    }\n\n    var next, nextKey,\n        keyset, keyIsRange,\n        nextDepth = depth + 1,\n        rangeEnd, keysOrRanges,\n        keysetIndex = -1, keysetLength = 0,\n        nextOptimizedLength, nextOptimizedPath,\n        optimizedLengthNext = optimizedLength + 1;\n\n    keyset = path[depth];\n\n    // If `null` appears before the end of the path, throw an error.\n    // If `null` is at the end of the path, but the reference doesn't\n    // point to a sentinel value, throw an error.\n    //\n    // Inserting `null` at the end of the path indicates the target of a ref\n    // should be returned, rather than the ref itself. When `null` is the last\n    // key, the path is lengthened by one, ensuring that if a ref is encountered\n    // just before the `null` key, the reference is followed before terminating.\n    if (null === keyset) {\n        if (nextDepth < requestedLength) {\n            throw new NullInPathError();\n        }\n        return undefined;\n    }\n\n    // Iterate over every key in the keyset. This loop is perhaps a bit clever,\n    // but we do it this way because this is a performance-sensitive code path.\n    // This loop simulates a recursive function if we encounter a Keyset that\n    // contains Keys or Ranges. This is accomplished by a nifty dance between an\n    // outer loop and an inner loop.\n    //\n    // The outer loop is responsible for identifying if the value at this depth\n    // is a Key, Range, or Keyset. If it encounters a Keyset, the `keysetIndex`,\n    // `keysetLength`, and `keysOrRanges` variables are assigned and the outer\n    // loop restarts. If it encounters a Key or Range, `nextKey`, `keyIsRange`,\n    // and `rangeEnd` are assigned values which signal whether the inner loop\n    // should iterate a Range or exit after the first run.\n    //\n    // The inner loop steps `nextKey` one level down in the cache. If a Range\n    // was encountered in the outer loop, the inner loop will iterate until the\n    // Range has been exhausted. If a Key was encountered, the inner loop exits\n    // after the first execution.\n    //\n    // After the inner loop exits, the outer loop iterates the `keysetIndex`\n    // until the Keyset is exhausted. `keysetIndex` and `keysetLength` are\n    // initialized to -1 and 0 respectively, so if a Keyset wasn't encountered\n    // at this depth in the path, then the outer loop exits after one execution.\n\n    iteratingKeyset: do {\n\n        // If the keyset is a primitive value, we've found our `nextKey`.\n        if ('object' !== typeof keyset) {\n            nextKey = keyset;\n            rangeEnd = undefined;\n            keyIsRange = false;\n        }\n        // If we encounter a Keyset, either iterate through the Keys and Ranges,\n        // or throw an error if we're already iterating a Keyset. Keysets cannot\n        // contain other Keysets.\n        else if (isArray(keyset)) {\n            // If we've already encountered an Array keyset, throw an error.\n            if (keysOrRanges !== undefined) {\n                throw new InvalidKeySetError(path, keysOrRanges);\n            }\n            keysetIndex = 0;\n            keysOrRanges = keyset;\n            keysetLength = keyset.length;\n            // If an Array of keys or ranges is empty, terminate the graph walk\n            // and return the json constructed so far. An example of an empty\n            // Keyset is: ['lolomo', [], 'summary']. This should short circuit\n            // without building missing paths.\n            if (0 === keysetLength) {\n                break iteratingKeyset;\n            }\n            keyset = keysOrRanges[keysetIndex];\n            // Assign `keyset` to the first value in the Keyset. Re-entering the\n            // outer loop mimics a singly-recursive function call.\n            continue iteratingKeyset;\n        }\n        // If the Keyset isn't a primitive or Array, then it must be a Range.\n        else {\n            rangeEnd = keyset.to;\n            nextKey = keyset.from || 0;\n            if ('number' !== typeof rangeEnd) {\n                rangeEnd = nextKey + (keyset.length || 0) - 1;\n            }\n            if ((rangeEnd - nextKey) < 0) {\n                break iteratingKeyset;\n            }\n            keyIsRange = true;\n        }\n\n        // Now that we have the next key, step down one level in the cache.\n        do {\n            fromReference = false;\n            nextOptimizedPath = optimizedPath;\n            nextOptimizedLength = optimizedLengthNext;\n\n            next = node[nextKey];\n            requestedPath[depth] = nextKey;\n            optimizedPath[optimizedLength] = nextKey;\n\n            // If we encounter a ref, inline the reference target and continue\n            // evaluating the path.\n            if (next &&\n                nextDepth < requestedLength &&\n                // If the reference is expired, it will be invalidated and\n                // reported as missing in the next call to walkPath below.\n                next.$type === $ref && !isExpired(next, expireImmediate)) {\n\n                // Write the cloned ref value into the jsonGraph at the\n                // optimized path. JSONGraph must always clone references.\n                seed && inlineValue(clone(next), optimizedPath, nextOptimizedLength, seed);\n\n                // Retrieve the reference target and next referenceContainer (if\n                // this reference points to other references) and continue\n                // following the path. If the reference resolves to a missing\n                // path or leaf node, it will be handled in the next call to\n                // walkPath.\n                refTarget = getReferenceTarget(root, next, modelRoot, seed, expireImmediate);\n\n                next = refTarget[0];\n                fromReference = true;\n                nextOptimizedPath = refTarget[1];\n                nextOptimizedLength = nextOptimizedPath.length;\n                refTarget[0] = refTarget[1] = undefined;\n            }\n\n            walkPathAndBuildOutput(\n                root, next, path, nextDepth, seed,\n                results, requestedPath, requestedLength, nextOptimizedPath,\n                nextOptimizedLength, fromReference, modelRoot, expired, expireImmediate,\n                boxValues, materialized, hasDataSource, treatErrorsAsValues\n            );\n        }\n        // Re-enter the inner loop and continue iterating the Range, or exit\n        // here if we encountered a Key.\n        while (keyIsRange && ++nextKey <= rangeEnd);\n\n        // If we've exhausted the Keyset (or never encountered one at all),\n        // exit the outer loop.\n        if (++keysetIndex === keysetLength) {\n            break iteratingKeyset;\n        }\n\n        // Otherwise get the next Key or Range from the Keyset and re-enter the\n        // outer loop from the top.\n        keyset = keysOrRanges[keysetIndex];\n    } while (true);\n\n    return undefined;\n}\n/* eslint-enable */\n\nfunction onMissing(path, depth, results,\n                   requestedPath, requestedLength, fromReference,\n                   optimizedPath, optimizedLength, reportMissing,\n                   reportMaterialized, seed, branchSelector,\n                   boxValues, onMaterialize, modelRoot) {\n\n    var json, isLeaf;\n\n    if (seed && reportMaterialized) {\n\n        (seed.paths || (seed.paths = [])).push(\n            (isLeaf = 0 === requestedLength - depth) &&\n                                 // depth + 1 if fromReference === true\n                requestedPath.slice(0, depth + !!fromReference) ||\n                requestedPath.slice(0, depth).concat(path\n                    .slice(depth, requestedLength + !!fromReference))\n        );\n\n        json = inlineValue(isLeaf && clone(materializedAtom) || undefined,\n                           optimizedPath, optimizedLength, seed, !isLeaf);\n    }\n\n    return originalOnMissing(path, depth, results,\n                             requestedPath, requestedLength, fromReference,\n                             optimizedPath, optimizedLength, reportMissing,\n                             !isLeaf && reportMaterialized, json,\n                             branchSelector, true, onMaterialize, modelRoot);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/jsonGraph/walkPath.js","var typeofNumber = 'number';\nvar typeofObject = 'object';\nvar clone = require('../clone');\nvar onValueType = require('./onValueType');\nvar FalcorJSON = require('./json/FalcorJSON');\nvar NullInPathError = require('../../errors/NullInPathError');\nvar InvalidKeySetError = require('../../errors/InvalidKeySetError');\nvar materializedAtom = require('@graphistry/falcor-path-utils/lib/support/materializedAtom');\n\nmodule.exports = onMaterializeFlatBuffer;\n\n/* eslint-disable camelcase */\n/* eslint-disable no-cond-assign */\n/* eslint-disable no-constant-condition */\nfunction onMaterializeFlatBuffer(json, path, depth, length,\n                                 branchSelector, boxValues, modelRoot, results,\n                                 requestedPath, optimizedPath, optimizedLength,\n                                 fromReference, reportMissing, onMissing) {\n\n    var type, refTarget;\n\n    // ============ Check for base cases ================\n\n    // If there's nowhere to go, we've reached a terminal node, or hit\n    // the end of the path, stop now. Either build missing paths or report the value.\n    if (undefined === path) {\n        onValueType(undefined, undefined, json,\n                    path, depth, undefined, results,\n                    requestedPath, depth, optimizedPath,\n                    optimizedLength, fromReference, modelRoot, undefined,\n                    false, branchSelector, boxValues, false, reportMissing,\n                    false, undefined, onMissing, undefined);\n        return boxValues ? clone(materializedAtom) : undefined;\n    }\n\n    var f_meta, f_old_keys, f_new_keys;\n\n    var nextKey,\n        keyset, keyIsRange,\n        keys = path['$keys'],\n        nextDepth = depth + 1, rangeEnd,\n        nextOptimizedLength = optimizedLength + 1;\n\n    if (!json || typeofObject !== typeof json) {\n        json = {};\n        json.__proto__ = FalcorJSON.prototype;\n        json[f_meta_data] = f_meta = {};\n        f_meta[f_meta_version] = modelRoot.version;\n        f_meta[f_meta_abs_path] = optimizedPath.slice(\n            0, optimizedLength\n        );\n        if (branchSelector) {\n            json = branchSelector(json);\n        }\n    } else if (!(f_meta = json[f_meta_data])) {\n        json[f_meta_data] = f_meta = {};\n        f_meta[f_meta_version] = modelRoot.version;\n        f_meta[f_meta_abs_path] = optimizedPath.slice(\n            0, optimizedLength\n        );\n    } else {\n        f_old_keys = f_meta[f_meta_keys];\n        f_meta[f_meta_version] = modelRoot.version;\n        f_meta[f_meta_abs_path] = optimizedPath.slice(\n            0, optimizedLength\n        );\n    }\n\n    f_new_keys = Object.create(null);\n\n    var nextPath;\n    var keysIndex = -1;\n    var keysLength = keys.length;\n\n    iteratingKeyset:\n    while (++keysIndex < keysLength) {\n\n        keyset = keys[keysIndex];\n        nextPath = path[keysIndex];\n\n        // If `null` appears before the end of the path, throw an error.\n        // If `null` is at the end of the path, but the reference doesn't\n        // point to a sentinel value, throw an error.\n        //\n        // Inserting `null` at the end of the path indicates the target of a ref\n        // should be returned, rather than the ref itself. When `null` is the last\n        // key, the path is lengthened by one, ensuring that if a ref is encountered\n        // just before the `null` key, the reference is followed before terminating.\n        if (null === keyset) {\n            if (nextPath !== undefined) {\n                throw new NullInPathError();\n            }\n            continue;\n        }\n        // If the keyset is a primitive value, we've found our `nextKey`.\n        else if (typeofObject !== typeof keyset) {\n            nextKey = keyset;\n            rangeEnd = undefined;\n            keyIsRange = false;\n        }\n        // If the Keyset isn't null or primitive, then it must be a Range.\n        else {\n            rangeEnd = keyset.to;\n            nextKey = keyset.from || 0;\n            if (typeofNumber !== typeof rangeEnd) {\n                rangeEnd = nextKey + (keyset.length || 0) - 1;\n            }\n            if ((rangeEnd - nextKey) < 0) {\n                break iteratingKeyset;\n            }\n            keyIsRange = true;\n        }\n\n        // Now that we have the next key, step down one level in the cache.\n        do {\n\n            requestedPath[depth] = nextKey;\n            optimizedPath[optimizedLength] = nextKey;\n\n            f_new_keys[nextKey] = true;\n            if (f_old_keys && (nextKey in f_old_keys)) {\n                f_old_keys[nextKey] = false;\n            }\n\n            // insert the materialized branch\n            json[nextKey] = onMaterializeFlatBuffer(\n                json[nextKey], nextPath, nextDepth,\n                nextDepth, branchSelector, boxValues, modelRoot, results,\n                requestedPath, optimizedPath, nextOptimizedLength,\n                fromReference, reportMissing, onMissing\n            );\n        }\n        // Re-enter the inner loop and continue iterating the Range, or exit\n        // here if we encountered a Key.\n        while (keyIsRange && ++nextKey <= rangeEnd);\n    }\n\n    f_meta['$code'] = '__missing__';\n    f_meta[f_meta_keys] = f_new_keys;\n    if (f_old_keys) {\n        for (nextKey in f_old_keys) {\n            if (f_old_keys[nextKey]) {\n                delete json[nextKey];\n            }\n        }\n    }\n\n    // `json` will be a branch if any cache hits, or undefined if all cache misses\n    return json;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/get/onMaterializeFlatBuffer.js","var isInternalKey = require('../support/isInternalKey');\n\n/**\n * decends and copies the cache.\n */\nmodule.exports = function getCache(cache) {\n    var out = {};\n    _copyCache(cache, out);\n\n    return out;\n};\n\nfunction cloneBoxedValue(boxedValue) {\n    var clonedValue = {};\n\n    var keys = Object.keys(boxedValue);\n    var key;\n    var i;\n    var l;\n\n    for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n\n        if (key === '$type' || !isInternalKey(key)) {\n            clonedValue[key] = boxedValue[key];\n        }\n    }\n\n    return clonedValue;\n}\n\nfunction _copyCache(node, out, fromKey) {\n    // copy and return\n\n    // only copy objects\n    if (!node || typeof node !== 'object') {\n        return;\n    }\n\n    Object.\n        keys(node).\n        filter(function(key) {\n            // Its not an internal key and the node has a value.  In the cache\n            // there are 3 possibilities for values.\n            // 1: A branch node.\n            // 2: A $type-value node.\n            // 3: undefined\n            // We will strip out 3\n            return (key === '$type' || !isInternalKey(key)) && node[key] !== undefined;\n        }).\n        forEach(function(key) {\n            var cacheNext = node[key];\n            var outNext = out[key];\n\n            if (!outNext) {\n                outNext = out[key] = {};\n            }\n\n            // Paste the node into the out cache.\n            if (cacheNext.$type) {\n                var isObject = cacheNext.value && typeof cacheNext.value === 'object';\n                var isUserCreatedcacheNext = !cacheNext[f_wrapped_value];\n                var value;\n                if (isObject || isUserCreatedcacheNext) {\n                    value = cloneBoxedValue(cacheNext);\n                } else {\n                    value = cacheNext.value;\n                }\n\n                out[key] = value;\n                return;\n            }\n\n            _copyCache(cacheNext, outNext, key);\n        });\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/getCache.js","var getBoundCacheNode = require('./getBoundCacheNode');\n\nmodule.exports = function _getVersion(model, path) {\n    var node = getBoundCacheNode(model, path);\n    var version = node && node[f_version];\n    return (version == null) ? -1 : version;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/getVersion.js","var groupCacheArguments = require('../groupCacheArguments');\n\nmodule.exports = {\n    json: invalidate,\n    jsonGraph: invalidate,\n    invalidatePathMaps: require('./invalidatePathMaps'),\n    invalidatePathValues: require('./invalidatePathSets')\n};\n\nfunction invalidate(model, args, seed, progressive, expireImmediate) {\n    if (invalidateArgumentGroups(model, groupCacheArguments(args), expireImmediate)) {\n        var rootChangeHandler = model._root.onChange;\n        rootChangeHandler && rootChangeHandler();\n    }\n    return {};\n}\n\nfunction invalidateArgumentGroups(model, xs, expireImmediate) {\n\n    var changed = false;\n    var groupIndex = -1;\n    var groupCount = xs.length;\n\n    // Takes each of the groups and normalizes their input into\n    // requested paths and optimized paths.\n    while (++groupIndex < groupCount) {\n\n        var group = xs[groupIndex];\n        var inputType = group.inputType;\n        var groupedArgs = group.arguments;\n\n        if (groupedArgs.length > 0) {\n            if (inputType === 'PathValues') {\n                groupedArgs = groupedArgs.map(pluckPaths);\n            }\n            var operation = module.exports['invalidate' + inputType];\n            if (operation(model, groupedArgs, expireImmediate)) {\n                changed = true;\n            }\n        }\n    }\n    return changed;\n}\n\nfunction pluckPaths(x) {\n    return x.path || x.paths;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/invalidate/index.js","var wrapNode = require('./wrapNode');\nvar isExpired = require('./isExpired');\nvar insertNode = require('./insertNode');\nvar expireNode = require('./expireNode');\nvar replaceNode = require('./replaceNode');\nvar getSize = require('../support/getSize');\nvar reconstructPath = require('./reconstructPath');\nvar getTimestamp = require('../support/getTimestamp');\nvar updateNodeAncestors = require('./updateNodeAncestors');\n\nmodule.exports = function mergeJSONGraphNode(\n    parent, node, message, key, requestedPath, optimizedPath,\n    version, expired, lru, comparator, errorSelector, expireImmediate) {\n\n    var sizeOffset;\n\n    var cType, mType,\n        cIsObject, mIsObject,\n        cTimestamp, mTimestamp;\n\n    // If the cache and message are the same, we can probably return early:\n    // - If they're both nullsy,\n    //   - If null then the node needs to be wrapped in an atom and inserted.\n    //     This happens from whole branch merging when a leaf is just a null value\n    //     instead of being wrapped in an atom.\n    //   - If undefined then return null (previous behavior).\n    // - If they're both branches, return the branch.\n    // - If they're both edges, continue below.\n    if (node === message) {\n\n        // The message and cache are both undefined, return undefined.\n        if (message === undefined) {\n            return message;\n        }\n        // There should not be undefined values. Those should always be\n        // wrapped in an $atom\n        else if (message === null) {\n            node = wrapNode(message, undefined, message);\n            parent = updateNodeAncestors(parent, -node.$size, lru, version);\n            node = insertNode(node, parent, key, undefined, optimizedPath);\n            return node;\n        }\n        // Is the cache node a branch? If so, return the cache branch.\n        else if ((\n            cIsObject = !(!node || typeof node !== 'object')) && (\n            cType = node.$type) === undefined) {\n            // Has the branch been introduced to the cache yet? If not,\n            // give it a parent, key, and absolute path.\n            if (node[f_parent] === undefined) {\n                insertNode(node, parent, key, version, optimizedPath);\n            }\n            return node;\n        }\n    } else if (cIsObject = !(!node || typeof node !== 'object')) {\n        cType = node.$type;\n    }\n\n    // If the cache isn't a reference, we might be able to return early.\n    if (cType !== $ref) {\n        mIsObject = !(!message || typeof message !== 'object');\n        if (mIsObject) {\n            mType = message.$type;\n        }\n        if (cIsObject && !cType) {\n            // If the cache is a branch and the message is empty or\n            // also a branch, continue with the cache branch.\n            if (message == null || (mIsObject && !mType)) {\n                return node;\n            }\n        }\n    }\n    // If the cache is a reference, we might not need to replace it.\n    else {\n        // If the cache is a reference, but the message is empty,\n        // leave the cache alone...\n        if (message == null) {\n            // ...unless the cache is an expired reference. In that case, expire\n            // the cache node and return undefined.\n            if (isExpired(node, expireImmediate)) {\n                expireNode(node, expired, lru);\n                return void 0;\n            }\n            return node;\n        }\n        mIsObject = !(!message || typeof message !== 'object');\n        if (mIsObject) {\n            mType = message.$type;\n            // If the cache and the message are both references,\n            // check if we need to replace the cache reference.\n            if (mType === $ref) {\n                if (node === message) {\n                    // If the cache and message are the same reference,\n                    // we performed a whole-branch merge of one of the\n                    // grandparents. If we've previously graphed this\n                    // reference, break early. Otherwise, continue to\n                    // leaf insertion below.\n                    if (node[f_parent] != null) {\n                        return node;\n                    }\n                } else {\n\n                    cTimestamp = node.$timestamp;\n                    mTimestamp = message.$timestamp;\n\n                    // - If either the cache or message reference is expired,\n                    //   replace the cache reference with the message.\n                    // - If neither of the references are expired, compare their\n                    //   timestamps. If either of them don't have a timestamp,\n                    //   or the message's timestamp is newer, replace the cache\n                    //   reference with the message reference.\n                    // - If the message reference is older than the cache\n                    //   reference, short-circuit.\n                    if (!isExpired(node, expireImmediate) &&\n                        !isExpired(message, expireImmediate) &&\n                        mTimestamp < cTimestamp) {\n                        return void 0;\n                    }\n                }\n            }\n        }\n    }\n\n    // If the cache is a leaf but the message is a branch,\n    // merge the branch over the leaf.\n    if (cType && mIsObject && !mType) {\n        return insertNode(replaceNode(\n                node, message, parent, key, lru, version),\n            parent, key, undefined, optimizedPath\n        );\n    }\n    // If the message is a sentinel or primitive, insert it into the cache.\n    else if (mType || !mIsObject) {\n\n        if (mType === $error && errorSelector) {\n            message = errorSelector(reconstructPath(requestedPath, key), message);\n        }\n\n        // If the cache and the message are the same value, we branch-merged one\n        // of the message's ancestors. If this is the first time we've seen this\n        // leaf, give the message a $size and $type, attach its graph pointers,\n        // and update the cache sizes and versions.\n        if (mType && node === message) {\n            if (!node[f_parent]) {\n                node = wrapNode(node, cType, node.value);\n                parent = updateNodeAncestors(parent, -node.$size, lru, version);\n                node = insertNode(node, parent, key, version, optimizedPath);\n            }\n        }\n        // If the cache and message are different, the cache value is expired,\n        // or the message is a primitive, replace the cache with the message value.\n        // If the message is a sentinel, clone and maintain its type.\n        // If the message is a primitive value, wrap it in an atom.\n        else {\n            var isDistinct = true;\n            // If both the cache and message are primitives, we branch-merged\n            // one of the message's ancestors. Insert the value into the cache.\n            if (!cType && !mType) {\n                isDistinct = true;\n            }\n            // If the cache is a branch, but the message is a leaf, replace the\n            // cache branch with the message leaf.\n            else if (!cIsObject || !isExpired(node, expireImmediate)) {\n                // Compare the current cache value with the new value. If either of\n                // them don't have a timestamp, or the message's timestamp is newer,\n                // replace the cache value with the message value. If a comparator\n                // is specified, the comparator takes precedence over timestamps.\n                if (comparator) {\n                    isDistinct = !(comparator.length < 3 ?\n                        comparator(node, message) : comparator(node, message,\n                            optimizedPath.slice(0, optimizedPath.index))\n                    );\n                } else {\n                    // Comparing either Number or undefined to undefined always results in false.\n                    isDistinct = getTimestamp(message) < getTimestamp(node) === false;\n                }\n            }\n            if (isDistinct) {\n                sizeOffset = getSize(node) - getSize(message =\n                    wrapNode(message, mType, mType ? message.value : message));\n                node = replaceNode(node, message, parent, key, lru, version);\n                parent = updateNodeAncestors(parent, sizeOffset, lru, version);\n                node = insertNode(node, parent, key, version, optimizedPath);\n            }\n        }\n\n        // Promote the message edge in the LRU.\n        if (isExpired(node,\n            /* expireImmediate:\n             * force true so the node is marked as\n             * expired but keep using it for the merge.\n             */\n            true)) {\n            expireNode(node, expired, lru);\n        }\n    }\n    else if (node == null) {\n        node = insertNode(message, parent, key, undefined, optimizedPath);\n    }\n\n    return node;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/mergeJSONGraphNode.js","var getJSON = require('../get/json');\nvar getJSONGraph = require('../get/jsonGraph');\nvar arrayFlatMap = require('../../support/array-flat-map');\nvar groupCacheArguments = require('../groupCacheArguments');\n\nmodule.exports = {\n    json: json,\n    jsonGraph: jsonGraph,\n    setPathMaps: require('./setPathMaps'),\n    setPathValues: require('./setPathValues'),\n    setJSONGraphs: require('./setJSONGraphs')\n};\n\nfunction json(model, _args, data, progressive, expireImmediate) {\n\n    var set, get, jsong,\n        changed, relative, optimized,\n        missing, fragments, requested,\n        args = groupCacheArguments(_args);\n\n    set = setGroupsIntoCache(model, args, expireImmediate);\n\n    if ((relative = set.requested).length) {\n\n        if (!(changed = set.changed) || progressive) {\n            get = getJSON(model, relative, data, progressive, expireImmediate);\n        }\n\n        if (changed) {\n\n            jsong = getJSONGraph({\n                _root: model._root,\n                _boxed: model._boxed, _materialized: true,\n                _treatErrorsAsValues: model._treatErrorsAsValues\n            }, set.optimized, {}, progressive, expireImmediate);\n\n            fragments = jsong.data;\n            missing = fragments.paths;\n            requested = jsong.requested;\n\n            var rootChangeHandler = model._root.onChange;\n            rootChangeHandler && rootChangeHandler();\n        }\n    }\n\n    return {\n        args: args,\n        data: data,\n        missing: missing,\n        relative: relative,\n        fragments: fragments,\n        requested: requested,\n        error: get && get.error,\n        errors: get && get.errors,\n        hasValue: get && get.hasValue\n    };\n}\n\nfunction jsonGraph(model, _args, data, progressive, expireImmediate) {\n\n    var set, jsong,\n        changed, relative, optimized,\n        missing, fragments, requested,\n        args = groupCacheArguments(_args);\n\n    set = setGroupsIntoCache(model, args, expireImmediate);\n\n    if ((relative = set.requested).length && (\n         progressive || (changed = set.changed))) {\n\n        jsong = getJSONGraph({\n            _root: model._root,\n            _boxed: model._boxed, _materialized: true,\n            _treatErrorsAsValues: model._treatErrorsAsValues\n        }, set.optimized, data, progressive, expireImmediate);\n\n        fragments = jsong.data;\n        missing = fragments.paths;\n        requested = jsong.requested;\n\n        if (changed) {\n            var rootChangeHandler = model._root.onChange;\n            rootChangeHandler && rootChangeHandler();\n        }\n    }\n\n    return {\n        args: args,\n        data: data,\n        missing: missing,\n        relative: relative,\n        fragments: fragments,\n        requested: requested,\n        error: jsong && jsong.error,\n        hasValue: jsong && jsong.hasValue\n    };\n}\n\nfunction setGroupsIntoCache(model, xs, expireImmediate) {\n\n    var changed = false;\n    var groupIndex = -1;\n    var groupCount = xs.length;\n    var requestedPaths = [];\n    var optimizedPaths = [];\n    var modelRoot = model._root;\n    var errorSelector = modelRoot.errorSelector;\n\n    expireImmediate = expireImmediate && !Boolean(model._source);\n    var comparator = Boolean(model._source) ? null : modelRoot.comparator;\n\n    // Takes each of the groups and normalizes their input into\n    // requested paths and optimized paths.\n    while (++groupIndex < groupCount) {\n\n        var group = xs[groupIndex];\n        var inputType = group.inputType;\n        var groupedArgs = group.arguments;\n\n        if (groupedArgs.length > 0) {\n            var operation = module.exports['set' + inputType];\n            var results = operation(model, groupedArgs, errorSelector, comparator, expireImmediate);\n            changed = changed || results[2];\n            optimizedPaths.push.apply(optimizedPaths, results[1]);\n            if (inputType === 'PathValues') {\n                requestedPaths.push.apply(requestedPaths, groupedArgs.map(pluckPaths));\n            } else if (inputType === 'JSONGraphs') {\n                requestedPaths.push.apply(requestedPaths, arrayFlatMap(groupedArgs, pluckPaths));\n            } else {\n                requestedPaths.push.apply(requestedPaths, results[0]);\n            }\n        }\n    }\n\n    return {\n        changed: changed,\n        requested: requestedPaths,\n        optimized: optimizedPaths\n    };\n}\n\nfunction pluckPaths(x) {\n    return x.path || x.paths;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/set/index.js","module.exports = function transferBackReferences(fromNode, destNode) {\n    var fromNodeRefsLength = fromNode[f_refs_length] || 0,\n        destNodeRefsLength = destNode[f_refs_length] || 0,\n        i = -1;\n    while (++i < fromNodeRefsLength) {\n        var ref = fromNode[f_ref + i];\n        if (ref !== undefined) {\n            ref[f_context] = destNode;\n            destNode[f_ref + (destNodeRefsLength + i)] = ref;\n            fromNode[f_ref + i] = undefined;\n        }\n    }\n    destNode[f_refs_length] = fromNodeRefsLength + destNodeRefsLength;\n    fromNode[f_refs_length] = undefined;\n    return destNode;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/transferBackReferences.js","module.exports = function unlinkBackReferences(node) {\n    var i = -1, n = node[f_refs_length] || 0;\n    while (++i < n) {\n        var ref = node[f_ref + i];\n        if (ref != null) {\n            ref[f_context] = ref[f_ref_index] = node[f_ref + i] = void 0;\n        }\n    }\n    node[f_refs_length] = void 0;\n    return node;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/unlinkBackReferences.js","module.exports = function unlinkForwardReference(reference) {\n    var destination = reference[f_context];\n    if (destination) {\n        var i = (reference[f_ref_index] || 0) - 1,\n            n = (destination[f_refs_length] || 0) - 1;\n        while (++i <= n) {\n            destination[f_ref + i] = destination[f_ref + (i + 1)];\n        }\n        destination[f_refs_length] = n;\n        reference[f_ref_index] = reference[f_context] = destination = void 0;\n    }\n    return reference;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cache/unlinkForwardReference.js","module.exports = hasValidParentReference;\n\nfunction hasValidParentReference() {\n    var reference = this._referenceContainer;\n\n    // Always true when this mode is false.\n    if (!this._allowFromWhenceYouCame) {\n        return true;\n    }\n\n    // If fromWhenceYouCame is true and the first set of keys did not have\n    // a reference, this case can happen.  They are always valid.\n    if (reference === true) {\n        return true;\n    }\n\n    // was invalid before even derefing.\n    if (reference === false) {\n        return false;\n    }\n\n    // Its been disconnected (set over or collected) from the graph.\n    if (reference && reference[f_parent] === undefined) {\n        return false;\n    }\n\n    // The reference has expired but has not been collected from the graph.\n    if (reference && reference[f_invalidated]) {\n        return false;\n    }\n\n    return true;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/deref/hasValidParentReference.js","var CONTAINER_DOES_NOT_EXIST = 'e';\nvar FalcorJSON = require('../cache/get/json/FalcorJSON');\nvar getCachePosition = require('../cache/getCachePosition');\nvar InvalidDerefInputError = require('../errors/InvalidDerefInputError');\n\nmodule.exports = function deref(json) {\n\n    var seed, f_meta;\n\n    if (!json || 'object' !== typeof json || !(\n        f_meta = json[f_meta_data]) || 'object' !== typeof f_meta) {\n        return null;\n    }\n\n    var cacheRoot = this._root.cache;\n    var recycleJSON = this._recycleJSON;\n    var absolutePath = f_meta[f_meta_abs_path];\n    var referenceContainer, currentRefPath, i, len;\n\n    if (!absolutePath) {\n        if (recycleJSON) {\n            seed = { json: json };\n            seed.__proto__ = FalcorJSON.prototype;\n        }\n        return this._clone({\n            _node: undefined,\n            _seed: seed\n        });\n    } else if (absolutePath.length === 0) {\n        if (recycleJSON) {\n            seed = { json: json };\n            seed.__proto__ = FalcorJSON.prototype;\n        }\n        return this._clone({\n            _node: cacheRoot,\n            _path: absolutePath,\n            _referenceContainer: true,\n            _seed: seed\n        });\n    }\n\n    var originalRefPath = f_meta[f_meta_deref_to];\n    var originalAbsPath = f_meta[f_meta_deref_from];\n\n    // We deref and then ensure that the reference container is attached to\n    // the model.\n    var cacheNode = getCachePosition(cacheRoot, absolutePath);\n    var validContainer = CONTAINER_DOES_NOT_EXIST;\n\n    if (originalAbsPath) {\n\n        validContainer = false;\n\n        i = -1;\n        len = originalAbsPath.length;\n        referenceContainer = cacheRoot;\n        while (++i < len) {\n            referenceContainer = referenceContainer[originalAbsPath[i]];\n            if (!referenceContainer || referenceContainer.$type) {\n                break;\n            }\n        }\n\n        // If the reference container is still a sentinel value then compare\n        // the reference value with refPath.  If they are the same, then the\n        // model is still valid.\n        if (originalRefPath && referenceContainer && referenceContainer.$type === $ref) {\n            validContainer = true;\n            len = originalRefPath.length;\n            currentRefPath = referenceContainer.value;\n            for (i = 0; i < len; ++i) {\n                if (currentRefPath[i] !== originalRefPath[i]) {\n                    cacheNode = undefined;\n                    validContainer = false;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Signal to the deref'd model that it has been disconnected from the\n    // graph or there is no _fromWhenceYouCame\n    if (!validContainer) {\n        referenceContainer = false;\n    }\n\n    // The container did not exist, therefore there is no reference\n    // container and fromWhenceYouCame should always return true.\n    else if (validContainer === CONTAINER_DOES_NOT_EXIST) {\n        referenceContainer = true;\n    }\n\n    if (recycleJSON) {\n        seed = { json: json };\n        seed.__proto__ = FalcorJSON.prototype;\n    }\n\n    return this._clone({\n        _seed: seed,\n        _node: cacheNode,\n        _path: absolutePath,\n        _referenceContainer: referenceContainer\n    });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/deref/index.js","var createErrorClass = require('./createErrorClass');\nvar MESSAGE = 'It is not legal to use the JSON Graph ' +\n    'format from a bound Model. JSON Graph format' +\n    ' can only be used from a root model.';\n\n/**\n * When a bound model attempts to retrieve JSONGraph it should throw an\n * error.\n *\n * @private\n */\nmodule.exports = createErrorClass('BoundJSONGraphModelError', function() {\n    this.message = MESSAGE;\n});\n\n\n\n// WEBPACK FOOTER //\n// ./lib/errors/BoundJSONGraphModelError.js","var createErrorClass = require('./createErrorClass');\nvar MESSAGE = 'Deref can only be used with a non-primitive object from get, set, or call.';\n\n/**\n * An invalid deref input is when deref is used with input that is not generated\n * from a get, set, or a call.\n *\n * @param {String} message\n * @private\n */\nmodule.exports = createErrorClass('InvalidDerefInputError', function() {\n    this.message = MESSAGE;\n});\n\n\n\n// WEBPACK FOOTER //\n// ./lib/errors/InvalidDerefInputError.js","var createErrorClass = require('./createErrorClass');\nvar MESSAGE = 'The boundPath of the model is not valid since a value or error was found before the path end.';\n\n/**\n * An InvalidModelError can only happen when a user binds, whether sync\n * or async to shorted value.  See the unit tests for examples.\n *\n * @param {String} message\n * @private\n */\nmodule.exports = createErrorClass('InvalidModelError', function(boundPath, shortedPath) {\n    this.message = MESSAGE;\n    this.boundPath = boundPath;\n    this.shortedPath = shortedPath;\n});\n\n\n\n// WEBPACK FOOTER //\n// ./lib/errors/InvalidModelError.js","var createErrorClass = require('./createErrorClass');\n\n/**\n * A request can only be retried up to a specified limit.  Once that\n * limit is exceeded, then an error will be thrown.\n *\n * @private\n */\nmodule.exports = createErrorClass('MaxRetryExceededError', function(maxRetryCount, absolute, relative, optimized) {\n    this.message = '' +\n        'Exceeded the max retry count (' + maxRetryCount + ') for these paths: \\n' +\n        (absolute &&\n        'absolute: [\\n\\t' + printPaths(absolute) + '\\n]\\n' || '') +\n        (relative &&\n        'relative: [\\n\\t' + printPaths(relative) + '\\n]\\n' || '') +\n        (optimized &&\n        'optimized: [\\n\\t' + printPaths(optimized) + '\\n]\\n' || '');\n});\n\nfunction printPaths(paths) {\n    return paths.map(function(path) {\n        return JSON.stringify(path);\n    }).join(',\\n\\t');\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/errors/MaxRetryExceededError.js","module.exports = String.fromCharCode(30) + 'ƒ_';\n\n\n\n// WEBPACK FOOTER //\n// ./lib/internal/f_.js","var updateNodeAncestors = require('../cache/updateNodeAncestors');\n\nmodule.exports = function collect(lru, expired, totalArg, max, ratioArg, version) {\n\n    var total = totalArg;\n    var ratio = ratioArg;\n\n    if (typeof ratio !== 'number') {\n        ratio = 0.75;\n    }\n\n    var node, size, targetSize = max * ratio;\n\n    while (node = expired.pop()) {\n        total -= (size = node.$size || 0);\n        updateNodeAncestors(node, size, lru, version);\n    }\n\n    if (total >= max) {\n        var prev = lru[f_tail];\n        while ((total >= targetSize) && (node = prev)) {\n            prev = prev[f_prev];\n            total -= (size = node.$size || 0);\n            updateNodeAncestors(node, size, lru, version);\n        }\n\n        lru[f_tail] = node;\n        if (node == null) {\n            lru[f_head] = undefined;\n        } else {\n            node[f_next] = undefined;\n        }\n    }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/lru/collect.js","var Source = require('./Source');\nvar Subscriber = require('./Subscriber');\nvar lruCollect = require('../lru/collect');\nvar FalcorJSON = require('../cache/get/json/FalcorJSON');\nvar collapse = require('@graphistry/falcor-path-utils/lib/collapse');\nvar InvalidSourceError = require('../errors/InvalidSourceError');\nvar MaxRetryExceededError = require('../errors/MaxRetryExceededError');\n\nmodule.exports = Call;\n\nfunction Call(type, model, _args) {\n    Source.call(this, type);\n    if (model && _args) {\n        this.type = type;\n        this.source = this;\n        this.model = model;\n        this._args = _args;\n    }\n}\n\nCall.prototype = Object.create(Source.prototype);\n\nCall.prototype.lift = function(operator, source) {\n    source = new Call(source || this);\n    source.type = this.type;\n    source.model = this.model;\n    source._args = this._args;\n    source.operator = operator;\n    operator.data = operator.data || this.operator.data;\n    operator.errors = operator.errors || this.operator.errors;\n    operator.operation = operator.operation || this.operator.operation;\n    operator.progressive = operator.progressive || this.operator.progressive;\n    operator.maxRetryCount = operator.maxRetryCount || this.operator.maxRetryCount;\n    return source;\n}\n\nCall.prototype.operator = function(subscriber) {\n    return this._subscribe(subscriber);\n}\n\nCall.prototype._subscribe = function(subscriber) {\n    subscriber.onNext({\n        type: this.type,\n        args: this._args,\n        model: this.model,\n        version: this.model._root.version\n    });\n    subscriber.onCompleted();\n    return subscriber;\n}\n\nCall.prototype._toJSON = function(data, errors) {\n    if (data === undefined) {\n        data = {};\n        data.__proto__ = FalcorJSON.prototype;\n    }\n    return this.lift(new CallOperator(\n        data, errors || this.operator.errors, 'json',\n        this.operator.progressive, this.operator.maxRetryCount\n    ), this.source);\n}\n\nCall.prototype._toJSONG = function(data, errors) {\n    if (data === undefined) {\n        data = {};\n        data.__proto__ = FalcorJSON.prototype;\n    }\n    return this.lift(new CallOperator(\n        data, errors || this.operator.errors, 'jsonGraph',\n        this.operator.progressive, this.operator.maxRetryCount\n    ), this.source);\n}\n\nCall.prototype.retry = function(maxRetryCount) {\n    return this.lift(new CallOperator(\n        this.operator.data,\n        this.operator.errors,\n        this.operator.operation,\n        this.operator.progresive,\n        maxRetryCount\n    ), this.source);\n}\n\nCall.prototype.progressively = function() {\n    return this.lift(new CallOperator(\n        this.operator.data,\n        this.operator.errors,\n        this.operator.operation,\n        true,\n        this.operator.maxRetryCount\n    ), this.source);\n}\n\nfunction CallOperator(data, errors, operation, progressive, maxRetryCount) {\n    this.data = data;\n    this.errors = errors;\n    this.operation = operation;\n    this.progressive = progressive;\n    this.maxRetryCount = maxRetryCount;\n}\n\nCallOperator.prototype.call = function(source, destination) {\n    return source.subscribe(new CallSubscriber(\n        destination, this.data, this.errors, this.operation, this.progressive\n    ));\n}\n\nfunction CallSubscriber(destination, data, errors, operation, progressive, maxRetryCount) {\n    Subscriber.call(this, destination);\n    this.data = data;\n    this.retryCount = -1;\n    this.errors = errors;\n    this.hasValue = false;\n    this.completed = false;\n    this.operation = operation;\n    this.progressive = progressive;\n    this.maxRetryCount = maxRetryCount;\n}\n\nCallSubscriber.prototype = Object.create(Subscriber.prototype);\nCallSubscriber.prototype.operations = {\n    get: require('../cache/get'),\n    set: require('../cache/set'),\n    call: require('../cache/call'),\n    invalidate: require('../cache/invalidate')\n};\n\nCallSubscriber.prototype.next =\nCallSubscriber.prototype.onNext = function(seed) {\n\n    if (!this.started) {\n        this.args = seed.args;\n        this.type = seed.type;\n        this.model = seed.model;\n        this.version = seed.version;\n        this.maxRetryCount = this.maxRetryCount || this.model._root.maxRetryCount;\n        return;\n    } else if (!this.destination) {\n        return;\n    }\n\n    var missing, fragments;\n    var type = seed.type;\n    var args = seed.args || seed.paths;\n\n    var data = this.data;\n    var model = this.model;\n    var errors = this.errors;\n    var results = this.results;\n    var version = this.version;\n    var hasValue = this.hasValue;\n    var operation = this.operation;\n    var progressive = this.progressive;\n    var seedIsImmutable = progressive && data;\n\n    if (model._recycleJSON && this.type === 'get') {\n        seedIsImmutable = false;\n    }\n\n    // If we request paths as JSON in progressive mode, ensure each progressive\n    // valueNode is immutable. If not in progressive mode, we can write into the\n    // same JSON tree until the request is completed.\n    if (seedIsImmutable) {\n        data = {};\n        data.__proto__ = FalcorJSON.prototype;\n    }\n\n    if (args && args.length) {\n\n        results = this.operations[type]\n            [operation](model, args, data,\n                        progressive || !model._source,\n                        this.retryCount === -1);\n\n        // We must communicate critical errors from get, such as bound path is\n        // broken or this is a JSONGraph request with a bound path.\n        if (results.error) {\n            return tryOnError(this, results.error);\n        }\n\n        errors && results.errors &&\n            errors.push.apply(errors, results.errors);\n\n        if (fragments = results.fragments) {\n            args = results.args;\n            this.fragments = fragments;\n        }\n\n        this.relative = results.relative;\n        this.requested = results.requested;\n        this.missing = missing = results.missing;\n        this.hasValue = hasValue || (hasValue = results.hasValue);\n    }\n\n    // We are done when there are no missing paths or\n    // the model does not have a dataSource to fetch from.\n    this.completed = !missing || !model._source;\n\n    if (type !== 'set') {\n        this.args = args;\n        if (seedIsImmutable) {\n            this.data = mergeInto(data, this.data);\n        }\n    }\n\n    if (progressive && hasValue && data && (data.json || data.jsonGraph)) {\n        tryOnNext(data, operation, model._root, this.destination);\n    }\n}\n\nCallSubscriber.prototype.error =\nCallSubscriber.prototype.onError = function(error) {\n    if (error instanceof InvalidSourceError) {\n        return Subscriber.prototype.onError.call(this, error);\n    }\n    this.errored = true;\n    this.onCompleted(error);\n}\n\nCallSubscriber.prototype.complete =\nCallSubscriber.prototype.onCompleted = function(error) {\n\n    if (!this.destination) {\n        return;\n    }\n\n    var data, type, errors, errored;\n\n    if (!this.started && (this.started = true)) {\n        this.onNext(this);\n    } else if (errored = this.errored) {\n        this.onNext({ type: 'get', paths: this.relative });\n    }\n\n    if (errored || this.completed) {\n        if (!this.progressive && this.hasValue && (\n            (data = this.data) && data.json || data.jsonGraph)) {\n            tryOnNext(data, this.operation, this.model._root, this.destination);\n        }\n        errors = this.errors;\n        if (errored || error || errors && errors.length) {\n            return tryOnError(this, errors.length && errors || error);\n        }\n\n        return Subscriber.prototype.onCompleted.call(this);\n    }\n\n    if (++this.retryCount >= this.maxRetryCount) {\n        return tryOnError(this, new MaxRetryExceededError(\n            this.retryCount,\n            this.requested,\n            this.relative,\n            this.missing\n        ));\n    }\n\n    this.request = this.model._root.requests[this.type](\n        this.model, this.missing, this.relative, this.fragments\n    ).subscribe(this);\n}\n\nCallSubscriber.prototype.dispose =\nCallSubscriber.prototype.unsubscribe = function() {\n\n    var model = this.model;\n    var version = this.version;\n    var request = this.request;\n\n    this.args = null;\n    this.data = null;\n    this.model = null;\n    this.errors = null;\n    this.errored = false;\n    this.started = false;\n    this.hasValue = false;\n    this.completed = false;\n\n    Subscriber.prototype.dispose.call(this);\n\n    if (request) {\n        this.request = null;\n        request.dispose();\n    }\n\n    if (model) {\n\n        var modelRoot = model._root;\n        var cache = modelRoot.cache;\n        var shouldCollectCache = modelRoot.syncRefCount <= 0 &&\n                                 version !== modelRoot.version;\n\n        // Prune the cache via the LRU if this is the last request.\n        if (shouldCollectCache) {\n\n            if (cache) {\n                lruCollect(modelRoot,\n                           modelRoot.expired,\n                           cache.$size || 0,\n                           modelRoot.maxSize,\n                           modelRoot.collectRatio,\n                           modelRoot.version);\n            }\n\n            var rootOnChangesCompletedHandler = modelRoot.onChangesCompleted;\n\n            if (rootOnChangesCompletedHandler) {\n                rootOnChangesCompletedHandler.call(modelRoot.topLevelModel);\n            }\n        }\n    }\n}\n\nfunction tryOnNext(data, operation, modelRoot, destination) {\n    if (operation === 'jsonGraph' && data.paths) {\n        data.paths = collapse(data.paths);\n    }\n    try {\n        ++modelRoot.syncRefCount;\n        destination.onNext(data);\n    } catch(e) {\n        throw e;\n    } finally {\n        --modelRoot.syncRefCount;\n    }\n}\n\nfunction tryOnError(self, error) {\n    try {\n        throw error;\n    } catch (err) {\n        Subscriber.prototype.onError.call(self, err);\n    }\n}\n\nfunction mergeInto(dest, node) {\n\n    var destValue, nodeValue,\n        key, keys = Object.keys(node),\n        index = -1, length = keys.length;\n\n    while (++index < length) {\n\n        key = keys[index];\n\n        if (key === f_meta_data) {\n            dest[f_meta_data] = node[f_meta_data];\n        } else {\n\n            nodeValue = node[key];\n            destValue = dest[key];\n\n            if (destValue !== nodeValue) {\n                if (!nodeValue || typeof nodeValue !== 'object') {\n                    if (destValue === undefined) {\n                        dest[key] = nodeValue;\n                    }\n                } else if (destValue === undefined) {\n                    dest[key] = nodeValue;\n                } else {\n                    mergeInto(destValue, nodeValue);\n                }\n            }\n        }\n    }\n\n    return dest;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/request/Call.js","var Source = require('./Source');\nvar Request = require('./Request');\nvar Subscriber = require('./Subscriber');\nvar Subscription = require('./Subscription');\nvar ImmediateScheduler = require('../schedulers/ImmediateScheduler');\n\nmodule.exports = Queue;\n\nfunction Queue(modelRoot) {\n    Subscription.call(this, []);\n    this.modelRoot = modelRoot;\n}\n\nQueue.prototype = Object.create(Subscription.prototype);\n\nQueue.prototype.set = isolateSet;\nQueue.prototype.call = isolateCall;\nQueue.prototype.get = batchAndDedupeGet;\n\nfunction isolateSet(model, optimized, requested, env) {\n    var queue = this;\n    return new Source(function(destination) {\n\n        var request = new Request('set', queue, model._source, new ImmediateScheduler());\n        var subscriber = request.subscribe(new Subscriber(destination, request));\n\n        queue.add(request);\n        request.data = env.jsonGraph;\n        request.requested.push(requested);\n        request.optimized.push(optimized);\n\n        request.connect();\n\n        return subscriber;\n    });\n}\n\nfunction isolateCall(model, optimized, requested, callArgs) {\n    var queue = this;\n    return new Source(function(destination) {\n\n        var request = new Request('call', queue, model._source, new ImmediateScheduler());\n        var subscriber = request.subscribe(new Subscriber(destination, request));\n\n        queue.add(request);\n        request.data = callArgs;\n        request.boundPath = model._path;\n\n        request.connect();\n\n        return subscriber;\n    });\n}\n\nfunction batchAndDedupeGet(model, optimized, requested) {\n    return new Dedupe(\n        this, model._source, model._scheduler, requested, optimized\n    );\n}\n\nfunction Dedupe(queue, source, scheduler, requested, optimized) {\n    this.queue = queue;\n    this.dataSource = source;\n    this.scheduler = scheduler;\n    this.requested = requested;\n    this.optimized = optimized;\n}\n\nDedupe.prototype.subscribe = function(destination) {\n\n    var queue = this.queue;\n    var source = this.dataSource;\n    var requested = this.requested;\n    var optimized = this.optimized;\n    var scheduler = this.scheduler;\n\n    var requestsIndex = -1;\n    var requests  = queue.subscriptions;\n    var requestsCount = requests.length;\n    var subscription = new Subscription([], destination);\n\n    while (++requestsIndex < requestsCount) {\n\n        var request = requests[requestsIndex];\n\n        if (request.type !== 'get') {\n            continue;\n        }\n\n        if (request = request.batch(requested, optimized, requested = [], optimized = [])) {\n            subscription.add(request.subscribe(new Subscriber(destination, request)));\n        }\n\n        if (!optimized.length) {\n            break;\n        }\n    }\n\n    if (optimized.length) {\n        request = requests[requestsIndex] =\n            new Request('get', queue, source, scheduler).batch(requested, optimized);\n        subscription.add(request.subscribe(new Subscriber(destination, request)));\n        request.connect();\n    }\n\n    return subscription;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/request/Queue.js","var isArray = Array.isArray;\nvar Subject = require('./Subject');\nvar Subscriber = require('./Subscriber');\nvar Subscription = require('./Subscription');\nvar InvalidSourceError = require('../errors/InvalidSourceError');\n\nvar setJSONGraphs = require('../cache/set/setJSONGraphs');\nvar setPathValues = require('../cache/set/setPathValues');\nvar invalidatePaths = require('../cache/invalidate/invalidatePathSets');\n\nvar toPaths = require('@graphistry/falcor-path-utils/lib/toPaths');\nvar toCollapseMap = require('@graphistry/falcor-path-utils/lib/toCollapseMap');\nvar toCollapseTrees = require('@graphistry/falcor-path-utils/lib/toCollapseTrees');\nvar hasIntersection = require('@graphistry/falcor-path-utils/lib/hasIntersection');\n\nmodule.exports = Request;\n\nfunction Request(type, queue, source, scheduler) {\n    Subject.call(this, [], queue);\n    this.tree = {};\n    this.paths = [];\n    this.type = type;\n    this.data = null;\n    this.active = false;\n    this.responded = false;\n    this.requested = [];\n    this.optimized = [];\n    this.disposable = null;\n    this.dataSource = source;\n    this.scheduler = scheduler;\n}\n\nRequest.prototype = Object.create(Subject.prototype);\n\nRequest.prototype.next =\nRequest.prototype.onNext = function(env) {\n\n    var queue = this.parent;\n\n    if (!queue) {\n        return;\n    }\n\n    if (this.responded === false) {\n        this.responded = true;\n        // Remove this request from the request queue as soon as we get\n        // at least one response back. This ensures we won't be the target\n        // of in-flight batch requests.\n        queue.remove(this);\n    }\n\n    var changed = false;\n    var jsonGraph = env.jsonGraph;\n    var boundPath = this.boundPath;\n    var modelRoot = queue.modelRoot;\n    var invalidated = env.invalidated;\n    var paths = env.paths || this.paths;\n    var requested = this.requested.slice(0);\n    var rootChangeHandler = modelRoot.onChange;\n\n    // Run invalidations first.\n    if (invalidated && invalidated.length) {\n        changed = invalidatePaths({ _root: modelRoot, _path: [] }, invalidated, false);\n    }\n\n    if (paths && paths.length && !(!jsonGraph || typeof jsonGraph !== 'object')) {\n        var results = setJSONGraphs(\n            { _root: modelRoot },\n            [{ paths: paths, jsonGraph: jsonGraph }],\n            modelRoot.errorSelector, modelRoot.comparator, false\n        );\n        paths = results[0];\n        changed = changed || results[2];\n    }\n\n    if (changed && rootChangeHandler) {\n        rootChangeHandler();\n    }\n\n    this.observers.slice(0).forEach(function(observer, index) {\n        observer.onNext({\n            type: 'get', paths: requested[index] ||\n                filterPathsBoundTo(boundPath, paths)\n        });\n    });\n}\n\nRequest.prototype.error =\nRequest.prototype.onError = function(error) {\n\n    var queue = this.parent;\n\n    if (!queue) {\n        return;\n    }\n\n    if (this.responded === false) {\n        this.responded = true;\n        // Remove this request from the request queue as soon as we get\n        // at least one response back. This ensures we won't be the target\n        // of in-flight batch requests.\n        queue.remove(this);\n    }\n\n    error = error || {};\n\n    // Converts errors to object we can insert into the cache.\n    error = !(error instanceof Error) ?\n        // if it's $type error, use it raw\n        error.$type === $error && error ||\n        // Otherwise make it an error\n        { $type: $error, value: error } :\n        // If it's instanceof Error, pluck error.message\n        { $type: $error, value: { message: error.message }};\n\n    var modelRoot = queue.modelRoot;\n\n    var errorPathValues = toPaths(toCollapseTrees(\n        this.requested.reduce(function(collapseMap, paths) {\n            return toCollapseMap(paths, collapseMap);\n        }, {})\n    ))\n    .map(function(path) { return { path: path, value: error }; });\n\n    if (errorPathValues.length) {\n        setPathValues(\n            { _root: modelRoot, _path: [] },\n            errorPathValues,\n            modelRoot.errorSelector,\n            modelRoot.comparator,\n            false\n        );\n    }\n\n    Subject.prototype.onError.call(this, error);\n}\n\nRequest.prototype.complete =\nRequest.prototype.onCompleted = function() {\n    if (this.responded === false) {\n        this.onNext({});\n    }\n    Subject.prototype.onCompleted.call(this);\n}\n\nRequest.prototype.remove = function(subscription) {\n    var index = this.subscriptions.indexOf(subscription);\n    if (~index) {\n        this.requested.splice(index, 1);\n        this.optimized.splice(index, 1);\n        this.observers.splice(index, 1);\n        this.subscriptions.splice(index, 1);\n    }\n    if (this.subscriptions.length === 0) {\n        this.dispose();\n    }\n    return this;\n}\n\nRequest.prototype.dispose =\nRequest.prototype.unsubscribe = function () {\n    this.tree = {};\n    this.data = null;\n    this.paths = null;\n    this.active = false;\n    this.boundPath = null;\n    this.requested = [];\n    this.optimized = [];\n    var queue = this.parent;\n    if (queue) {\n        this.parent = null;\n        queue.remove(this);\n    }\n    var disposable = this.disposable;\n    if (disposable) {\n        this.disposable = null;\n        if (disposable.dispose) {\n            disposable.dispose();\n        } else if (disposable.unsubscribe) {\n            disposable.unsubscribe();\n        }\n    }\n    Subject.prototype.dispose.call(this);\n}\n\nRequest.prototype.connect = function() {\n    if (!this.active && !this.disposable) {\n        var scheduledDisposable = this.scheduler.schedule(flush.bind(this));\n        if (!this.disposable) {\n            this.disposable = scheduledDisposable;\n        }\n    }\n    return this;\n}\n\nRequest.prototype.batch = function(requested, optimized,\n                                   requestedComplements,\n                                   optimizedComplements) {\n    if (this.active) {\n        var requestedIntersection = [];\n        var optimizedIntersection = [];\n        if (findIntersections(this.tree,\n                              requested, optimized,\n                              requestedComplements,\n                              optimizedComplements,\n                              requestedIntersection,\n                              optimizedIntersection)) {\n            this.requested.push(requestedIntersection);\n            this.optimized.push(optimizedIntersection);\n            return this;\n        }\n        return null;\n    }\n    this.requested.push(requested);\n    this.optimized.push(optimized);\n    return this;\n}\n\nfunction flush() {\n\n    this.active = true;\n\n    var obs, paths = this.paths = toPaths(this.tree = toCollapseTrees(\n        this.optimized.reduce(function(collapseMap, paths) {\n            return toCollapseMap(paths, collapseMap);\n        }, {})\n    ));\n\n    try {\n        switch (this.type) {\n            case 'get':\n                obs = this.dataSource.get(paths);\n                break;\n            case 'set':\n                obs = this.dataSource.set({ paths: paths, jsonGraph: this.data });\n                break;\n            case 'call':\n                obs = this.dataSource.call.apply(this.dataSource, this.data);\n                break;\n        }\n        this.disposable = obs.subscribe(this);\n    } catch (e) {\n        this.disposable = {};\n        Subject.prototype.onError.call(this, new InvalidSourceError(e));\n    }\n}\n\nfunction findIntersections(tree,\n                           requested, optimized,\n                           requestedComplements,\n                           optimizedComplements,\n                           requestedIntersection,\n                           optimizedIntersection) {\n\n    var index = -1;\n    var complementIndex = -1;\n    var intersectionIndex = -1;\n    var optTotal = optimized.length;\n    var reqTotal = requested.length - 1;\n\n    while (++index < optTotal) {\n        var path = optimized[index];\n        var pathLen = path.length;\n        var subTree = tree[pathLen];\n        if (subTree && hasIntersection(subTree, path, 0, pathLen)) {\n            optimizedIntersection[++intersectionIndex] = path;\n            requestedIntersection[intersectionIndex] = requested[\n                index < reqTotal ? index : reqTotal\n            ];\n        } else {\n            optimizedComplements[++complementIndex] = path;\n            requestedComplements[complementIndex] = requested[\n                index < reqTotal ? index : reqTotal\n            ];\n        }\n    }\n\n    return ~intersectionIndex;\n}\n\nfunction filterPathsBoundTo(boundPath, paths) {\n\n    var boundLength;\n\n    if (!boundPath || (boundLength = boundPath.length) === 0) {\n        return paths;\n    }\n\n    var filtered = [], filteredIndex = -1, keyIndex;\n    var path, pathsIndex = -1, pathsCount = paths.length;\n\n    outer: while (++pathsIndex < pathsCount) {\n        path = paths[pathsIndex];\n        if (path.length > boundLength) {\n            keyIndex = 0;\n            do {\n                if (path[keyIndex] !== boundPath[keyIndex]) {\n                    continue outer;\n                }\n            } while (++keyIndex < boundLength);\n            filtered[++filteredIndex] = path.slice(boundLength);\n        }\n    }\n\n    return filtered;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/request/Request.js","var Subscriber = require('./Subscriber');\nvar Subscription = require('./Subscription');\n\nmodule.exports = Subject;\n\nfunction Subject(observers, parent) {\n    Subscriber.call(this, null, parent);\n    this.observers = observers || [];\n}\n\nSubject.prototype = Object.create(Subscriber.prototype);\n\n// Unused\n// Subject.prototype.onNext = function(value) {\n//     this.observers.slice(0).forEach(function(observer) {\n//         observer.onNext(value);\n//     });\n// }\n\nSubject.prototype.onError = function(error) {\n    var observers = this.observers.slice(0);\n    this.dispose();\n    observers.forEach(function(observer) {\n        observer.onError(error);\n    });\n}\n\nSubject.prototype.onCompleted = function() {\n    var observers = this.observers.slice(0);\n    this.dispose();\n    observers.forEach(function(observer) {\n        observer.onCompleted();\n    });\n}\n\nSubject.prototype.subscribe = function(subscriber) {\n    this.observers.push(subscriber);\n    this.subscriptions.push(subscriber = new Subscription([subscriber], this));\n    return subscriber;\n}\n\nSubject.prototype.dispose =\nSubject.prototype.unsubscribe = function () {\n    this.observers = [];\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/request/Subject.js","function TimeoutScheduler(delay) {\n    this.delay = delay;\n}\n\nvar TimerDisposable = function TimerDisposable(id) {\n    this.id = id;\n    this.disposed = false;\n};\n\nTimeoutScheduler.prototype.schedule = function schedule(action) {\n    return new TimerDisposable(setTimeout(action, this.delay));\n};\n\nTimerDisposable.prototype.dispose =\nTimerDisposable.prototype.unsubscribe = function() {\n    if (!this.disposed) {\n        clearTimeout(this.id);\n        this.id = null;\n        this.disposed = true;\n    }\n};\n\nmodule.exports = TimeoutScheduler;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/schedulers/TimeoutScheduler.js","module.exports = function arrayFlatMap(array, selector) {\n    var index = -1;\n    var i = -1;\n    var n = array.length;\n    var array2 = [];\n    while (++i < n) {\n        var array3 = selector(array[i], i, array);\n        var j = -1;\n        var k = array3.length;\n        while (++j < k) {\n            array2[++index] = array3[j];\n        }\n    }\n    return array2;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/support/array-flat-map.js","var isArray = Array.isArray;\nvar isInternal = require('../internal/isInternal');\n\nmodule.exports = clone;\n\nfunction clone(source) {\n    var dest = source;\n    if (!(!dest || typeof dest !== 'object')) {\n        dest = isArray(source) ? [] : {};\n        for (var key in source) {\n            if (isInternal(key)) {\n                continue;\n            }\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./lib/support/clone.js","var isObject = require('./isObject');\nmodule.exports = function getSize(node) {\n    return isObject(node) && node.$expires || undefined;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/support/getExpires.js","var isObject = require('./../support/isObject');\n\nmodule.exports = function getType(node, anyType) {\n    var type = isObject(node) && node.$type || void 0;\n    if (anyType && type) {\n        return 'branch';\n    }\n    return type;\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/support/getType.js","var isArray = Array.isArray;\nvar isObject = require('./../support/isObject');\n\nmodule.exports = function isPathValue(pathValue) {\n    return isObject(pathValue) && (\n        isArray(pathValue.path) || (\n            typeof pathValue.path === 'string'\n        ));\n};\n\n\n\n// WEBPACK FOOTER //\n// ./lib/support/isPathValue.js","module.exports = require('./lib/index');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/symbol-observable/index.js\n// module id = 95\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ponyfill = require('./ponyfill');\n\nvar _ponyfill2 = _interopRequireDefault(_ponyfill);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nvar root; /* global window */\n\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = (0, _ponyfill2['default'])(root);\nexports['default'] = result;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/symbol-observable/lib/index.js\n// module id = 96\n// module chunks = 0","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n\tvalue: true\n});\nexports['default'] = symbolObservablePonyfill;\nfunction symbolObservablePonyfill(root) {\n\tvar result;\n\tvar _Symbol = root.Symbol;\n\n\tif (typeof _Symbol === 'function') {\n\t\tif (_Symbol.observable) {\n\t\t\tresult = _Symbol.observable;\n\t\t} else {\n\t\t\tresult = _Symbol('observable');\n\t\t\t_Symbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/symbol-observable/lib/ponyfill.js\n// module id = 97\n// module chunks = 0","module.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.l; }\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tconfigurable: false,\r\n\t\t\tget: function() { return module.i; }\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n}\r\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/module.js\n// module id = 98\n// module chunks = 0","module.exports = require(\"@graphistry/falcor-path-utils/lib/computeFlatBufferHash\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@graphistry/falcor-path-utils/lib/computeFlatBufferHash\"\n// module id = 99\n// module chunks = 0","module.exports = require(\"@graphistry/falcor-path-utils/lib/flatBufferToPaths\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@graphistry/falcor-path-utils/lib/flatBufferToPaths\"\n// module id = 100\n// module chunks = 0","module.exports = require(\"@graphistry/falcor-path-utils/lib/getHashCode\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@graphistry/falcor-path-utils/lib/getHashCode\"\n// module id = 101\n// module chunks = 0","module.exports = require(\"@graphistry/falcor-path-utils/lib/hasIntersection\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@graphistry/falcor-path-utils/lib/hasIntersection\"\n// module id = 102\n// module chunks = 0","module.exports = require(\"@graphistry/falcor-path-utils/lib/toCollapseMap\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@graphistry/falcor-path-utils/lib/toCollapseMap\"\n// module id = 103\n// module chunks = 0","module.exports = require(\"@graphistry/falcor-path-utils/lib/toCollapseTrees\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@graphistry/falcor-path-utils/lib/toCollapseTrees\"\n// module id = 104\n// module chunks = 0","module.exports = require(\"@graphistry/falcor-path-utils/lib/toFlatBuffer\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@graphistry/falcor-path-utils/lib/toFlatBuffer\"\n// module id = 105\n// module chunks = 0","module.exports = require(\"@graphistry/falcor-path-utils/lib/toPaths\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"@graphistry/falcor-path-utils/lib/toPaths\"\n// module id = 106\n// module chunks = 0"],"sourceRoot":""}